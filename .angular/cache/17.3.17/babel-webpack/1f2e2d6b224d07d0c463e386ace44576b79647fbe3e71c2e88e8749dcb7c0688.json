{"ast":null,"code":"import { HttpClient, HttpEventType } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction CompressPdfComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" Uploading... \", ctx_r0.uploadProgress, \"% \");\n  }\n}\nfunction CompressPdfComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"number\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" Original Size: \", i0.ɵɵpipeBind2(2, 1, ctx_r0.originalSize / 1024, \"1.0-2\"), \" KB \");\n  }\n}\nfunction CompressPdfComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"number\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" Compressed Size: \", i0.ɵɵpipeBind2(2, 1, ctx_r0.compressedSize / 1024, \"1.0-2\"), \" KB \");\n  }\n}\nfunction CompressPdfComponent_a_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 5);\n    i0.ɵɵtext(1, \"\\u2B07\\uFE0F Download Compressed PDF\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"href\", ctx_r0.downloadUrl, i0.ɵɵsanitizeUrl);\n  }\n}\nexport let CompressPdfComponent = /*#__PURE__*/(() => {\n  class CompressPdfComponent {\n    http;\n    selectedFile = null;\n    originalSize = null;\n    compressedSize = null;\n    downloadUrl = null;\n    isUploading = false;\n    uploadProgress = 0;\n    constructor(http) {\n      this.http = http;\n    }\n    onFileSelected(event) {\n      this.selectedFile = event.target.files[0];\n      this.originalSize = this.selectedFile?.size || null;\n      this.downloadUrl = null;\n      this.compressedSize = null;\n    }\n    compressPDF() {\n      if (!this.selectedFile) return;\n      const formData = new FormData();\n      formData.append('file', this.selectedFile);\n      this.isUploading = true;\n      this.http.post('https://your-app-name.onrender.com/api/compress-pdf', formData, {\n        responseType: 'blob',\n        reportProgress: true,\n        observe: 'events'\n      }).subscribe(event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.uploadProgress = Math.round(100 * (event.loaded / event.total));\n        }\n        if (event.type === HttpEventType.Response) {\n          const blob = new Blob([event.body], {\n            type: 'application/pdf'\n          });\n          this.compressedSize = blob.size;\n          this.downloadUrl = window.URL.createObjectURL(blob);\n          this.isUploading = false;\n        }\n      }, err => {\n        console.error('Compression failed', err);\n        this.isUploading = false;\n      });\n    }\n    static ɵfac = function CompressPdfComponent_Factory(t) {\n      return new (t || CompressPdfComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CompressPdfComponent,\n      selectors: [[\"app-compress-pdf\"]],\n      decls: 10,\n      vars: 5,\n      consts: [[1, \"container\"], [\"type\", \"file\", \"accept\", \".pdf\", 3, \"change\"], [3, \"click\", \"disabled\"], [4, \"ngIf\"], [\"download\", \"compressed.pdf\", 3, \"href\", 4, \"ngIf\"], [\"download\", \"compressed.pdf\", 3, \"href\"]],\n      template: function CompressPdfComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"\\uD83D\\uDCC4 Compress PDF\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"input\", 1);\n          i0.ɵɵlistener(\"change\", function CompressPdfComponent_Template_input_change_3_listener($event) {\n            return ctx.onFileSelected($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function CompressPdfComponent_Template_button_click_4_listener() {\n            return ctx.compressPDF();\n          });\n          i0.ɵɵtext(5, \"Compress\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(6, CompressPdfComponent_div_6_Template, 2, 1, \"div\", 3)(7, CompressPdfComponent_div_7_Template, 3, 4, \"div\", 3)(8, CompressPdfComponent_div_8_Template, 3, 4, \"div\", 3)(9, CompressPdfComponent_a_9_Template, 2, 1, \"a\", 4);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", !ctx.selectedFile || ctx.isUploading);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.isUploading);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.originalSize);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.compressedSize);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.downloadUrl);\n        }\n      },\n      dependencies: [i2.NgIf, i2.DecimalPipe]\n    });\n  }\n  return CompressPdfComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}