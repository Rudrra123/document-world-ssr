{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { environment } from 'src/environments/environment'; // Ensure this path is correct for your environment\nlet ImageToolsComponent = class ImageToolsComponent {\n  http;\n  sanitizer;\n  route;\n  router;\n  fileInput;\n  // Properties for Navbar Dropdowns and Mobile Menu\n  showMobileMenu = false;\n  showPdfTools = false;\n  showCompressTools = false;\n  hoverTimeout;\n  activeTool = null;\n  selectedFile = null;\n  previewUrl = '';\n  blobUrl = '';\n  downloadUrl = '';\n  downloadedFileName = '';\n  originalSize = 0;\n  compressedSize = 0;\n  progress = 0; // Shared progress for all tools\n  errorMessage = null; // Shared error message for all tools\n  isDragging = false;\n  // Resize Tool specific properties\n  resizeWidth = null;\n  resizeHeight = null;\n  // Convert Tool specific properties\n  targetFormat = 'jpeg';\n  // Crop Tool specific properties\n  cropX = 0;\n  cropY = 0;\n  cropWidth = 0;\n  cropHeight = 0;\n  // Image to Text (OCR) specific properties\n  extractedText = '';\n  isLoadingText = false; // Specific loading state for OCR\n  constructor(http, sanitizer, route, router) {\n    this.http = http;\n    this.sanitizer = sanitizer;\n    this.route = route;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      const toolParam = params.get('tool');\n      // Use the tool from the URL, or show the main grid if no tool is specified\n      this.activeTool = toolParam || null;\n      // Reset state when navigating to a new tool or back to grid\n      this.resetSingleFile();\n    });\n  }\n  // --- Navbar Dropdown and Mobile Menu Functions ---\n  toggleMobileMenu() {\n    this.showMobileMenu = !this.showMobileMenu;\n  }\n  closeMobileMenu() {\n    this.showMobileMenu = false;\n  }\n  onDropdownHover(isHovering, type) {\n    clearTimeout(this.hoverTimeout);\n    if (isHovering) {\n      this.showPdfTools = type === 'pdf';\n      this.showCompressTools = type === 'compress';\n    } else {\n      this.hoverTimeout = setTimeout(() => {\n        this.showPdfTools = false;\n        this.showCompressTools = false;\n      }, 100); // Small delay to prevent closing when moving mouse between button and menu\n    }\n  }\n  toggleDropdown(type) {\n    if (type === 'pdf') {\n      this.showPdfTools = !this.showPdfTools;\n      this.showCompressTools = false; // Close other dropdown\n    } else if (type === 'compress') {\n      this.showCompressTools = !this.showCompressTools;\n      this.showPdfTools = false; // Close other dropdown\n    }\n  }\n  hidePdfTools() {\n    this.showPdfTools = false;\n    this.showMobileMenu = false;\n  }\n  hideCompressTools() {\n    this.showCompressTools = false;\n    this.showMobileMenu = false;\n  }\n  setActiveTool(tool) {\n    this.activeTool = tool;\n    this.resetSingleFile(); // Reset all tool-specific states when changing tool\n    if (tool) {\n      this.router.navigate(['/image-tools', tool]);\n    } else {\n      this.router.navigate(['/image-tools']); // clean URL\n    }\n  }\n  // --- File Selection and Drag/Drop Handlers (Common for all single-file tools) ---\n  preventDefaults(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  onDragOverSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = true;\n  }\n  onDragLeaveSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = false;\n  }\n  onDropSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = false;\n    const file = event.dataTransfer?.files?.[0];\n    if (file?.type.startsWith('image/')) {\n      this.setFile(file);\n      this.resetResultState(); // Reset results when a new file is dropped\n    } else {\n      this.errorMessage = 'Please drop a valid image file.';\n      this.resetSingleFile();\n    }\n  }\n  onFileSelectedSingle(event) {\n    const input = event.target;\n    const file = input.files?.[0];\n    if (file) {\n      this.setFile(file);\n      this.resetResultState(); // Reset results when a new file is selected\n    }\n  }\n  setFile(file) {\n    this.revokeObjectUrls();\n    this.selectedFile = file;\n    this.previewUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(file));\n    this.originalSize = file.size;\n    // Reset general result states here, specific tool states are reset in resetSingleFile\n    this.downloadUrl = '';\n    this.compressedSize = 0;\n    this.progress = 0;\n    this.errorMessage = null;\n  }\n  // --- Tool-Specific Upload Functions ---\n  uploadSingleFile() {\n    if (!this.selectedFile) {\n      this.errorMessage = 'Please select an image.';\n      return;\n    }\n    this.resetResultState(); // Clear previous results/errors for this operation\n    const formData = new FormData();\n    formData.append('file', this.selectedFile);\n    this.http.post(`${environment.apiUrl}/compress-image`, formData, {\n      reportProgress: true,\n      observe: 'events',\n      responseType: 'blob'\n    }).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress && event.total) {\n        this.progress = Math.round(event.loaded / event.total * 100);\n      }\n      if (event.type === HttpEventType.Response) {\n        const blob = new Blob([event.body], {\n          type: 'image/jpeg'\n        });\n        this.revokeObjectUrls();\n        this.blobUrl = URL.createObjectURL(blob);\n        this.downloadUrl = this.blobUrl;\n        this.compressedSize = blob.size;\n        this.downloadedFileName = 'compressed_' + this.selectedFile.name;\n        this.progress = 100;\n        this.errorMessage = null; // Clear error on success\n      }\n    }, error => {\n      console.error('Compression error:', error);\n      this.errorMessage = error?.error?.detail || 'Compression failed.';\n      this.progress = 0;\n    });\n  }\n  uploadResizeFile() {\n    if (!this.selectedFile) {\n      this.errorMessage = 'Please select an image.';\n      return;\n    }\n    if (!this.resizeWidth || !this.resizeHeight) {\n      this.errorMessage = 'Please enter valid width and height.';\n      return;\n    }\n    this.resetResultState(); // Clear previous results/errors for this operation\n    const formData = new FormData();\n    formData.append('file', this.selectedFile);\n    formData.append('width', this.resizeWidth.toString());\n    formData.append('height', this.resizeHeight.toString());\n    this.http.post(`${environment.apiUrl}/resize-image`, formData, {\n      reportProgress: true,\n      observe: 'events',\n      responseType: 'blob'\n    }).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress && event.total) {\n        this.progress = Math.round(event.loaded / event.total * 100);\n      }\n      if (event.type === HttpEventType.Response) {\n        const blob = new Blob([event.body], {\n          type: event.body?.type || 'image/jpeg'\n        });\n        this.revokeObjectUrls();\n        this.blobUrl = URL.createObjectURL(blob);\n        this.downloadUrl = this.blobUrl;\n        this.compressedSize = blob.size;\n        this.downloadedFileName = 'resized_' + this.selectedFile.name;\n        this.progress = 100;\n        this.errorMessage = null; // Clear error on success\n      }\n    }, error => {\n      console.error('Resize error:', error);\n      this.errorMessage = error?.error?.detail || 'Resize failed.';\n      this.progress = 0;\n    });\n  }\n  uploadConvertFile() {\n    if (!this.selectedFile || !this.targetFormat) {\n      this.errorMessage = 'Select an image and target format.';\n      return;\n    }\n    this.resetResultState(); // Clear previous results/errors for this operation\n    const formData = new FormData();\n    formData.append('file', this.selectedFile);\n    formData.append('target_format', this.targetFormat);\n    this.http.post(`${environment.apiUrl}/convert-image`, formData, {\n      reportProgress: true,\n      observe: 'events',\n      responseType: 'blob'\n    }).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress && event.total) {\n        this.progress = Math.round(event.loaded / event.total * 100);\n      }\n      if (event.type === HttpEventType.Response) {\n        const blob = new Blob([event.body], {\n          type: `image/${this.targetFormat}`\n        });\n        this.revokeObjectUrls();\n        this.blobUrl = URL.createObjectURL(blob);\n        this.downloadUrl = this.blobUrl;\n        this.compressedSize = blob.size;\n        this.downloadedFileName = `converted_${this.selectedFile.name.split('.')[0]}.${this.targetFormat}`;\n        this.progress = 100;\n        this.errorMessage = null; // Clear error on success\n      }\n    }, error => {\n      console.error('Conversion error:', error);\n      this.errorMessage = error?.error?.detail || 'Conversion failed.';\n      this.progress = 0;\n    });\n  }\n  uploadCropFile() {\n    if (!this.selectedFile || !this.cropWidth || !this.cropHeight) {\n      this.errorMessage = 'Please provide image and crop dimensions.';\n      return;\n    }\n    this.resetResultState(); // Clear previous results/errors for this operation\n    const formData = new FormData();\n    formData.append('file', this.selectedFile);\n    formData.append('x', String(this.cropX));\n    formData.append('y', String(this.cropY));\n    formData.append('width', String(this.cropWidth));\n    formData.append('height', String(this.cropHeight));\n    this.http.post(`${environment.apiUrl}/crop-image`, formData, {\n      reportProgress: true,\n      observe: 'events',\n      responseType: 'blob'\n    }).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress && event.total) {\n        this.progress = Math.round(event.loaded / event.total * 100);\n      }\n      if (event.type === HttpEventType.Response) {\n        const blob = new Blob([event.body], {\n          type: this.selectedFile.type\n        });\n        this.revokeObjectUrls();\n        this.blobUrl = URL.createObjectURL(blob);\n        this.downloadUrl = this.blobUrl;\n        this.compressedSize = blob.size;\n        this.downloadedFileName = `cropped_${this.selectedFile.name}`;\n        this.progress = 100; // Ensure it's 100\n        this.errorMessage = null; // Clear error on success\n      }\n    }, error => {\n      console.error('Crop error:', error);\n      this.errorMessage = error?.error?.detail || 'Cropping failed.';\n      this.progress = 0;\n    });\n  }\n  // --- Image to Text (OCR) Function ---\n  extractText() {\n    if (!this.selectedFile) {\n      this.errorMessage = 'Please select an image file first.';\n      return;\n    }\n    this.resetResultState(); // Clear previous results/errors for this operation\n    this.isLoadingText = true; // Activate OCR specific loading state\n    this.progress = 1; // Start progress from 1 to show activity immediately\n    const formData = new FormData();\n    formData.append('file', this.selectedFile);\n    this.http.post(`${environment.apiUrl}/image-to-text`, formData, {\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe({\n      next: event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.progress = Math.round(event.loaded / event.total * 100);\n        } else if (event.type === HttpEventType.Response) {\n          this.extractedText = event.body?.text || 'No text found.';\n          if (!event.body?.text || event.body.text.trim() === '') {\n            this.errorMessage = 'No discernible text was extracted from the image.';\n          }\n          this.isLoadingText = false; // Deactivate OCR specific loading state\n          this.progress = 100; // Complete progress\n          this.errorMessage = null; // Clear error on success\n        }\n      },\n      error: error => {\n        console.error('Error during OCR:', error);\n        this.errorMessage = error?.error?.detail || 'An unexpected error occurred during OCR. Please try again.';\n        this.isLoadingText = false; // Deactivate OCR specific loading state\n        this.progress = 0; // Reset progress on error\n        this.extractedText = ''; // Clear any previous text on error\n      }\n    });\n  }\n  // --- Copy to Clipboard for OCR Text ---\n  copyTextToClipboard() {\n    if (this.extractedText) {\n      // Modern approach: navigator.clipboard.writeText(this.extractedText)\n      navigator.clipboard.writeText(this.extractedText).then(() => {\n        // You can replace alert with a custom message box or toast notification\n        alert('Text copied to clipboard!');\n      }).catch(err => {\n        console.error('Failed to copy text: ', err);\n        alert('Failed to copy text. Please copy manually.');\n      });\n    }\n  }\n  /**\n   * Resets the extracted text, loading state, and error message for the OCR tool.\n   * This is called before starting a new OCR operation or when a new file is selected/dropped.\n   */\n  resetResultState() {\n    this.extractedText = '';\n    this.isLoadingText = false;\n    // Don't reset general progress/error here, as other tools also use them\n    // and they might be in an ongoing state.\n    // The specific tool's function (e.g., extractText, uploadSingleFile)\n    // will manage `progress` and `errorMessage` for its own operation.\n    // However, when a new file is *selected*, `setFile` and `resetSingleFile`\n    // will clear `progress` and `errorMessage` globally.\n  }\n  // --- Reset All Tool States ---\n  resetSingleFile() {\n    // Common resets for all tools\n    this.selectedFile = null;\n    this.previewUrl = '';\n    this.blobUrl = '';\n    this.downloadUrl = '';\n    this.downloadedFileName = '';\n    this.originalSize = 0;\n    this.compressedSize = 0;\n    this.progress = 0; // Reset shared progress\n    this.errorMessage = null; // Reset shared error message\n    this.isDragging = false;\n    // Reset Resize specific properties\n    this.resizeWidth = null;\n    this.resizeHeight = null;\n    // Reset Convert specific properties\n    this.targetFormat = 'jpeg';\n    // Reset Crop specific properties\n    this.cropX = 0;\n    this.cropY = 0;\n    this.cropWidth = 0;\n    this.cropHeight = 0;\n    // Reset Image to Text (OCR) specific properties\n    // Ensure these are explicitly reset here for a full tool reset\n    this.extractedText = '';\n    this.isLoadingText = false;\n    // Clear file input element\n    if (this.fileInput?.nativeElement) {\n      this.fileInput.nativeElement.value = '';\n    }\n    this.revokeObjectUrls();\n  }\n  revokeObjectUrls() {\n    if (this.blobUrl?.startsWith('blob:')) {\n      URL.revokeObjectURL(this.blobUrl);\n    }\n    // Check if previewUrl is a SafeUrl and extract the underlying blob URL if it is\n    if (this.previewUrl && typeof this.previewUrl === 'object' && this.previewUrl.changingThisBreaksApplicationSecurity?.startsWith('blob:')) {\n      URL.revokeObjectURL(this.previewUrl.changingThisBreaksApplicationSecurity);\n    }\n  }\n};\n__decorate([ViewChild('fileInputSingle'), __metadata(\"design:type\", ElementRef)], ImageToolsComponent.prototype, \"fileInput\", void 0);\nImageToolsComponent = __decorate([Component({\n  selector: 'app-image-tools',\n  templateUrl: './image-tools.component.html',\n  styleUrls: ['./image-tools.component.css']\n}), __metadata(\"design:paramtypes\", [HttpClient, DomSanitizer, ActivatedRoute, Router])], ImageToolsComponent);\nexport { ImageToolsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}