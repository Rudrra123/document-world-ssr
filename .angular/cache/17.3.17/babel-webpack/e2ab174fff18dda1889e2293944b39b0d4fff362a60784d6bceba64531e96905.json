{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"fileInput\"];\nfunction CompressImageComponent_ng_container_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 16);\n    i0.ɵɵlistener(\"click\", function CompressImageComponent_ng_container_18_Template_div_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.triggerFileInput());\n    });\n    i0.ɵɵelement(2, \"i\", 17);\n    i0.ɵɵelementStart(3, \"p\", 18);\n    i0.ɵɵtext(4, \"Drag & Drop your image here\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 19);\n    i0.ɵɵtext(6, \"or click to browse\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction CompressImageComponent_ng_container_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 20);\n    i0.ɵɵelement(2, \"img\", 21);\n    i0.ɵɵelementStart(3, \"div\", 22)(4, \"p\", 23);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 24);\n    i0.ɵɵlistener(\"click\", function CompressImageComponent_ng_container_19_Template_button_click_6_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r2 = i0.ɵɵnextContext();\n      $event.stopPropagation();\n      return i0.ɵɵresetView(ctx_r2.resetTool());\n    });\n    i0.ɵɵelement(7, \"i\", 25);\n    i0.ɵɵtext(8, \" Change Image \");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", ctx_r2.previewUrl, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Original: \", (ctx_r2.originalSize / 1024).toFixed(1), \" KB\");\n  }\n}\nfunction CompressImageComponent_ng_container_21_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 30)(2, \"label\", 31);\n    i0.ɵɵtext(3, \"Width (px)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"input\", 32);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function CompressImageComponent_ng_container_21_div_1_Template_input_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      i0.ɵɵtwoWayBindingSet(ctx_r2.resizeWidth, $event) || (ctx_r2.resizeWidth = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 30)(6, \"label\", 33);\n    i0.ɵɵtext(7, \"Height (px)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"input\", 34);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function CompressImageComponent_ng_container_21_div_1_Template_input_ngModelChange_8_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      i0.ɵɵtwoWayBindingSet(ctx_r2.resizeHeight, $event) || (ctx_r2.resizeHeight = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r2.resizeWidth);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r2.resizeHeight);\n  }\n}\nfunction CompressImageComponent_ng_container_21_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, CompressImageComponent_ng_container_21_div_1_Template, 9, 2, \"div\", 26);\n    i0.ɵɵelementStart(2, \"button\", 27);\n    i0.ɵɵlistener(\"click\", function CompressImageComponent_ng_container_21_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.upload());\n    });\n    i0.ɵɵelement(3, \"i\", 28);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.mode === \"resize\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"disabled\", !ctx_r2.selectedFile || ctx_r2.mode === \"resize\" && (!ctx_r2.resizeWidth || !ctx_r2.resizeHeight || ctx_r2.resizeWidth <= 0 || ctx_r2.resizeHeight <= 0));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.mode === \"compress\" ? \"Optimize Image\" : \"Resize Image\", \" \");\n  }\n}\nfunction CompressImageComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵelement(1, \"div\", 36);\n    i0.ɵɵelementStart(2, \"p\", 37);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 38);\n    i0.ɵɵelement(5, \"div\", 39);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Processing image... \", ctx_r2.progress, \"%\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"width\", ctx_r2.progress, \"%\");\n  }\n}\nfunction CompressImageComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 40)(1, \"p\", 41);\n    i0.ɵɵelement(2, \"i\", 42);\n    i0.ɵɵtext(3, \" Image Processed!\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\", 43);\n    i0.ɵɵtext(5, \"New Size: \");\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 44)(9, \"a\", 45);\n    i0.ɵɵelement(10, \"i\", 46);\n    i0.ɵɵtext(11, \" Download \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 47);\n    i0.ɵɵlistener(\"click\", function CompressImageComponent_div_23_Template_button_click_12_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.resetTool());\n    });\n    i0.ɵɵelement(13, \"i\", 48);\n    i0.ɵɵtext(14, \" Process New Image \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate1(\"\", (ctx_r2.processedFileSize / 1024).toFixed(1), \" KB\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"href\", ctx_r2.processedFileUrl, i0.ɵɵsanitizeUrl)(\"download\", ctx_r2.getDownloadFileName());\n  }\n}\nexport let CompressImageComponent = /*#__PURE__*/(() => {\n  class CompressImageComponent {\n    http;\n    sanitizer;\n    fileInput;\n    mode = 'compress';\n    // File selection and preview properties\n    selectedFile = null;\n    previewUrl = null;\n    originalSize = 0;\n    isDragOver = false;\n    // Resize specific properties\n    resizeWidth = null;\n    resizeHeight = null;\n    // Processing and result properties\n    progress = 0;\n    isProcessing = false;\n    processedFileUrl = null;\n    processedFileSize = 0;\n    constructor(http, sanitizer) {\n      this.http = http;\n      this.sanitizer = sanitizer;\n    }\n    /**\n     * Sets the current mode (compress or resize) and resets the tool state.\n     * @param newMode The mode to switch to.\n     */\n    setMode(newMode) {\n      this.mode = newMode;\n      this.resetTool(); // Reset the tool whenever the mode changes\n    }\n    /**\n     * Triggers the hidden file input element click.\n     */\n    triggerFileInput() {\n      this.fileInput.nativeElement.click();\n    }\n    /**\n     * Prevents default browser behaviors for drag events and sets drag-over state.\n     * @param event The DOM event.\n     */\n    preventDefaults(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (event.type === 'dragover') {\n        this.isDragOver = true;\n      }\n    }\n    /**\n     * Resets drag-over state when the dragged item leaves the drop zone.\n     * @param event The drag event.\n     */\n    onDragLeave(event) {\n      this.isDragOver = false;\n    }\n    /**\n     * Handles file selection from the input element.\n     * @param event The change event from the file input.\n     */\n    onFileSelected(event) {\n      const input = event.target;\n      const file = input.files?.[0];\n      if (file) {\n        this.handleFile(file);\n      }\n      this.isDragOver = false; // Reset drag state\n    }\n    /**\n     * Handles files dropped onto the drag-and-drop area.\n     * @param event The drag event.\n     */\n    onFilesDropped(event) {\n      this.preventDefaults(event);\n      const file = event.dataTransfer?.files?.[0];\n      if (file) {\n        this.handleFile(file);\n      }\n      this.isDragOver = false; // Reset drag state\n    }\n    /**\n     * Centralized logic for setting the selected file and preparing for upload.\n     * Resets relevant states.\n     * @param file The File object to set.\n     */\n    handleFile(file) {\n      this.selectedFile = file;\n      this.originalSize = file.size;\n      this.previewUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(file));\n      this.resetProcessingState(); // Reset processing/result states\n    }\n    /**\n     * Resets all processing and result related states.\n     */\n    resetProcessingState() {\n      this.progress = 0;\n      this.isProcessing = false;\n      if (this.processedFileUrl) {\n        // Revoke the object URL to free up memory\n        URL.revokeObjectURL(this.sanitizer.bypassSecurityTrustUrl(this.processedFileUrl));\n      }\n      this.processedFileUrl = null;\n      this.processedFileSize = 0;\n    }\n    /**\n     * Resets the entire tool to its initial state, including selected file and inputs.\n     */\n    resetTool() {\n      this.clearFile(); // Clears selected file and preview\n      this.resetProcessingState(); // Clears processing/result states\n      this.resizeWidth = null;\n      this.resizeHeight = null;\n    }\n    /**\n     * Clears the currently selected file and its preview.\n     * This is called by resetTool().\n     */\n    clearFile() {\n      this.selectedFile = null;\n      if (this.previewUrl) {\n        URL.revokeObjectURL(this.sanitizer.bypassSecurityTrustUrl(this.previewUrl));\n      }\n      this.previewUrl = null;\n      this.originalSize = 0;\n      if (this.fileInput && this.fileInput.nativeElement) {\n        this.fileInput.nativeElement.value = ''; // Clear file input\n      }\n    }\n    /**\n     * Initiates the upload and processing of the selected image.\n     */\n    upload() {\n      if (!this.selectedFile) {\n        console.warn('No file selected for upload.');\n        return;\n      }\n      // Client-side validation for resize mode\n      if (this.mode === 'resize') {\n        if (!this.resizeWidth || !this.resizeHeight || this.resizeWidth <= 0 || this.resizeHeight <= 0) {\n          console.error('Please enter valid positive width and height for resizing.');\n          // You can add logic here to display an error message in the UI if needed\n          return;\n        }\n      }\n      this.isProcessing = true; // Set processing state to true\n      this.progress = 0; // Reset progress for new upload\n      this.resetProcessingState(); // Clear any previous results\n      const formData = new FormData();\n      formData.append('file', this.selectedFile);\n      let endpoint = '';\n      if (this.mode === 'resize') {\n        endpoint = 'http://127.0.0.1:8000/resize-image'; // Your FastAPI resize endpoint\n        formData.append('width', this.resizeWidth.toString());\n        formData.append('height', this.resizeHeight.toString());\n      } else {\n        // mode === 'compress'\n        endpoint = 'http://127.0.0.1:8000/compress-image'; // Your FastAPI compress endpoint\n        // Add any compression-specific parameters here if your backend supports them\n        // e.g., formData.append('quality', '80');\n      }\n      // HTTP POST request to your backend\n      this.http.post(endpoint, formData, {\n        reportProgress: true,\n        observe: 'events',\n        responseType: 'blob' // Expecting a blob (image data) back from FastAPI\n      }).subscribe(event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.progress = Math.round(event.loaded / event.total * 100);\n        } else if (event.type === HttpEventType.Response) {\n          this.isProcessing = false; // Processing complete\n          this.progress = 100; // Ensure progress is 100% on completion\n          const blob = event.body; // Get the response blob\n          this.processedFileSize = blob.size;\n          this.processedFileUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(blob)); // Sanitize URL for display\n        }\n      }, error => {\n        this.isProcessing = false; // Stop processing on error\n        this.progress = 0; // Reset progress\n        console.error('Image processing failed:', error);\n        // Implement a user-friendly error message display (e.g., a div that shows up on error)\n        this.resetTool(); // Reset the tool on error\n      });\n    }\n    /**\n     * Generates a suitable download file name based on the mode.\n     * @returns The download file name.\n     */\n    getDownloadFileName() {\n      if (!this.selectedFile) return 'processed_image'; // Fallback name\n      const nameParts = this.selectedFile.name.split('.');\n      const extension = nameParts.pop(); // Get the last part as extension\n      const baseName = nameParts.join('.'); // Join remaining parts as base name\n      return `${baseName}-${this.mode === 'compress' ? 'compressed' : 'resized'}.${extension || 'png'}`; // Default to png if no extension\n    }\n    static ɵfac = function CompressImageComponent_Factory(t) {\n      return new (t || CompressImageComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.DomSanitizer));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CompressImageComponent,\n      selectors: [[\"app-compress-image\"]],\n      viewQuery: function CompressImageComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);\n        }\n      },\n      decls: 24,\n      vars: 13,\n      consts: [[\"fileInput\", \"\"], [1, \"zen-container\"], [1, \"zen-header\", \"animate__animated\", \"animate__fadeInDown\"], [1, \"tagline\"], [1, \"zen-main-area\"], [1, \"mode-selector\", \"animate__animated\", \"animate__fadeIn\", \"animate__delay-0-5s\"], [3, \"click\"], [1, \"fas\", \"fa-compress-alt\"], [1, \"fas\", \"fa-expand-alt\"], [1, \"zen-card\", \"animate__animated\", \"animate__fadeInUp\"], [1, \"file-zone\", 3, \"dragover\", \"dragleave\", \"drop\"], [\"type\", \"file\", \"accept\", \"image/*\", \"hidden\", \"\", 3, \"change\"], [4, \"ngIf\"], [1, \"controls-area\"], [\"class\", \"processing-status animate__animated animate__fadeIn\", 4, \"ngIf\"], [\"class\", \"result-display animate__animated animate__zoomIn\", 4, \"ngIf\"], [1, \"upload-prompt\", 3, \"click\"], [1, \"fas\", \"fa-cloud-upload-alt\", \"upload-icon\"], [1, \"prompt-text\"], [1, \"browse-link\"], [1, \"image-preview-wrapper\"], [\"alt\", \"Image Preview\", 1, \"image-preview\", \"animate__animated\", \"animate__zoomIn\", 3, \"src\"], [1, \"preview-overlay\"], [1, \"original-size\"], [1, \"clear-btn\", 3, \"click\"], [1, \"fas\", \"fa-times-circle\"], [\"class\", \"resize-inputs animate__animated animate__fadeIn\", 4, \"ngIf\"], [1, \"action-button\", \"animate__animated\", \"animate__fadeIn\", 3, \"click\", \"disabled\"], [1, \"fas\", \"fa-magic\"], [1, \"resize-inputs\", \"animate__animated\", \"animate__fadeIn\"], [1, \"input-group\"], [\"for\", \"width\"], [\"type\", \"number\", \"id\", \"width\", \"placeholder\", \"e.g. 1280\", \"min\", \"1\", 1, \"zen-input\", 3, \"ngModelChange\", \"ngModel\"], [\"for\", \"height\"], [\"type\", \"number\", \"id\", \"height\", \"placeholder\", \"e.g. 720\", \"min\", \"1\", 1, \"zen-input\", 3, \"ngModelChange\", \"ngModel\"], [1, \"processing-status\", \"animate__animated\", \"animate__fadeIn\"], [1, \"progress-spinner\"], [1, \"progress-text\"], [1, \"progress-bar\"], [1, \"progress-fill\"], [1, \"result-display\", \"animate__animated\", \"animate__zoomIn\"], [1, \"result-message\"], [1, \"fas\", \"fa-check-circle\"], [1, \"result-size\"], [1, \"result-actions\"], [1, \"download-button\", 3, \"href\", \"download\"], [1, \"fas\", \"fa-download\"], [1, \"reset-button\", 3, \"click\"], [1, \"fas\", \"fa-redo-alt\"]],\n      template: function CompressImageComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"header\", 2)(2, \"h1\");\n          i0.ɵɵtext(3, \"\\uD83D\\uDCF8 Zen Image Lab\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"p\", 3);\n          i0.ɵɵtext(5, \"Effortlessly optimize your images.\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(6, \"main\", 4)(7, \"div\", 5)(8, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function CompressImageComponent_Template_button_click_8_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.setMode(\"compress\"));\n          });\n          i0.ɵɵelement(9, \"i\", 7);\n          i0.ɵɵtext(10, \" Compress \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"button\", 6);\n          i0.ɵɵlistener(\"click\", function CompressImageComponent_Template_button_click_11_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.setMode(\"resize\"));\n          });\n          i0.ɵɵelement(12, \"i\", 8);\n          i0.ɵɵtext(13, \" Resize \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(14, \"div\", 9)(15, \"div\", 10);\n          i0.ɵɵlistener(\"dragover\", function CompressImageComponent_Template_div_dragover_15_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.preventDefaults($event));\n          })(\"dragleave\", function CompressImageComponent_Template_div_dragleave_15_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onDragLeave($event));\n          })(\"drop\", function CompressImageComponent_Template_div_drop_15_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onFilesDropped($event));\n          });\n          i0.ɵɵelementStart(16, \"input\", 11, 0);\n          i0.ɵɵlistener(\"change\", function CompressImageComponent_Template_input_change_16_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onFileSelected($event));\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(18, CompressImageComponent_ng_container_18_Template, 7, 0, \"ng-container\", 12)(19, CompressImageComponent_ng_container_19_Template, 9, 2, \"ng-container\", 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"div\", 13);\n          i0.ɵɵtemplate(21, CompressImageComponent_ng_container_21_Template, 5, 3, \"ng-container\", 12)(22, CompressImageComponent_div_22_Template, 6, 3, \"div\", 14)(23, CompressImageComponent_div_23_Template, 15, 3, \"div\", 15);\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵclassProp(\"active\", ctx.mode === \"compress\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵclassProp(\"active\", ctx.mode === \"resize\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵclassProp(\"drag-over\", ctx.isDragOver)(\"has-file\", ctx.selectedFile);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", !ctx.selectedFile);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedFile);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.isProcessing && !ctx.processedFileUrl);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.isProcessing);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.processedFileUrl && !ctx.isProcessing);\n        }\n      },\n      dependencies: [i3.NgIf, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.NgControlStatus, i4.MinValidator, i4.NgModel],\n      styles: [\"[_ngcontent-%COMP%]:root{--primary-accent: #5e72e4;--secondary-bg: #f2f4f8;--card-bg: #ffffff;--text-dark: #212529;--text-muted: #6c757d;--border-color: #dcdcdc;--shadow-light: rgba(0, 0, 0, .06);--shadow-medium: rgba(0, 0, 0, .1);--success-color: #28a745;--success-bg: #e6f4ea;--danger-color: #dc3545;--danger-bg: #fcebea}.upload-icon[_ngcontent-%COMP%]{font-size:4rem;color:var(--primary-accent);margin-bottom:16px;transition:transform .3s ease,color .3s ease}.file-zone[_ngcontent-%COMP%]:hover   .upload-icon[_ngcontent-%COMP%]{transform:scale(1.1);color:#445ae3}.prompt-text[_ngcontent-%COMP%]{font-size:1.1rem;font-weight:600;color:var(--text-dark)}.browse-link[_ngcontent-%COMP%]{font-size:.95rem;margin-top:6px;padding:6px 14px;background-color:var(--primary-accent);color:#fff;border-radius:6px;display:inline-block;cursor:pointer;transition:background-color .2s ease}.browse-link[_ngcontent-%COMP%]:hover{background-color:#445ae3}.mode-selector[_ngcontent-%COMP%]   button.active[_ngcontent-%COMP%]{background-color:var(--primary-accent);color:#fff;box-shadow:0 3px 10px #5e72e466}.action-button[_ngcontent-%COMP%]{background-color:var(--primary-accent);color:#fff;padding:16px 35px;font-size:1.05rem;font-weight:600;border-radius:10px;border:none;box-shadow:0 6px 20px #5e72e44d;transition:all .3s ease}.action-button[_ngcontent-%COMP%]:hover{background-color:#445ae3;transform:translateY(-2px)}.download-button[_ngcontent-%COMP%]{background-color:var(--primary-accent)}.download-button[_ngcontent-%COMP%]:hover{background-color:#445ae3}\"]\n    });\n  }\n  return CompressImageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}