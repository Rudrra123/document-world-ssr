{"ast":null,"code":"// src/app/tools/compress-image/compress-image.component.ts\nimport { ElementRef } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser'; // Import DomSanitizer and SafeUrl\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"fileInput\"];\nfunction CompressImageComponent_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"\\uD83D\\uDCC1 Click or Drop to Upload Image\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CompressImageComponent_span_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"\\u2705 \", ctx_r1.selectedFile.name, \"\");\n  }\n}\nfunction CompressImageComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"input\", 17);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function CompressImageComponent_div_18_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.resizeWidth, $event) || (ctx_r1.resizeWidth = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"input\", 18);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function CompressImageComponent_div_18_Template_input_ngModelChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.resizeHeight, $event) || (ctx_r1.resizeHeight = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.resizeWidth);\n    i0.ɵɵadvance();\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.resizeHeight);\n  }\n}\nfunction CompressImageComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵelement(1, \"img\", 20);\n    i0.ɵɵelementStart(2, \"p\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"src\", ctx_r1.previewUrl, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\\uD83D\\uDCF7 \", ctx_r1.selectedFile.name, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\\uD83D\\uDDC2\\uFE0F Original Size: \", (ctx_r1.originalSize / 1024).toFixed(1), \" KB\");\n  }\n}\nfunction CompressImageComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"div\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\\u23F3 Processing: \", ctx_r1.progress, \"%\");\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"width\", ctx_r1.progress, \"%\");\n  }\n}\nfunction CompressImageComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"a\", 24);\n    i0.ɵɵtext(4, \"\\u2B07 Download\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\\u2705 Final Size: \", (ctx_r1.compressedSize / 1024).toFixed(1), \" KB\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"href\", ctx_r1.compressedUrl, i0.ɵɵsanitizeUrl)(\"download\", (ctx_r1.mode || \"output\") + \"-\" + (ctx_r1.selectedFile == null ? null : ctx_r1.selectedFile.name));\n  }\n}\nexport let CompressImageComponent = /*#__PURE__*/(() => {\n  class CompressImageComponent {\n    http;\n    sanitizer;\n    fileInput;\n    // UI state properties\n    mode = 'compress'; // Controls which tool card is visible\n    // File selection and preview properties\n    selectedFile = null;\n    previewUrl = null; // Changed to SafeUrl for security\n    originalSize = 0;\n    // Resize specific properties\n    resizeWidth = null;\n    resizeHeight = null;\n    // Processing and result properties\n    progress = 0;\n    isProcessing = false; // New: To indicate if an operation is in progress\n    processedFileUrl = null; // New: URL of the processed image for display\n    processedFileSize = 0; // New: Size of the processed image\n    // Inject HttpClient for API calls and DomSanitizer for safe URL handling\n    constructor(http, sanitizer) {\n      this.http = http;\n      this.sanitizer = sanitizer;\n    }\n    /**\n     * Sets the current mode (compress or resize) and resets the tool state.\n     * @param newMode The mode to switch to.\n     */\n    setMode(newMode) {\n      this.mode = newMode;\n      this.resetTool(); // Reset the tool whenever the mode changes\n    }\n    /**\n     * Triggers the hidden file input element click.\n     */\n    triggerFileInput() {\n      this.fileInput.nativeElement.click();\n    }\n    /**\n     * Prevents default browser behaviors for drag events.\n     * @param event The DOM event.\n     */\n    preventDefaults(event) {\n      event.preventDefault();\n      event.stopPropagation(); // Stop propagation to prevent parent handlers from firing\n    }\n    /**\n     * Handles file selection from the input element.\n     * @param event The change event from the file input.\n     */\n    onFileSelected(event) {\n      const input = event.target;\n      const file = input.files?.[0];\n      if (file) {\n        this.handleFile(file);\n      }\n    }\n    /**\n     * Handles files dropped onto the drag-and-drop area.\n     * @param event The drag event.\n     */\n    onFilesDropped(event) {\n      this.preventDefaults(event); // Ensure defaults are prevented for drop\n      const file = event.dataTransfer?.files?.[0];\n      if (file) {\n        this.handleFile(file);\n      }\n    }\n    /**\n     * Centralized logic for setting the selected file and preparing for upload.\n     * Resets relevant states.\n     * @param file The File object to set.\n     */\n    handleFile(file) {\n      this.selectedFile = file;\n      this.originalSize = file.size;\n      this.previewUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(file)); // Sanitize URL\n      this.resetProcessingState(); // Reset processing/result states\n    }\n    /**\n     * Clears the currently selected file and its preview.\n     */\n    clearFile() {\n      this.selectedFile = null;\n      if (this.previewUrl) {\n        // Revoke the object URL to free up memory\n        URL.revokeObjectURL(this.sanitizer.bypassSecurityTrustUrl(this.previewUrl));\n      }\n      this.previewUrl = null;\n      this.originalSize = 0;\n      // Clear the file input value to allow re-uploading the same file\n      if (this.fileInput && this.fileInput.nativeElement) {\n        this.fileInput.nativeElement.value = '';\n      }\n    }\n    /**\n     * Resets all processing and result related states.\n     */\n    resetProcessingState() {\n      this.progress = 0;\n      this.isProcessing = false;\n      if (this.processedFileUrl) {\n        // Revoke the object URL for the processed file\n        URL.revokeObjectURL(this.sanitizer.bypassSecurityTrustUrl(this.processedFileUrl));\n      }\n      this.processedFileUrl = null;\n      this.processedFileSize = 0;\n    }\n    /**\n     * Resets the entire tool to its initial state, including selected file and inputs.\n     */\n    resetTool() {\n      this.clearFile();\n      this.resetProcessingState();\n      this.resizeWidth = null;\n      this.resizeHeight = null;\n    }\n    /**\n     * Initiates the upload and processing of the selected image.\n     */\n    upload() {\n      if (!this.selectedFile) {\n        console.warn('No file selected for upload.');\n        return;\n      }\n      // Client-side validation for resize mode\n      if (this.mode === 'resize') {\n        if (!this.resizeWidth || !this.resizeHeight || this.resizeWidth <= 0 || this.resizeHeight <= 0) {\n          // Instead of alert, you might show an error message in the UI\n          console.error('Please enter valid positive width and height for resizing.');\n          // Optionally, you could set a UI flag to display a message to the user\n          return;\n        }\n      }\n      this.isProcessing = true; // Set processing state to true\n      this.progress = 0; // Reset progress for new upload\n      this.resetProcessingState(); // Clear any previous results\n      const formData = new FormData();\n      formData.append('file', this.selectedFile); // Ensure 'file' matches backend's expected field name\n      let endpoint = '';\n      if (this.mode === 'resize') {\n        endpoint = 'http://127.0.0.1:8000/resize-image'; // Your FastAPI resize endpoint\n        formData.append('width', this.resizeWidth.toString());\n        formData.append('height', this.resizeHeight.toString());\n      } else {\n        // mode === 'compress'\n        endpoint = 'http://127.0.0.1:8000/compress-image'; // Your FastAPI compress endpoint (assuming you have one)\n        // If no compress endpoint, remove this or implement it in FastAPI\n      }\n      this.http.post(endpoint, formData, {\n        reportProgress: true,\n        observe: 'events',\n        responseType: 'blob' // Expecting a blob (image data) back from FastAPI\n      }).subscribe(event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.progress = Math.round(event.loaded / event.total * 100);\n        } else if (event.type === HttpEventType.Response) {\n          this.isProcessing = false; // Processing complete\n          this.progress = 100; // Ensure progress is 100% on completion\n          const blob = event.body; // Get the response blob\n          this.processedFileSize = blob.size;\n          this.processedFileUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(blob)); // Sanitize URL for display\n          // IMPORTANT: Removed automatic download and reset here.\n          // The new UI displays the result, and the user clicks 'Download' or 'Process Another'.\n        }\n      }, error => {\n        this.isProcessing = false; // Stop processing on error\n        this.progress = 0; // Reset progress\n        console.error('Image processing failed:', error);\n        // You should implement a user-friendly error message display here,\n        // instead of an alert. E.g., a div with *ngIf=\"showError\"\n        // this.errorMessage = 'Failed to process image. Please try again.';\n        this.resetTool(); // Reset the tool on error\n      });\n    }\n    /**\n     * Generates a suitable download file name based on the mode.\n     * @returns The download file name.\n     */\n    getDownloadFileName() {\n      if (!this.selectedFile) return 'processed_image'; // Fallback\n      const nameParts = this.selectedFile.name.split('.');\n      const extension = nameParts.pop(); // Get the last part as extension\n      const baseName = nameParts.join('.'); // Join remaining parts as base name\n      return `${baseName}-${this.mode}.${extension || 'png'}`; // Default to png if no extension\n    }\n    static ɵfac = function CompressImageComponent_Factory(t) {\n      return new (t || CompressImageComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.DomSanitizer));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CompressImageComponent,\n      selectors: [[\"app-compress-image\"]],\n      viewQuery: function CompressImageComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);\n        }\n      },\n      decls: 24,\n      vars: 12,\n      consts: [[\"fileInput\", \"\"], [1, \"tool-wrapper\"], [1, \"main-header\", \"animate__animated\", \"animate__fadeInDown\"], [1, \"tagline\"], [1, \"mode-switcher-bar\", \"animate__animated\", \"animate__fadeIn\", \"animate__delay-1s\"], [1, \"mode-btn\", 3, \"click\"], [1, \"tool-card\", \"animate__animated\", \"animate__fadeInUp\", 3, \"dragover\", \"drop\"], [1, \"upload-box\", 3, \"click\"], [\"type\", \"file\", \"accept\", \"image/*\", \"hidden\", \"\", 3, \"change\"], [1, \"upload-text\"], [4, \"ngIf\"], [\"class\", \"resize-inputs\", 4, \"ngIf\"], [1, \"convert-btn\", 3, \"click\", \"disabled\"], [\"class\", \"preview-card\", 4, \"ngIf\"], [\"class\", \"progress-section\", 4, \"ngIf\"], [\"class\", \"result-section\", 4, \"ngIf\"], [1, \"resize-inputs\"], [\"type\", \"number\", \"placeholder\", \"Width (px)\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"number\", \"placeholder\", \"Height (px)\", 3, \"ngModelChange\", \"ngModel\"], [1, \"preview-card\"], [\"alt\", \"Preview\", 3, \"src\"], [1, \"progress-section\"], [1, \"progress-bar\"], [1, \"result-section\"], [1, \"download-link\", 3, \"href\", \"download\"]],\n      template: function CompressImageComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"h1\");\n          i0.ɵɵtext(3, \"\\uD83D\\uDDBC\\uFE0F Image Optimizer\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"p\", 3);\n          i0.ɵɵtext(5, \"Compress or Resize your image effortlessly\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(6, \"div\", 4)(7, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function CompressImageComponent_Template_button_click_7_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.mode = \"compress\");\n          });\n          i0.ɵɵtext(8, \"\\u26A1 Compress\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function CompressImageComponent_Template_button_click_9_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.mode = \"resize\");\n          });\n          i0.ɵɵtext(10, \"\\uD83D\\uDCD0 Resize\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(11, \"div\", 6);\n          i0.ɵɵlistener(\"dragover\", function CompressImageComponent_Template_div_dragover_11_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.preventDefaults($event));\n          })(\"drop\", function CompressImageComponent_Template_div_drop_11_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onFilesDropped($event));\n          });\n          i0.ɵɵelementStart(12, \"div\", 7);\n          i0.ɵɵlistener(\"click\", function CompressImageComponent_Template_div_click_12_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.triggerFileInput());\n          });\n          i0.ɵɵelementStart(13, \"input\", 8, 0);\n          i0.ɵɵlistener(\"change\", function CompressImageComponent_Template_input_change_13_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onFileSelected($event));\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"div\", 9);\n          i0.ɵɵtemplate(16, CompressImageComponent_span_16_Template, 2, 0, \"span\", 10)(17, CompressImageComponent_span_17_Template, 2, 1, \"span\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(18, CompressImageComponent_div_18_Template, 3, 2, \"div\", 11);\n          i0.ɵɵelementStart(19, \"button\", 12);\n          i0.ɵɵlistener(\"click\", function CompressImageComponent_Template_button_click_19_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.upload());\n          });\n          i0.ɵɵtext(20);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(21, CompressImageComponent_div_21_Template, 6, 3, \"div\", 13)(22, CompressImageComponent_div_22_Template, 4, 3, \"div\", 14)(23, CompressImageComponent_div_23_Template, 5, 3, \"div\", 15);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵclassProp(\"active\", ctx.mode === \"compress\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵclassProp(\"active\", ctx.mode === \"resize\");\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", !ctx.selectedFile);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedFile);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.mode === \"resize\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"disabled\", !ctx.selectedFile || ctx.mode === \"resize\" && (!ctx.resizeWidth || !ctx.resizeHeight));\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.mode === \"resize\" ? \"\\uD83D\\uDCCF Resize Image\" : \"\\u26A1 Compress Image\", \" \");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedFile);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.progress > 0);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.compressedSize > 0);\n        }\n      },\n      dependencies: [i3.NgIf, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.NgControlStatus, i4.NgModel],\n      styles: [\".tool-wrapper[_ngcontent-%COMP%]{max-width:700px;margin:50px auto;padding:20px;font-family:Roboto,sans-serif}.main-header[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{font-size:2.5rem;color:var(--accent-purple);margin-bottom:5px;font-weight:700;text-align:center}.main-header[_ngcontent-%COMP%]   .tagline[_ngcontent-%COMP%]{color:var(--text-light);text-align:center;font-size:1.1rem;margin-bottom:30px}.mode-switcher-bar[_ngcontent-%COMP%]{display:flex;justify-content:center;gap:10px;margin-bottom:30px}.mode-btn[_ngcontent-%COMP%]{background:transparent;border:2px solid var(--primary-blue);color:var(--primary-blue);padding:10px 25px;border-radius:8px;font-size:1rem;font-weight:500;cursor:pointer;transition:.3s ease}.mode-btn.active[_ngcontent-%COMP%]{background:linear-gradient(to right,var(--primary-blue),var(--accent-purple));color:#fff;box-shadow:0 5px 15px var(--shadow-light)}.tool-card[_ngcontent-%COMP%]{background:#fff;border-radius:15px;padding:30px;box-shadow:0 10px 25px var(--shadow-light);border:1px solid var(--border-light)}.upload-box[_ngcontent-%COMP%]{border:2px dashed var(--primary-blue);padding:30px;border-radius:12px;text-align:center;cursor:pointer;background:#f8f9fc;margin-bottom:20px}.upload-text[_ngcontent-%COMP%]{font-weight:500;font-size:1.1rem;color:var(--text-dark)}.resize-inputs[_ngcontent-%COMP%]{display:flex;justify-content:center;gap:15px;margin-bottom:20px}.resize-inputs[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{padding:10px;font-size:1rem;width:100px;text-align:center;border:1px solid var(--border-light);border-radius:6px}.convert-btn[_ngcontent-%COMP%]{background-color:var(--primary-blue);color:#fff;padding:12px 25px;border:none;font-size:1rem;border-radius:8px;cursor:pointer;font-weight:600;margin-bottom:20px;transition:.3s ease}.convert-btn[_ngcontent-%COMP%]:disabled{background:#999;cursor:not-allowed}.preview-card[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{max-width:100%;max-height:250px;border-radius:10px;margin-bottom:10px}.preview-card[_ngcontent-%COMP%]{background:#fefefe;padding:15px;border-radius:10px;text-align:center;border:1px solid #ddd;margin-top:15px}.progress-bar[_ngcontent-%COMP%]{height:8px;background-color:var(--success-color);width:0;border-radius:5px;transition:width .3s}.result-section[_ngcontent-%COMP%]{margin-top:20px;text-align:center;color:var(--text-dark)}.download-link[_ngcontent-%COMP%]{display:inline-block;margin-top:10px;font-weight:500;color:var(--primary-blue);text-decoration:underline}\"]\n    });\n  }\n  return CompressImageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}