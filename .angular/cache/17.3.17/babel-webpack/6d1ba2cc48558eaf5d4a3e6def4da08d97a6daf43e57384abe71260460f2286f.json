{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst _c0 = [\"fileInput\"];\nexport let PdfToolsComponent = /*#__PURE__*/(() => {\n  class PdfToolsComponent {\n    http;\n    mode = 'jpg-to-pdf';\n    selectedFile = null;\n    progress = 0;\n    downloadUrl = '';\n    downloadTriggered = false;\n    fileInput;\n    constructor(http) {\n      this.http = http;\n    }\n    onFileSelected(event) {\n      const input = event.target;\n      this.selectedFile = input.files?.[0] || null;\n      this.downloadTriggered = false;\n    }\n    upload() {\n      if (!this.selectedFile) return;\n      const formData = new FormData();\n      formData.append('file', this.selectedFile);\n      let apiUrl = '';\n      let mimeType = '';\n      let fileName = '';\n      if (this.mode === 'jpg-to-pdf') {\n        apiUrl = 'http://127.0.0.1:8000/api/jpg-to-pdf';\n        mimeType = 'application/pdf';\n        fileName = 'converted.pdf';\n      } else if (this.mode === 'pdf-to-word') {\n        apiUrl = 'http://127.0.0.1:8000/api/pdf-to-word';\n        mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n        fileName = 'converted.docx';\n      }\n      this.http.post(apiUrl, formData, {\n        responseType: 'blob',\n        reportProgress: true,\n        observe: 'events'\n      }).subscribe(event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.progress = Math.round(event.loaded / event.total * 100);\n        }\n        if (event.type === HttpEventType.Response) {\n          const blob = new Blob([event.body], {\n            type: mimeType\n          });\n          const url = URL.createObjectURL(blob);\n          this.downloadUrl = url;\n          this.downloadTriggered = true;\n          setTimeout(() => {\n            const anchor = document.createElement('a');\n            anchor.href = url;\n            anchor.download = fileName;\n            anchor.click();\n            URL.revokeObjectURL(url);\n            this.reset();\n          }, 100);\n        }\n      });\n    }\n    reset() {\n      this.selectedFile = null;\n      this.progress = 0;\n      this.downloadUrl = '';\n      this.downloadTriggered = false;\n      if (this.fileInput) {\n        this.fileInput.nativeElement.value = '';\n      }\n    }\n    static ɵfac = function PdfToolsComponent_Factory(t) {\n      return new (t || PdfToolsComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PdfToolsComponent,\n      selectors: [[\"app-pdf-tools\"]],\n      viewQuery: function PdfToolsComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);\n        }\n      },\n      decls: 2,\n      vars: 0,\n      template: function PdfToolsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"pdf-tools works!\");\n          i0.ɵɵelementEnd();\n        }\n      }\n    });\n  }\n  return PdfToolsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}