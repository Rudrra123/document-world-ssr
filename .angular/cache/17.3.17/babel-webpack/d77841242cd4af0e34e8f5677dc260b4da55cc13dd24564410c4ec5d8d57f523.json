{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"fileInputSingle\"];\nconst _c1 = [\"fileInputMultiple\"];\nfunction PdfToolsComponent_ng_container_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"i\", 23);\n    i0.ɵɵelementStart(2, \"span\", 24);\n    i0.ɵɵtext(3, \"Click to browse or Drag & Drop your image here\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 25);\n    i0.ɵɵtext(5, \"JPG, PNG, GIF, BMP\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction PdfToolsComponent_ng_container_39_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"i\", 26);\n    i0.ɵɵelementStart(2, \"span\", 27);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\", 28);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_ng_container_39_Template_button_click_6_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r3 = i0.ɵɵnextContext();\n      $event.stopPropagation();\n      return i0.ɵɵresetView(ctx_r3.resetSingleFile());\n    });\n    i0.ɵɵtext(7, \"Clear File\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r3.selectedFileSingle.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"(\", (ctx_r3.selectedFileSingle.size / 1024).toFixed(1), \" KB)\");\n  }\n}\nfunction PdfToolsComponent_ng_container_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"i\", 30);\n    i0.ɵɵtext(2, \" Convert to PDF \");\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction PdfToolsComponent_ng_container_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"i\", 31);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Converting... \", ctx_r3.progress, \"% \");\n  }\n}\nfunction PdfToolsComponent_div_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32);\n    i0.ɵɵelement(1, \"div\", 33);\n    i0.ɵɵelementStart(2, \"span\", 34);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"width\", ctx_r3.progress, \"%\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r3.progress, \"%\");\n  }\n}\nfunction PdfToolsComponent_div_44_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 35)(1, \"p\");\n    i0.ɵɵtext(2, \"\\u2705 Conversion successful! Your PDF is ready.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"a\", 36);\n    i0.ɵɵelement(4, \"i\", 37);\n    i0.ɵɵtext(5, \" Download PDF \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 38);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_div_44_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.reset());\n    });\n    i0.ɵɵtext(7, \"Start New\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"href\", ctx_r3.downloadUrl, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction PdfToolsComponent_div_45_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 39)(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 38);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_div_45_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.reset());\n    });\n    i0.ɵɵtext(4, \"Try Again\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\\u274C Error: \", ctx_r3.errorMessage, \"\");\n  }\n}\nexport let PdfToolsComponent = /*#__PURE__*/(() => {\n  class PdfToolsComponent {\n    http;\n    route;\n    // Common properties for both functionalities\n    mode = 'jpg-to-pdf'; // Default mode\n    progress = 0;\n    downloadUrl = '';\n    errorMessage = '';\n    uploadSubscription = null;\n    // Properties for Single File Conversions (JPG/PNG to PDF, PDF to Word, Word to PDF)\n    selectedFileSingle = null;\n    isDragging = false; // For single file drag-over effect\n    fileInputSingle;\n    // Properties for Merge Images to PDF\n    selectedFilesMultiple = [];\n    previewUrlMultiple = ''; // Preview for the first image\n    // Usage Control for Merge Images to PDF (as provided in your code)\n    isPremiumUserMerge = false; // Can be true if user logs in as premium\n    freeUsesLimitMerge = 999999; // Set to a very high number for effectively unlimited daily merges\n    freeUsesRemainingMerge = this.freeUsesLimitMerge;\n    freeFileLimitMerge = 20; // Max files for free users per merge\n    fileInputMultiple;\n    constructor(http, route) {\n      this.http = http;\n      this.route = route;\n    }\n    ngOnInit() {\n      // Initialize usage limits for merge images tool\n      // We can still call checkUserStatus if you intend to use `isPremiumUserMerge` for other features\n      this.checkUserStatusMerge();\n      // No need to load daily usage from localStorage if there's effectively no daily limit\n      this.freeUsesRemainingMerge = this.freeUsesLimitMerge; // Ensure it's always set to the high limit on init\n    }\n    ngOnDestroy() {\n      if (this.uploadSubscription) {\n        this.uploadSubscription.unsubscribe();\n        this.uploadSubscription = null;\n      }\n    }\n    // --- Helper for file input accept attribute ---\n    getFileAcceptTypes(mode) {\n      switch (mode) {\n        case 'jpg-to-pdf':\n          return 'image/*';\n        // Accepts all image types\n        case 'pdf-to-word':\n          return '.pdf';\n        case 'word-to-pdf':\n          return '.docx';\n        // Accepts only .docx files\n        case 'merge-images-to-pdf':\n          return 'image/*';\n        // Accepts all image types for merge\n        default:\n          return '*/*';\n        // Fallback\n      }\n    }\n    // --- Common Reset Logic ---\n    reset() {\n      if (this.uploadSubscription) {\n        this.uploadSubscription.unsubscribe();\n        this.uploadSubscription = null;\n      }\n      // Reset single file properties\n      this.selectedFileSingle = null;\n      this.isDragging = false;\n      if (this.fileInputSingle) {\n        this.fileInputSingle.nativeElement.value = ''; // Clear single file input\n      }\n      // Reset multiple files properties\n      this.selectedFilesMultiple = [];\n      this.previewUrlMultiple = '';\n      if (this.fileInputMultiple) {\n        this.fileInputMultiple.nativeElement.value = ''; // Clear multiple file input\n      }\n      // Reset common properties\n      this.progress = 0;\n      this.downloadUrl = '';\n      this.errorMessage = '';\n      this.freeUsesRemainingMerge = this.freeUsesLimitMerge; // Reset merge usage to high limit\n    }\n    // --- Single File Conversion Methods ---\n    onFileSelectedSingle(event) {\n      const input = event.target;\n      this.selectedFileSingle = input.files?.[0] || null;\n      this.resetCommonStatesForNewUpload(); // Reset states common to all uploads\n      this.selectedFilesMultiple = []; // Ensure multiple is cleared\n      this.previewUrlMultiple = ''; // Ensure multiple preview is cleared\n    }\n    onDragOverSingle(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.isDragging = true;\n    }\n    onDragLeaveSingle(event) {\n      event.stopPropagation();\n      this.isDragging = false;\n    }\n    onDropSingle(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.isDragging = false;\n      const files = event.dataTransfer?.files;\n      if (files && files.length > 0) {\n        const file = files[0];\n        const acceptedTypes = this.getFileAcceptTypes(this.mode);\n        const isFileTypeAccepted = this.checkFileType(file, acceptedTypes);\n        if (isFileTypeAccepted) {\n          this.selectedFileSingle = file;\n          this.resetCommonStatesForNewUpload();\n          this.selectedFilesMultiple = []; // Ensure multiple is cleared\n          this.previewUrlMultiple = ''; // Ensure multiple preview is cleared\n        } else {\n          this.errorMessage = `Unsupported file type for ${this.mode} mode. Please select a valid file.`;\n          this.reset();\n        }\n      }\n    }\n    uploadSingleFile() {\n      if (!this.selectedFileSingle) {\n        this.errorMessage = 'Please select a file to convert.';\n        return;\n      }\n      this.resetCommonStatesForNewUpload(); // Reset before starting new upload\n      this.progress = 1; // Start progress bar immediately\n      const formData = new FormData();\n      formData.append('file', this.selectedFileSingle);\n      let apiUrl = '';\n      let mimeType = '';\n      let fileName = '';\n      switch (this.mode) {\n        case 'jpg-to-pdf':\n          apiUrl = `${environment.apiUrl}/jpg-to-pdf`;\n          mimeType = 'application/pdf';\n          fileName = 'converted.pdf';\n          break;\n        case 'pdf-to-word':\n          apiUrl = `${environment.apiUrl}/pdf-to-word`;\n          mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n          fileName = 'converted.docx';\n          break;\n        case 'word-to-pdf':\n          apiUrl = `${environment.apiUrl}/word-to-pdf`;\n          mimeType = 'application/pdf';\n          fileName = 'converted.pdf';\n          break;\n        default:\n          this.errorMessage = 'Invalid conversion mode selected.';\n          this.reset();\n          return;\n      }\n      this.uploadSubscription = this.http.post(apiUrl, formData, {\n        responseType: 'blob',\n        reportProgress: true,\n        observe: 'events'\n      }).subscribe({\n        next: event => {\n          if (event.type === HttpEventType.UploadProgress && event.total) {\n            this.progress = Math.round(event.loaded / event.total * 100);\n          }\n          if (event.type === HttpEventType.Response) {\n            this.progress = 100; // Ensure 100% on completion\n            const blob = new Blob([event.body], {\n              type: mimeType\n            });\n            const url = URL.createObjectURL(blob);\n            this.downloadUrl = url; // Set download URL for success message\n            // No need to set downloadTriggered for auto-download, but it can be used for UI visibility\n            setTimeout(() => {\n              const anchor = document.createElement('a');\n              anchor.href = url;\n              anchor.download = fileName;\n              document.body.appendChild(anchor);\n              anchor.click();\n              document.body.removeChild(anchor);\n              URL.revokeObjectURL(url);\n              this.reset(); // Auto-clear after download\n            }, 500);\n          }\n        },\n        error: error => {\n          this.handleUploadError(error);\n          this.reset();\n        },\n        complete: () => {\n          this.unsubscribeUpload();\n        }\n      });\n    }\n    // --- Merge Images to PDF Methods ---\n    onFilesSelectedMultiple(event) {\n      const input = event.target;\n      if (input.files) {\n        this.selectedFilesMultiple = Array.from(input.files).filter(file => file.type.startsWith('image/'));\n        this.resetCommonStatesForNewUpload(); // Reset common states\n        this.selectedFileSingle = null; // Ensure single file is cleared\n        if (this.selectedFilesMultiple.length > 0) {\n          const firstFile = this.selectedFilesMultiple[0];\n          const reader = new FileReader();\n          reader.onload = e => {\n            this.previewUrlMultiple = e.target.result;\n          };\n          reader.readAsDataURL(firstFile);\n        } else {\n          this.previewUrlMultiple = '';\n        }\n        // Check file count limit for free users\n        if (!this.isPremiumUserMerge && this.selectedFilesMultiple.length > this.freeFileLimitMerge) {\n          this.errorMessage = `Free users can merge up to ${this.freeFileLimitMerge} images at once.`;\n        } else {\n          this.errorMessage = '';\n        }\n      }\n    }\n    onFilesDroppedMultiple(event) {\n      this.preventDefaults(event);\n      const files = event.dataTransfer?.files;\n      if (files && files.length > 0) {\n        this.selectedFilesMultiple = Array.from(files).filter(file => file.type.startsWith('image/'));\n        this.resetCommonStatesForNewUpload();\n        this.selectedFileSingle = null; // Ensure single file is cleared\n        if (this.selectedFilesMultiple.length > 0) {\n          const firstFile = this.selectedFilesMultiple[0];\n          const reader = new FileReader();\n          reader.onload = e => {\n            this.previewUrlMultiple = e.target.result;\n          };\n          reader.readAsDataURL(firstFile);\n        } else {\n          this.previewUrlMultiple = '';\n        }\n        // Check file count limit for free users\n        if (!this.isPremiumUserMerge && this.selectedFilesMultiple.length > this.freeFileLimitMerge) {\n          this.errorMessage = `Free users can merge up to ${this.freeFileLimitMerge} images at once.`;\n        } else {\n          this.errorMessage = '';\n        }\n      }\n    }\n    preventDefaults(event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    checkUserStatusMerge() {\n      // This is where you'd typically check user's premium status from an auth service\n      // For now, it's hardcoded to false as per your original request to essentially remove daily limits for free users.\n      this.isPremiumUserMerge = false;\n    }\n    incrementDailyUsageMerge() {\n      // This method will still decrement `freeUsesRemainingMerge` but from a very large number,\n      // so it will effectively never hit zero for free users.\n      if (!this.isPremiumUserMerge) {\n        this.freeUsesRemainingMerge--;\n      }\n    }\n    uploadMultipleFiles() {\n      if (!this.selectedFilesMultiple.length) {\n        this.errorMessage = 'Please select images to merge.';\n        return;\n      }\n      if (!this.isPremiumUserMerge && this.freeUsesRemainingMerge <= 0) {\n        this.errorMessage = 'Daily free merge limit reached! Please upgrade to Premium for unlimited use.';\n        return;\n      }\n      if (!this.isPremiumUserMerge && this.selectedFilesMultiple.length > this.freeFileLimitMerge) {\n        this.errorMessage = `Free users can merge up to ${this.freeFileLimitMerge} images at once.`;\n        return;\n      }\n      this.resetCommonStatesForNewUpload(); // Reset before starting new upload\n      this.progress = 1; // Start progress bar immediately\n      const formData = new FormData();\n      this.selectedFilesMultiple.forEach(file => formData.append('files', file)); // Note: 'files' is the backend expected field name\n      this.uploadSubscription = this.http.post(`${environment.apiUrl}/merge-images-to-pdf`, formData, {\n        responseType: 'blob',\n        reportProgress: true,\n        observe: 'events'\n      }).subscribe({\n        next: event => {\n          if (event.type === HttpEventType.UploadProgress && event.total) {\n            this.progress = Math.round(event.loaded / event.total * 100);\n          }\n          if (event.type === HttpEventType.Response) {\n            this.progress = 100; // Ensure 100% on completion\n            if (event.body) {\n              const blob = new Blob([event.body], {\n                type: 'application/pdf'\n              });\n              const url = URL.createObjectURL(blob);\n              this.downloadUrl = url; // Set download URL for success message\n              // Programmatically trigger download (optional, but good for multi-file tools)\n              const link = document.createElement('a');\n              link.href = url;\n              link.download = 'merged_images.pdf'; // Specific name for merged PDF\n              document.body.appendChild(link);\n              link.click();\n              document.body.removeChild(link);\n              URL.revokeObjectURL(url);\n              this.incrementDailyUsageMerge(); // Increment usage upon successful merge\n              // DO NOT reset immediately here. Let the user see the download link and click \"Merge Another\".\n              // The download URL is set, which shows the download section.\n            } else {\n              this.errorMessage = 'PDF creation failed: Empty response from server.';\n              this.progress = 0;\n            }\n          }\n        },\n        error: error => {\n          this.handleUploadError(error);\n        },\n        complete: () => {\n          this.unsubscribeUpload();\n        }\n      });\n    }\n    // --- Utility methods ---\n    resetCommonStatesForNewUpload() {\n      this.progress = 0;\n      this.downloadUrl = '';\n      this.errorMessage = '';\n      // Ensure both file inputs are cleared visually if new files are selected in either mode\n      if (this.fileInputSingle && this.fileInputSingle.nativeElement.value) {\n        this.fileInputSingle.nativeElement.value = '';\n      }\n      if (this.fileInputMultiple && this.fileInputMultiple.nativeElement.value) {\n        this.fileInputMultiple.nativeElement.value = '';\n      }\n    }\n    handleUploadError(error) {\n      console.error('Upload error:', error);\n      this.progress = 0;\n      if (error.error instanceof ErrorEvent) {\n        this.errorMessage = `An error occurred: ${error.error.message}`;\n      } else {\n        if (error.error instanceof Blob && error.error.type === 'application/json') {\n          const reader = new FileReader();\n          reader.onload = () => {\n            try {\n              const errorBody = JSON.parse(reader.result);\n              this.errorMessage = errorBody.detail || `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n            } catch (e) {\n              this.errorMessage = `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n            }\n          };\n          reader.readAsText(error.error);\n        } else {\n          this.errorMessage = `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n        }\n        if (error.status === 0) {\n          this.errorMessage = 'Could not connect to the server. Please ensure the backend is running.';\n        }\n        if (error.status === 403) {\n          this.errorMessage = this.errorMessage || 'You have reached your daily limit or exceeded file count for the free plan.';\n        }\n      }\n    }\n    unsubscribeUpload() {\n      if (this.uploadSubscription) {\n        this.uploadSubscription.unsubscribe();\n        this.uploadSubscription = null;\n      }\n    }\n    // Helper for more robust file type checking (can be expanded)\n    checkFileType(file, acceptedTypes) {\n      if (acceptedTypes === '*/*') return true;\n      if (acceptedTypes.includes(file.type)) return true; // Direct MIME type match\n      // Check by extension for common types where MIME might be tricky\n      const fileNameLower = file.name.toLowerCase();\n      if (acceptedTypes === '.pdf' && fileNameLower.endsWith('.pdf')) return true;\n      if (acceptedTypes === '.docx' && fileNameLower.endsWith('.docx')) return true;\n      if (acceptedTypes === 'image/*' && (fileNameLower.endsWith('.jpg') || fileNameLower.endsWith('.jpeg') || fileNameLower.endsWith('.png') || fileNameLower.endsWith('.gif') || fileNameLower.endsWith('.bmp'))) return true;\n      return false;\n    }\n    static ɵfac = function PdfToolsComponent_Factory(t) {\n      return new (t || PdfToolsComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PdfToolsComponent,\n      selectors: [[\"app-pdf-tools\"]],\n      viewQuery: function PdfToolsComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInputSingle = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInputMultiple = _t.first);\n        }\n      },\n      decls: 46,\n      vars: 11,\n      consts: [[\"fileInputSingle\", \"\"], [1, \"main-container\"], [1, \"header-section\"], [1, \"tool-navigation\"], [\"data-tool\", \"jpg-to-pdf\", 1, \"nav-button\", \"active\"], [\"data-tool\", \"pdf-to-word\", 1, \"nav-button\"], [\"data-tool\", \"word-to-pdf\", 1, \"nav-button\"], [\"data-tool\", \"merge-images-to-pdf\", 1, \"nav-button\"], [1, \"tool-sections-wrapper\"], [\"id\", \"jpg-to-pdf-section\", 1, \"tool-section\", \"active\"], [\"id\", \"pdf-to-word-section\", 1, \"tool-section\"], [\"id\", \"word-to-pdf-section\", 1, \"tool-section\"], [\"id\", \"merge-images-to-pdf-section\", 1, \"tool-section\"], [1, \"tool-description\"], [1, \"upload-area-container\"], [1, \"upload-box\", 3, \"dragover\", \"dragleave\", \"drop\"], [\"type\", \"file\", \"hidden\", \"\", 3, \"change\", \"accept\"], [1, \"upload-content\", 3, \"click\"], [4, \"ngIf\"], [1, \"convert-action-btn\", 3, \"click\", \"disabled\"], [\"class\", \"progress-indicator\", 4, \"ngIf\"], [\"class\", \"result-message-box success\", 4, \"ngIf\"], [\"class\", \"result-message-box error\", 4, \"ngIf\"], [1, \"fas\", \"fa-cloud-upload-alt\", \"upload-icon\"], [1, \"upload-prompt-text\"], [1, \"supported-formats\"], [1, \"fas\", \"fa-check-circle\", \"success-icon-file\"], [1, \"file-name-display\"], [1, \"file-size-display\"], [\"type\", \"button\", 1, \"clear-file-btn\", 3, \"click\"], [1, \"fas\", \"fa-magic\"], [1, \"fas\", \"fa-spinner\", \"fa-spin\"], [1, \"progress-indicator\"], [1, \"progress-bar-fill\"], [1, \"progress-percentage\"], [1, \"result-message-box\", \"success\"], [\"download\", \"converted.pdf\", 1, \"download-btn\", 3, \"href\"], [1, \"fas\", \"fa-download\"], [\"type\", \"button\", 1, \"reset-conversion-btn\", 3, \"click\"], [1, \"result-message-box\", \"error\"]],\n      template: function PdfToolsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"h1\");\n          i0.ɵɵtext(3, \"\\uD83D\\uDCC4 PDF & Image Converter\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"p\");\n          i0.ɵɵtext(5, \"Your ultimate toolkit for seamless file transformations.\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(6, \"div\", 3)(7, \"button\", 4);\n          i0.ɵɵtext(8, \"\\uD83D\\uDDBC\\uFE0F JPG/PNG to PDF\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"button\", 5);\n          i0.ɵɵtext(10, \"\\uD83D\\uDCC4 PDF to Word\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"button\", 6);\n          i0.ɵɵtext(12, \"\\uD83D\\uDCDD Word to PDF\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"button\", 7);\n          i0.ɵɵtext(14, \"\\uD83C\\uDFB4 Merge Images to PDF\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"div\", 8)(16, \"section\", 9)(17, \"h2\");\n          i0.ɵɵtext(18, \"\\uD83D\\uDDBC\\uFE0F Convert JPG/PNG to PDF\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"section\", 10)(20, \"h2\");\n          i0.ɵɵtext(21, \"\\uD83D\\uDCC4 Convert PDF to Word\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(22, \"section\", 11)(23, \"h2\");\n          i0.ɵɵtext(24, \"\\uD83D\\uDCDD Convert Word to PDF\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(25, \"section\", 12)(26, \"h2\");\n          i0.ɵɵtext(27, \"\\uD83C\\uDFB4 Merge Images to PDF\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(28, \"section\", 9)(29, \"h2\");\n          i0.ɵɵtext(30, \"\\uD83D\\uDDBC\\uFE0F Convert JPG/PNG to PDF\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"p\", 13);\n          i0.ɵɵtext(32, \"Easily transform your image files into a single, high-quality PDF document.\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"div\", 14)(34, \"label\", 15);\n          i0.ɵɵlistener(\"dragover\", function PdfToolsComponent_Template_label_dragover_34_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onDragOverSingle($event));\n          })(\"dragleave\", function PdfToolsComponent_Template_label_dragleave_34_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onDragLeaveSingle($event));\n          })(\"drop\", function PdfToolsComponent_Template_label_drop_34_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onDropSingle($event));\n          });\n          i0.ɵɵelementStart(35, \"input\", 16, 0);\n          i0.ɵɵlistener(\"change\", function PdfToolsComponent_Template_input_change_35_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onFileSelectedSingle($event));\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(37, \"div\", 17);\n          i0.ɵɵlistener(\"click\", function PdfToolsComponent_Template_div_click_37_listener() {\n            i0.ɵɵrestoreView(_r1);\n            const fileInputSingle_r2 = i0.ɵɵreference(36);\n            return i0.ɵɵresetView(fileInputSingle_r2.click());\n          });\n          i0.ɵɵtemplate(38, PdfToolsComponent_ng_container_38_Template, 6, 0, \"ng-container\", 18)(39, PdfToolsComponent_ng_container_39_Template, 8, 2, \"ng-container\", 18);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(40, \"button\", 19);\n          i0.ɵɵlistener(\"click\", function PdfToolsComponent_Template_button_click_40_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.uploadSingleFile());\n          });\n          i0.ɵɵtemplate(41, PdfToolsComponent_ng_container_41_Template, 3, 0, \"ng-container\", 18)(42, PdfToolsComponent_ng_container_42_Template, 3, 1, \"ng-container\", 18);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(43, PdfToolsComponent_div_43_Template, 4, 3, \"div\", 20)(44, PdfToolsComponent_div_44_Template, 8, 1, \"div\", 21)(45, PdfToolsComponent_div_45_Template, 5, 1, \"div\", 22);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(34);\n          i0.ɵɵclassProp(\"drag-over\", ctx.isDragging);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"accept\", ctx.getFileAcceptTypes(\"jpg-to-pdf\"));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", !ctx.selectedFileSingle);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedFileSingle);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"disabled\", !ctx.selectedFileSingle || ctx.progress > 0);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.progress === 0);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.progress > 0);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.progress > 0 && ctx.progress < 100);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.downloadUrl);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n        }\n      },\n      dependencies: [i3.NgIf],\n      styles: [\"body[_ngcontent-%COMP%]{background:linear-gradient(135deg,#f0f2f5,#e0e6ed);display:flex;justify-content:center;align-items:flex-start;min-height:100vh;margin:0;font-family:Poppins,sans-serif;color:#333;padding:30px 0}.main-container[_ngcontent-%COMP%]{background:#fff;border-radius:25px;box-shadow:0 20px 60px #0000001a;width:90%;max-width:1100px;padding:50px;text-align:center;position:relative;overflow:hidden;border:1px solid #e0e0e0}.header-section[_ngcontent-%COMP%]{margin-bottom:40px}.header-section[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{font-size:2.8rem;color:#2c3e50;margin-bottom:10px;font-weight:700;letter-spacing:-.8px}.header-section[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1.2rem;color:#7f8c8d;font-weight:400}.tool-navigation[_ngcontent-%COMP%]{display:flex;justify-content:center;flex-wrap:wrap;gap:15px;margin-bottom:50px;border-bottom:2px solid #f0f0f0;padding-bottom:20px}.nav-button[_ngcontent-%COMP%]{background-color:#f7f7f7;color:#555;border:1px solid #e0e0e0;padding:12px 25px;border-radius:10px;font-size:1.05rem;font-weight:500;cursor:pointer;transition:all .3s ease;display:flex;align-items:center;gap:10px;box-shadow:0 4px 10px #0000000d}.nav-button[_ngcontent-%COMP%]:hover{background-color:#e9e9e9;border-color:#d0d0d0;transform:translateY(-3px);box-shadow:0 6px 15px #00000014}.nav-button.active[_ngcontent-%COMP%]{background-color:#007bff;color:#fff;border-color:#007bff;box-shadow:0 6px 15px #007bff4d;transform:translateY(-2px)}.tool-section[_ngcontent-%COMP%]{background-color:#fcfcfc;border:1px solid #e9e9e9;border-radius:20px;padding:40px;margin-bottom:30px;text-align:center;box-shadow:0 10px 30px #0000000d;display:none;animation:_ngcontent-%COMP%_fadeIn .6s ease-out forwards}.tool-section.active[_ngcontent-%COMP%]{display:block}.tool-section[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{font-size:2.2rem;color:#34495e;margin-bottom:15px;font-weight:600;display:flex;align-items:center;justify-content:center;gap:15px}.tool-description[_ngcontent-%COMP%]{font-size:1.1rem;color:#666;margin-bottom:35px;max-width:700px;margin-left:auto;margin-right:auto}.upload-area-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;gap:30px}.upload-box[_ngcontent-%COMP%]{background-color:#eef7ff;border:3px dashed #a8d5ff;padding:50px 30px;cursor:pointer;border-radius:20px;transition:all .4s ease-in-out;display:flex;flex-direction:column;align-items:center;justify-content:center;min-height:200px;position:relative;width:100%;max-width:600px;margin:0 auto}.upload-box[_ngcontent-%COMP%]:hover{background-color:#e0f2ff;transform:translateY(-5px);box-shadow:0 12px 30px #007bff1a;border-color:#79c0ff}.upload-box.drag-over[_ngcontent-%COMP%]{background-color:#d1e7fa;border-color:#007bff;box-shadow:0 0 40px #007bff66;animation:none}.upload-content[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;gap:15px;color:#555;width:100%}.upload-icon[_ngcontent-%COMP%]{font-size:4rem;color:#007bff;transition:transform .3s ease}.upload-box[_ngcontent-%COMP%]:hover   .upload-icon[_ngcontent-%COMP%]{transform:translateY(-8px) scale(1.1)}.upload-prompt-text[_ngcontent-%COMP%]{font-size:1.3rem;font-weight:500;color:#444}.supported-formats[_ngcontent-%COMP%]{font-size:.95rem;color:#888;margin-top:5px}.success-icon-file[_ngcontent-%COMP%]{color:#28a745;font-size:2.2rem;margin-bottom:10px}.file-name-display[_ngcontent-%COMP%]{font-size:1.15rem;font-weight:600;color:#333;max-width:90%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.file-size-display[_ngcontent-%COMP%]{font-size:.95rem;color:#777;margin-top:5px}.clear-file-btn[_ngcontent-%COMP%]{background-color:#dc3545;color:#fff;border:none;padding:8px 18px;border-radius:8px;cursor:pointer;font-size:.9rem;font-weight:500;margin-top:15px;transition:background-color .3s ease,transform .2s ease}.clear-file-btn[_ngcontent-%COMP%]:hover{background-color:#c82333;transform:scale(1.05)}.convert-action-btn[_ngcontent-%COMP%]{background:linear-gradient(45deg,#28a745,#218838);border:none;padding:18px 40px;border-radius:15px;color:#fff;font-size:1.25rem;font-weight:700;cursor:pointer;letter-spacing:.5px;box-shadow:0 10px 25px #28a7454d;transition:all .3s ease;display:flex;align-items:center;justify-content:center;gap:12px;width:100%;max-width:280px}.convert-action-btn[_ngcontent-%COMP%]:hover{background:linear-gradient(45deg,#218838,#1e7e34);transform:translateY(-4px);box-shadow:0 15px 35px #28a74573}.convert-action-btn[_ngcontent-%COMP%]:disabled{background:#ccc;color:#888;animation:none;cursor:not-allowed;box-shadow:none;transform:none}.progress-indicator[_ngcontent-%COMP%]{width:100%;max-width:400px;height:12px;background-color:#e9ecef;border-radius:6px;margin-top:20px;position:relative;overflow:hidden;box-shadow:inset 0 1px 3px #0000001a}.progress-bar-fill[_ngcontent-%COMP%]{height:100%;background:linear-gradient(45deg,#007bff,#0056d2);width:0%;border-radius:6px;transition:width .4s ease-out}.progress-percentage[_ngcontent-%COMP%]{font-size:.95rem;color:#555;margin-top:10px}.result-message-box[_ngcontent-%COMP%]{margin-top:40px;padding:25px;border-radius:15px;font-size:1.1rem;font-weight:600;display:flex;flex-direction:column;align-items:center;gap:15px;width:100%;max-width:500px;margin-left:auto;margin-right:auto}.result-message-box.success[_ngcontent-%COMP%]{background:#e6ffe6;border:1px solid #77dd77;color:#2e8b57;box-shadow:0 8px 20px #2e8b5733}.result-message-box.error[_ngcontent-%COMP%]{background:#f8d7da;border:1px solid #f5c6cb;color:#721c24;box-shadow:0 8px 20px #dc354533}.download-btn[_ngcontent-%COMP%]{background:linear-gradient(45deg,#007bff,#0056d2);color:#fff;padding:12px 25px;border-radius:10px;text-decoration:none;font-size:1.1rem;font-weight:600;display:inline-flex;align-items:center;gap:8px;box-shadow:0 5px 15px #007bff4d;transition:all .3s ease}.download-btn[_ngcontent-%COMP%]:hover{background:linear-gradient(45deg,#0056d2,#003f99);transform:translateY(-3px);box-shadow:0 8px 20px #007bff66}.reset-conversion-btn[_ngcontent-%COMP%]{background:#6c757d;color:#fff;border:none;padding:10px 20px;border-radius:8px;font-size:.95rem;cursor:pointer;transition:all .3s ease}.reset-conversion-btn[_ngcontent-%COMP%]:hover{background:#5a6268;transform:translateY(-2px)}.tool-section#merge-images-to-pdf-section[_ngcontent-%COMP%]   .upload-box[_ngcontent-%COMP%]{min-height:280px}@keyframes _ngcontent-%COMP%_fadeIn{0%{opacity:0;transform:translateY(20px)}to{opacity:1;transform:translateY(0)}}@media (max-width: 768px){.main-container[_ngcontent-%COMP%]{padding:30px;width:95%}.header-section[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{font-size:2.2rem}.header-section[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1rem}.tool-navigation[_ngcontent-%COMP%]{flex-direction:column;align-items:stretch}.nav-button[_ngcontent-%COMP%]{padding:10px 15px;font-size:.95rem}.tool-section[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{font-size:1.8rem;gap:10px}.tool-description[_ngcontent-%COMP%]{font-size:.95rem}.upload-box[_ngcontent-%COMP%]{padding:40px 20px;min-height:180px}.upload-icon[_ngcontent-%COMP%]{font-size:3rem}.upload-prompt-text[_ngcontent-%COMP%]{font-size:1.1rem}.convert-action-btn[_ngcontent-%COMP%]{padding:15px 30px;font-size:1.1rem}.result-message-box[_ngcontent-%COMP%]{padding:20px;font-size:1rem}.download-btn[_ngcontent-%COMP%], .reset-conversion-btn[_ngcontent-%COMP%]{padding:10px 20px;font-size:.95rem}}\"]\n    });\n  }\n  return PdfToolsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}