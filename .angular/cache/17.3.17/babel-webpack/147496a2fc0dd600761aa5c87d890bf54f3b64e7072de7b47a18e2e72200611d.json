{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nlet AllToolsComponent = class AllToolsComponent {\n  http;\n  // --- Properties for Single Image to PDF Converter ---\n  singleSelectedFile = null;\n  singleDownloadUrl = '';\n  singleProgress = 0;\n  singleErrorMessage = '';\n  singleUploadSubscription = null;\n  singleFileInput; // Removed as per original, but good practice if you want to clear specific input\n  // --- Properties for Merge Images to PDF Converter ---\n  multipleSelectedFiles = [];\n  multipleDownloadUrl = '';\n  multipleProgress = 0;\n  multipleErrorMessage = '';\n  multipleUploadSubscription = null;\n  mergeFileInput; // For clearing file input after reset\n  constructor(http) {\n    this.http = http;\n  }\n  // --- Methods for Single Image to PDF Converter ---\n  onSingleFileSelected(event) {\n    const target = event.target;\n    this.singleSelectedFile = target.files?.[0] || null;\n    // Reset states when a new file is selected\n    this.singleDownloadUrl = '';\n    this.singleProgress = 0;\n    this.singleErrorMessage = '';\n    if (this.singleUploadSubscription) {\n      this.singleUploadSubscription.unsubscribe();\n      this.singleUploadSubscription = null;\n    }\n  }\n  uploadSingleImage() {\n    if (!this.singleSelectedFile) {\n      this.singleErrorMessage = 'Please select an image to convert.';\n      return;\n    }\n    this.singleDownloadUrl = '';\n    this.singleProgress = 0;\n    this.singleErrorMessage = '';\n    const formData = new FormData();\n    formData.append('file', this.singleSelectedFile);\n    this.singleUploadSubscription = this.http.post('http://127.0.0.1:8000/api/jpg-to-pdf', formData, {\n      responseType: 'blob',\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe({\n      next: event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.singleProgress = Math.round(event.loaded / event.total * 100);\n        }\n        if (event.type === HttpEventType.Response) {\n          if (event.body) {\n            const blob = new Blob([event.body], {\n              type: 'application/pdf'\n            });\n            const url = URL.createObjectURL(blob);\n            this.singleDownloadUrl = url;\n            this.singleProgress = 0;\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = 'converted.pdf';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            URL.revokeObjectURL(url);\n            // Don't call resetSingleConverter here automatically\n          } else {\n            this.singleErrorMessage = 'PDF conversion failed: Empty response from server.';\n            this.singleProgress = 0;\n          }\n        }\n      },\n      error: error => {\n        console.error('Single image upload error:', error);\n        this.singleProgress = 0;\n        if (error.error instanceof ErrorEvent) {\n          this.singleErrorMessage = `An error occurred: ${error.error.message}`;\n        } else {\n          this.singleErrorMessage = `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n          if (error.status === 0) {\n            this.singleErrorMessage = 'Could not connect to the server. Please ensure the backend is running.';\n          }\n        }\n      },\n      complete: () => {\n        if (this.singleUploadSubscription) {\n          this.singleUploadSubscription.unsubscribe();\n          this.singleUploadSubscription = null;\n        }\n      }\n    });\n  }\n  resetSingleConverter() {\n    if (this.singleUploadSubscription) {\n      this.singleUploadSubscription.unsubscribe();\n      this.singleUploadSubscription = null;\n    }\n    this.singleSelectedFile = null;\n    this.singleDownloadUrl = '';\n    this.singleProgress = 0;\n    this.singleErrorMessage = '';\n    // If you had a specific #fileInput for the single converter, you'd clear it here:\n    // if (this.singleFileInput) {\n    //   this.singleFileInput.nativeElement.value = '';\n    // }\n  }\n  // --- Methods for Merge Images to PDF Converter ---\n  onMultipleFilesSelected(event) {\n    const input = event.target;\n    if (input.files) {\n      this.multipleSelectedFiles = Array.from(input.files);\n      // Reset relevant states when new files are selected\n      this.multipleDownloadUrl = '';\n      this.multipleProgress = 0;\n      this.multipleErrorMessage = '';\n      if (this.multipleUploadSubscription) {\n        this.multipleUploadSubscription.unsubscribe();\n        this.multipleUploadSubscription = null;\n      }\n    }\n  }\n  uploadMultipleImages() {\n    if (!this.multipleSelectedFiles.length) {\n      this.multipleErrorMessage = 'Please select images to merge.';\n      return;\n    }\n    this.multipleDownloadUrl = '';\n    this.multipleProgress = 0;\n    this.multipleErrorMessage = '';\n    const formData = new FormData();\n    this.multipleSelectedFiles.forEach(file => formData.append('files', file));\n    this.multipleUploadSubscription = this.http.post('http://127.0.0.1:8000/api/merge-images-to-pdf', formData, {\n      responseType: 'blob',\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe({\n      next: event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.multipleProgress = Math.round(event.loaded / event.total * 100);\n        }\n        if (event.type === HttpEventType.Response) {\n          if (event.body) {\n            const blob = new Blob([event.body], {\n              type: 'application/pdf'\n            });\n            const url = URL.createObjectURL(blob);\n            this.multipleDownloadUrl = url;\n            this.multipleProgress = 0;\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = 'merged.pdf';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            URL.revokeObjectURL(url);\n            // Don't call resetMultipleMerger here automatically\n          } else {\n            this.multipleErrorMessage = 'PDF creation failed: Empty response from server.';\n            this.multipleProgress = 0;\n          }\n        }\n      },\n      error: error => {\n        console.error('Multiple images upload error:', error);\n        this.multipleProgress = 0;\n        if (error.error instanceof ErrorEvent) {\n          this.multipleErrorMessage = `An error occurred: ${error.error.message}`;\n        } else {\n          this.multipleErrorMessage = `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n          if (error.status === 0) {\n            this.multipleErrorMessage = 'Could not connect to the server. Please ensure the backend is running.';\n          }\n        }\n      },\n      complete: () => {\n        if (this.multipleUploadSubscription) {\n          this.multipleUploadSubscription.unsubscribe();\n          this.multipleUploadSubscription = null;\n        }\n      }\n    });\n  }\n  resetMultipleMerger() {\n    if (this.multipleUploadSubscription) {\n      this.multipleUploadSubscription.unsubscribe();\n      this.multipleUploadSubscription = null;\n    }\n    this.multipleSelectedFiles = [];\n    this.multipleDownloadUrl = '';\n    this.multipleProgress = 0;\n    this.multipleErrorMessage = '';\n    if (this.mergeFileInput) {\n      // Using the ViewChild reference for the multiple file input\n      this.mergeFileInput.nativeElement.value = '';\n    }\n  }\n  // --- Lifecycle Hook for Cleanup ---\n  ngOnDestroy() {\n    if (this.singleUploadSubscription) {\n      this.singleUploadSubscription.unsubscribe();\n    }\n    if (this.multipleUploadSubscription) {\n      this.multipleUploadSubscription.unsubscribe();\n    }\n  }\n};\n__decorate([ViewChild('singleFileInput'), __metadata(\"design:type\", ElementRef)], AllToolsComponent.prototype, \"singleFileInput\", void 0);\n__decorate([ViewChild('mergeFileInput'), __metadata(\"design:type\", ElementRef)], AllToolsComponent.prototype, \"mergeFileInput\", void 0);\nAllToolsComponent = __decorate([Component({\n  selector: 'app-all-tools',\n  // Ensure this selector is used in your app.component.html or routing\n  templateUrl: './all-tools.component.html',\n  styleUrls: ['./all-tools.component.css']\n}), __metadata(\"design:paramtypes\", [HttpClient])], AllToolsComponent);\nexport { AllToolsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}