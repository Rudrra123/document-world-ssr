{"ast":null,"code":"// import { Component, ViewChild, ElementRef } from '@angular/core';\n// import { HttpClient, HttpEventType } from '@angular/common/http';\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n// @Component({\n//   selector: 'app-jpg-to-pdf',\n//   templateUrl: './jpg-to-pdf.component.html',\n//   styleUrls: ['./jpg-to-pdf.component.css']\n// })\n// export class JpgToPdfComponent {\n//   selectedFile: File | null = null;\n//   downloadUrl: string = '';\n//   progress = 0;\n//   @ViewChild('fileInput') fileInput!: ElementRef<HTMLInputElement>;\n//   constructor(private http: HttpClient) {}\n//   onFileSelected(event: Event): void {\n//     const target = event.target as HTMLInputElement;\n//     this.selectedFile = target.files?.[0] || null;\n//   }\n//   upload(): void {\n//     if (!this.selectedFile) return;\n//     const formData = new FormData();\n//     formData.append('file', this.selectedFile);\n//     this.http.post('http://127.0.0.1:8000/api/jpg-to-pdf', formData, {\n//       responseType: 'blob',\n//       reportProgress: true,\n//       observe: 'events'\n//     }).subscribe(event => {\n//       if (event.type === HttpEventType.UploadProgress && event.total) {\n//         this.progress = Math.round((event.loaded / event.total) * 100);\n//       }\n//       if (event.type === HttpEventType.Response) {\n//         const blob = new Blob([event.body!], { type: 'application/pdf' });\n//         const url = URL.createObjectURL(blob);\n//         this.downloadUrl = url;\n//         this.progress = 0;\n//         // Auto download\n//         const link = document.createElement('a');\n//         link.href = url;\n//         link.download = 'converted.pdf';\n//         link.click();\n//         // Clean up and reset state\n//         URL.revokeObjectURL(url);\n//         this.reset();\n//       }\n//     });\n//   }\n//   reset(): void {\n//     this.downloadUrl = '';\n//     this.selectedFile = null;\n//     if (this.fileInput) {\n//       this.fileInput.nativeElement.value = '';\n//     }\n//   }\n// }\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nlet CombinedImageToPdfComponent = class CombinedImageToPdfComponent {\n  http;\n  selectedFiles = [];\n  downloadUrl = '';\n  fileName = 'converted.pdf';\n  progress = 0;\n  fileInput;\n  constructor(http) {\n    this.http = http;\n  }\n  onFilesSelected(event) {\n    const input = event.target;\n    this.selectedFiles = input.files ? Array.from(input.files) : [];\n  }\n  uploadSingle() {\n    if (this.selectedFiles.length !== 1) return;\n    const formData = new FormData();\n    formData.append('file', this.selectedFiles[0]);\n    this.fileName = 'converted.pdf';\n    this.sendRequest('http://127.0.0.1:8000/api/jpg-to-pdf', formData);\n  }\n  uploadMerge() {\n    if (this.selectedFiles.length < 2) return;\n    const formData = new FormData();\n    this.selectedFiles.forEach(file => formData.append('files', file));\n    this.fileName = 'merged.pdf';\n    this.sendRequest('http://127.0.0.1:8000/api/merge-images-to-pdf', formData);\n  }\n  sendRequest(url, formData) {\n    this.http.post(url, formData, {\n      responseType: 'blob',\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress && event.total) {\n        this.progress = Math.round(event.loaded / event.total * 100);\n      }\n      if (event.type === HttpEventType.Response) {\n        const blob = new Blob([event.body], {\n          type: 'application/pdf'\n        });\n        const fileURL = URL.createObjectURL(blob);\n        this.downloadUrl = fileURL;\n        this.progress = 0;\n        // Auto-download\n        const link = document.createElement('a');\n        link.href = fileURL;\n        link.download = this.fileName;\n        link.click();\n        // Cleanup\n        URL.revokeObjectURL(fileURL);\n        this.reset();\n      }\n    });\n  }\n  reset() {\n    this.downloadUrl = '';\n    this.fileName = 'converted.pdf';\n    this.selectedFiles = [];\n    if (this.fileInput) this.fileInput.nativeElement.value = '';\n  }\n};\n__decorate([ViewChild('fileInput'), __metadata(\"design:type\", ElementRef)], CombinedImageToPdfComponent.prototype, \"fileInput\", void 0);\nCombinedImageToPdfComponent = __decorate([Component({\n  selector: 'app-combined-image-to-pdf',\n  templateUrl: './combined-image-to-pdf.component.html',\n  styleUrls: ['./combined-image-to-pdf.component.css']\n}), __metadata(\"design:paramtypes\", [HttpClient])], CombinedImageToPdfComponent);\nexport { CombinedImageToPdfComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}