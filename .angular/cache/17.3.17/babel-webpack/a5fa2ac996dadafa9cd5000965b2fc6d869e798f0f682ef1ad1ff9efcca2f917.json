{"ast":null,"code":"import { HttpClient, HttpEventType } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction WordToPdfComponent_p_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Uploading... \", ctx_r0.progress, \"%\");\n  }\n}\nexport let WordToPdfComponent = /*#__PURE__*/(() => {\n  class WordToPdfComponent {\n    http;\n    selectedFile = null;\n    progress = 0;\n    downloadUrl = '';\n    constructor(http) {\n      this.http = http;\n    }\n    onFileSelected(event) {\n      this.selectedFile = event.target.files[0];\n    }\n    upload() {\n      if (!this.selectedFile) return;\n      const formData = new FormData();\n      formData.append('file', this.selectedFile);\n      this.http.post(`${environment.apiUrl}/word-to-pdf`, formData, {\n        responseType: 'blob',\n        reportProgress: true,\n        observe: 'events'\n      }).subscribe(event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.progress = Math.round(event.loaded / event.total * 100);\n        }\n        if (event.type === HttpEventType.Response) {\n          const blob = new Blob([event.body], {\n            type: 'application/pdf'\n          });\n          const url = URL.createObjectURL(blob);\n          // auto-download and reset\n          const anchor = document.createElement('a');\n          anchor.href = url;\n          anchor.download = 'converted.pdf';\n          anchor.click();\n          URL.revokeObjectURL(url);\n          this.reset();\n        }\n      });\n    }\n    reset() {\n      this.selectedFile = null;\n      this.progress = 0;\n      this.downloadUrl = '';\n    }\n    static ɵfac = function WordToPdfComponent_Factory(t) {\n      return new (t || WordToPdfComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: WordToPdfComponent,\n      selectors: [[\"app-word-to-pdf\"]],\n      decls: 7,\n      vars: 2,\n      consts: [[1, \"tool-container\"], [\"type\", \"file\", \"accept\", \".docx\", 3, \"change\"], [3, \"click\", \"disabled\"], [4, \"ngIf\"]],\n      template: function WordToPdfComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"\\uD83D\\uDCDD Convert Word (.docx) to PDF\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"input\", 1);\n          i0.ɵɵlistener(\"change\", function WordToPdfComponent_Template_input_change_3_listener($event) {\n            return ctx.onFileSelected($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function WordToPdfComponent_Template_button_click_4_listener() {\n            return ctx.upload();\n          });\n          i0.ɵɵtext(5, \"Convert\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(6, WordToPdfComponent_p_6_Template, 2, 1, \"p\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", !ctx.selectedFile);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.progress > 0);\n        }\n      },\n      dependencies: [i2.NgIf],\n      styles: [\".tool-container[_ngcontent-%COMP%]{padding:20px;border:1px solid #ccc;max-width:500px;margin:30px auto;text-align:center;border-radius:8px;background-color:#f9f9f9}input[type=file][_ngcontent-%COMP%]{margin:10px 0}button[_ngcontent-%COMP%]{margin:10px 0;padding:6px 14px}\"]\n    });\n  }\n  return WordToPdfComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}