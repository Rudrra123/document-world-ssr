{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nlet CompressImageComponent = class CompressImageComponent {\n  http;\n  fileInput;\n  selectedFile = null;\n  previewUrl = '';\n  progress = 0;\n  compressedUrl = '';\n  originalSize = 0;\n  compressedSize = 0;\n  constructor(http) {\n    this.http = http;\n  }\n  triggerFileInput() {\n    this.fileInput.nativeElement.click();\n  }\n  preventDefaults(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  onFileSelected(event) {\n    const input = event.target;\n    const file = input.files?.[0];\n    if (file) {\n      this.selectedFile = file;\n      this.previewUrl = URL.createObjectURL(file);\n      this.originalSize = file.size;\n      this.compressedUrl = '';\n      this.compressedSize = 0;\n      this.progress = 0;\n    }\n  }\n  onFilesDropped(event) {\n    this.preventDefaults(event);\n    const file = event.dataTransfer?.files?.[0];\n    if (file) {\n      this.selectedFile = file;\n      this.previewUrl = URL.createObjectURL(file);\n      this.originalSize = file.size;\n      this.compressedUrl = '';\n      this.compressedSize = 0;\n      this.progress = 0;\n    }\n  }\n  upload() {\n    if (!this.selectedFile) return;\n    const formData = new FormData();\n    formData.append('file', this.selectedFile);\n    this.http.post('http://127.0.0.1:8000/api/compress-image', formData, {\n      reportProgress: true,\n      observe: 'events',\n      responseType: 'blob'\n    }).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress && event.total) {\n        this.progress = Math.round(event.loaded / event.total * 100);\n      }\n      if (event.type === HttpEventType.Response) {\n        const blob = new Blob([event.body], {\n          type: event.body?.type || 'image/jpeg'\n        });\n        this.compressedSize = blob.size;\n        this.compressedUrl = URL.createObjectURL(blob);\n        this.progress = 0;\n        // Optional auto-download\n        const a = document.createElement('a');\n        a.href = this.compressedUrl;\n        a.download = 'compressed-' + this.selectedFile.name;\n        a.click();\n        // Reset\n        this.reset();\n      }\n    });\n  }\n  reset() {\n    this.selectedFile = null;\n    this.previewUrl = '';\n    this.compressedUrl = '';\n    this.originalSize = 0;\n    this.compressedSize = 0;\n    this.progress = 0;\n    this.fileInput.nativeElement.value = '';\n  }\n};\n__decorate([ViewChild('fileInput'), __metadata(\"design:type\", ElementRef)], CompressImageComponent.prototype, \"fileInput\", void 0);\nCompressImageComponent = __decorate([Component({\n  selector: 'app-compress-image',\n  templateUrl: './compress-image.component.html',\n  styleUrls: ['./compress-image.component.css']\n}), __metadata(\"design:paramtypes\", [HttpClient])], CompressImageComponent);\nexport { CompressImageComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}