{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nlet CompressImageComponent = class CompressImageComponent {\n  http;\n  fileInput;\n  selectedFiles = [];\n  previews = [];\n  progressMap = {};\n  constructor(http) {\n    this.http = http;\n  }\n  triggerFileInput() {\n    this.fileInput.nativeElement.click();\n  }\n  preventDefaults(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  onFilesDropped(event) {\n    this.preventDefaults(event);\n    if (event.dataTransfer?.files?.length) {\n      this.handleFiles(event.dataTransfer.files);\n    }\n  }\n  onFileSelected(event) {\n    const input = event.target;\n    if (input.files?.length) {\n      this.handleFiles(input.files);\n    }\n  }\n  handleFiles(fileList) {\n    this.selectedFiles = Array.from(fileList);\n    this.previews = this.selectedFiles.map(file => ({\n      file,\n      url: URL.createObjectURL(file),\n      size: file.size\n    }));\n  }\n  uploadAll() {\n    for (const file of this.selectedFiles) {\n      const formData = new FormData();\n      formData.append('file', file);\n      this.http.post('http://127.0.0.1:8000/api/compress-image', formData, {\n        observe: 'events',\n        responseType: 'blob',\n        reportProgress: true\n      }).subscribe(event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.progressMap[file.name] = Math.round(event.loaded / event.total * 100);\n        }\n        if (event.type === HttpEventType.Response) {\n          const blob = new Blob([event.body], {\n            type: event.body?.type || 'image/jpeg'\n          });\n          const compressedUrl = URL.createObjectURL(blob);\n          const preview = this.previews.find(p => p.file.name === file.name);\n          if (preview) {\n            preview.compressedUrl = compressedUrl;\n            preview.compressedSize = blob.size;\n          }\n        }\n      });\n    }\n  }\n};\n__decorate([ViewChild('fileInput'), __metadata(\"design:type\", ElementRef)], CompressImageComponent.prototype, \"fileInput\", void 0);\nCompressImageComponent = __decorate([Component({\n  selector: 'app-compress-image',\n  templateUrl: './compress-image.component.html',\n  styleUrls: ['./compress-image.component.css']\n}), __metadata(\"design:paramtypes\", [HttpClient])], CompressImageComponent);\nexport { CompressImageComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}