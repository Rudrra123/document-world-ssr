{"ast":null,"code":"import { HttpClient, HttpEventType } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CompressPdfComponent = /*#__PURE__*/(() => {\n  class CompressPdfComponent {\n    http;\n    selectedFile = null;\n    originalSize = null;\n    compressedSize = null;\n    downloadUrl = null;\n    isUploading = false;\n    uploadProgress = 0;\n    constructor(http) {\n      this.http = http;\n    }\n    onFileSelected(event) {\n      const file = event.target.files[0];\n      if (file && file.type === 'application/pdf') {\n        this.selectedFile = file;\n        this.originalSize = file.size;\n        this.downloadUrl = null;\n        this.compressedSize = null;\n      } else {\n        alert(\"Please select a valid PDF file.\");\n      }\n    }\n    compressPDF() {\n      if (!this.selectedFile) return;\n      const formData = new FormData();\n      formData.append('file', this.selectedFile);\n      this.isUploading = true;\n      this.uploadProgress = 0;\n      this.http.post(`${environment.apiUrl}/compress-pdf`, formData, {\n        responseType: 'blob',\n        reportProgress: true,\n        observe: 'events'\n      }).subscribe(event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.uploadProgress = Math.round(100 * (event.loaded / event.total));\n        }\n        if (event.type === HttpEventType.Response) {\n          const blob = new Blob([event.body], {\n            type: 'application/pdf'\n          });\n          this.compressedSize = blob.size;\n          this.downloadUrl = window.URL.createObjectURL(blob);\n          this.isUploading = false;\n        }\n      }, err => {\n        console.error('Compression failed', err);\n        alert(\"Compression failed. Try again.\");\n        this.isUploading = false;\n      });\n    }\n    compressPdfFile() {\n      if (!this.selectedFileSingle) {\n        this.errorMessage = 'Please select a PDF file to compress.';\n        return;\n      }\n      this.resetCommonStatesForNewUpload(); // Reset previous states\n      this.progress = 1;\n      const formData = new FormData();\n      formData.append('file', this.selectedFileSingle);\n      this.uploadSubscription = this.http.post(`${environment.apiUrl}/compress-pdf`, formData, {\n        responseType: 'blob',\n        reportProgress: true,\n        observe: 'events'\n      }).subscribe({\n        next: event => {\n          if (event.type === HttpEventType.UploadProgress && event.total) {\n            this.progress = Math.round(100 * (event.loaded / event.total));\n          }\n          if (event.type === HttpEventType.Response) {\n            const blob = new Blob([event.body], {\n              type: 'application/pdf'\n            });\n            this.downloadUrl = URL.createObjectURL(blob);\n            this.downloadFileName = 'compressed.pdf';\n            this.progress = 0;\n          }\n        },\n        error: error => {\n          this.handleUploadError(error);\n          this.resetCommonStatesForNewUpload();\n        },\n        complete: () => {\n          this.unsubscribeUpload();\n        }\n      });\n    }\n    static ɵfac = function CompressPdfComponent_Factory(t) {\n      return new (t || CompressPdfComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CompressPdfComponent,\n      selectors: [[\"app-compress-pdf\"]],\n      decls: 7,\n      vars: 0,\n      consts: [[1, \"tool-card\", 3, \"click\"], [1, \"tool-icon-wrapper\", \"bg-purple\"], [1, \"fas\", \"fa-compress\"], [1, \"tool-title\"], [1, \"tool-description\"]],\n      template: function CompressPdfComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵlistener(\"click\", function CompressPdfComponent_Template_div_click_0_listener() {\n            return ctx.setActiveTool(\"compress-pdf\");\n          });\n          i0.ɵɵelementStart(1, \"div\", 1);\n          i0.ɵɵelement(2, \"i\", 2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"h3\", 3);\n          i0.ɵɵtext(4, \"Compress PDF\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"p\", 4);\n          i0.ɵɵtext(6, \"Shrink your PDF file size quickly and efficiently.\");\n          i0.ɵɵelementEnd()();\n        }\n      }\n    });\n  }\n  return CompressPdfComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}