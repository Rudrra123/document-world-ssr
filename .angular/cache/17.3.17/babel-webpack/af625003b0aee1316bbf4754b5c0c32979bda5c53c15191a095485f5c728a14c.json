{"ast":null,"code":"// import { HttpClient } from '@angular/common/http';\n// import { Component } from '@angular/core';\n// import { FormsModule } from '@angular/forms'; \n// @Component({\n//   selector: 'app-protect-pdf-password',\n//   standalone: true,\n//   imports: [FormsModule], //\n//   templateUrl: './protect-pdf-password.component.html',\n//   styleUrl: './protect-pdf-password.component.css'\n// })\n// export class ProtectPdfPasswordComponent {\n//   selectedFile: File | null = null;\n//   password: string = '';\n//   isLoading: boolean = false;\n//   message: string = '';\n//   constructor(private http: HttpClient) {}\n//   onFileSelected(event: Event): void {\n//     const input = event.target as HTMLInputElement;\n//     if (input?.files?.length) {\n//       this.selectedFile = input.files[0];\n//     }\n//   }\n//   onSubmit(): void {\n//     if (!this.selectedFile || !this.password) {\n//       this.message = 'Please provide a file and password.';\n//       return;\n//     }\n//     const formData = new FormData();\n//     formData.append('file', this.selectedFile);\n//     formData.append('password', this.password);\n//     this.isLoading = true;\n//     this.message = '';\n//     this.http.post('http://localhost:8000/protect-pdf-password', formData, {\n//       responseType: 'blob',\n//       observe: 'response'\n//     }).subscribe({\n//       next: (response) => {\n//         const blob = new Blob([response.body!], { type: 'application/pdf' });\n//         const downloadUrl = window.URL.createObjectURL(blob);\n//         const a = document.createElement('a');\n//         a.href = downloadUrl;\n//         a.download = response.headers.get('Content-Disposition')?.split('filename=')[1] || 'protected.pdf';\n//         a.click();\n//         this.message = 'PDF protected and downloaded successfully!';\n//         this.isLoading = false;\n//       },\n//       error: (err) => {\n//         console.error(err);\n//         this.message = 'Failed to protect PDF. Please try again.';\n//         this.isLoading = false;\n//       }\n//     });\n//   }\n// }\n// src/app/tools/protect-pdf-password/protect-pdf-password.component.ts\nimport { HttpClient } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common'; // For *ngIf and ngClass\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = (a0, a1) => ({\n  \"bg-blue-300 cursor-not-allowed\": a0,\n  \"bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\": a1\n});\nconst _c1 = (a0, a1) => ({\n  \"text-green-600\": a0,\n  \"text-red-600\": a1\n});\nfunction ProtectPdfPasswordComponent_p_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\"Selected: \", ctx_r1.selectedFile.name, \"\");\n  }\n}\nfunction ProtectPdfPasswordComponent_p_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(2, _c1, ctx_r1.message.includes(\"successfully\"), !ctx_r1.message.includes(\"successfully\")));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.message, \" \");\n  }\n}\nexport let ProtectPdfPasswordComponent = /*#__PURE__*/(() => {\n  class ProtectPdfPasswordComponent {\n    http;\n    selectedFile = null;\n    password = '';\n    isLoading = false;\n    message = '';\n    // Inject HttpClient\n    constructor(http) {\n      this.http = http;\n    }\n    onFileSelected(event) {\n      const input = event.target;\n      if (input?.files?.length) {\n        const file = input.files[0];\n        if (file.type === 'application/pdf') {\n          this.selectedFile = file;\n          this.message = ''; // Clear any previous messages\n        } else {\n          this.selectedFile = null;\n          this.message = 'Please select a valid PDF file.';\n          // Clear the file input if an invalid file is selected\n          if (input) {\n            input.value = '';\n          }\n        }\n      }\n    }\n    onSubmit() {\n      if (!this.selectedFile) {\n        this.message = 'Please select a PDF file.';\n        return;\n      }\n      if (!this.password) {\n        this.message = 'Please enter a password.';\n        return;\n      }\n      const formData = new FormData();\n      formData.append('file', this.selectedFile);\n      formData.append('password', this.password);\n      this.isLoading = true;\n      this.message = 'Processing...';\n      // Make the HTTP POST request to your backend\n      this.http.post('http://localhost:8000/protect-pdf-password', formData, {\n        responseType: 'blob',\n        // Expect a binary response (the PDF file)\n        observe: 'response' // Get the full HTTP response, including headers\n      }).subscribe({\n        next: response => {\n          // Create a Blob from the response body\n          const blob = new Blob([response.body], {\n            type: 'application/pdf'\n          });\n          // Create a URL for the Blob\n          const downloadUrl = window.URL.createObjectURL(blob);\n          // Create a temporary anchor tag to trigger the download\n          const a = document.createElement('a');\n          a.href = downloadUrl;\n          // Extract filename from Content-Disposition header or use a default\n          a.download = response.headers.get('Content-Disposition')?.split('filename=')[1]?.replace(/\"/g, '') || 'protected.pdf';\n          document.body.appendChild(a); // Append to body to ensure it's clickable\n          a.click(); // Programmatically click the link to start download\n          document.body.removeChild(a); // Clean up the temporary link\n          this.message = 'PDF protected and downloaded successfully!';\n          this.isLoading = false;\n          this.selectedFile = null; // Clear selected file\n          this.password = ''; // Clear password\n          // Reset file input value\n          const fileInput = document.getElementById('file');\n          if (fileInput) {\n            fileInput.value = '';\n          }\n        },\n        error: err => {\n          console.error('Error protecting PDF:', err);\n          this.message = 'Failed to protect PDF. Please try again.';\n          this.isLoading = false;\n        }\n      });\n    }\n    static ɵfac = function ProtectPdfPasswordComponent_Factory(t) {\n      return new (t || ProtectPdfPasswordComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ProtectPdfPasswordComponent,\n      selectors: [[\"app-protect-pdf-password\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 18,\n      vars: 9,\n      consts: [[\"form\", \"ngForm\"], [1, \"min-h-screen\", \"bg-gray-100\", \"flex\", \"items-center\", \"justify-center\", \"p-4\", \"font-inter\"], [1, \"bg-white\", \"p-8\", \"rounded-xl\", \"shadow-lg\", \"w-full\", \"max-w-md\", \"border\", \"border-gray-200\"], [1, \"text-3xl\", \"font-bold\", \"text-center\", \"text-gray-800\", \"mb-6\"], [1, \"space-y-6\", 3, \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"file\", 1, \"block\", \"text-gray-700\", \"text-sm\", \"font-medium\", \"mb-2\"], [\"type\", \"file\", \"id\", \"file\", \"accept\", \".pdf\", \"required\", \"\", 1, \"block\", \"w-full\", \"text-sm\", \"text-gray-900\", \"file:mr-4\", \"file:py-2\", \"file:px-4\", \"file:rounded-full\", \"file:border-0\", \"file:text-sm\", \"file:font-semibold\", \"file:bg-blue-50\", \"file:text-blue-700\", \"hover:file:bg-blue-100\", \"border\", \"border-gray-300\", \"rounded-lg\", \"cursor-pointer\", \"bg-gray-50\", \"focus:outline-none\", \"focus:ring-2\", \"focus:ring-blue-500\", \"focus:border-transparent\", 3, \"change\"], [\"class\", \"mt-2 text-sm text-gray-600\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"block\", \"text-gray-700\", \"text-sm\", \"font-medium\", \"mb-2\"], [\"type\", \"password\", \"id\", \"password\", \"name\", \"password\", \"placeholder\", \"Your secure password\", \"required\", \"\", 1, \"shadow-sm\", \"appearance-none\", \"border\", \"border-gray-300\", \"rounded-lg\", \"w-full\", \"py-2\", \"px-3\", \"text-gray-700\", \"leading-tight\", \"focus:outline-none\", \"focus:ring-2\", \"focus:ring-blue-500\", \"focus:border-transparent\", \"transition\", \"duration-200\", \"ease-in-out\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"submit\", 1, \"w-full\", \"py-3\", \"px-4\", \"rounded-lg\", \"font-semibold\", \"text-white\", \"transition\", \"duration-300\", \"ease-in-out\", 3, \"disabled\", \"ngClass\"], [\"class\", \"mt-6 text-center text-sm font-medium\", 3, \"ngClass\", 4, \"ngIf\"], [1, \"mt-2\", \"text-sm\", \"text-gray-600\"], [1, \"mt-6\", \"text-center\", \"text-sm\", \"font-medium\", 3, \"ngClass\"]],\n      template: function ProtectPdfPasswordComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"h2\", 3);\n          i0.ɵɵtext(3, \" \\uD83D\\uDD12 Protect PDF with Password \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"form\", 4, 0);\n          i0.ɵɵlistener(\"ngSubmit\", function ProtectPdfPasswordComponent_Template_form_ngSubmit_4_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onSubmit());\n          });\n          i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n          i0.ɵɵtext(8, \" Select PDF File \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"input\", 7);\n          i0.ɵɵlistener(\"change\", function ProtectPdfPasswordComponent_Template_input_change_9_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onFileSelected($event));\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(10, ProtectPdfPasswordComponent_p_10_Template, 2, 1, \"p\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\", 5)(12, \"label\", 9);\n          i0.ɵɵtext(13, \" Enter Password \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"input\", 10);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function ProtectPdfPasswordComponent_Template_input_ngModelChange_14_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            i0.ɵɵtwoWayBindingSet(ctx.password, $event) || (ctx.password = $event);\n            return i0.ɵɵresetView($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"button\", 11);\n          i0.ɵɵtext(16);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(17, ProtectPdfPasswordComponent_p_17_Template, 2, 5, \"p\", 12);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedFile);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.password);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"disabled\", ctx.isLoading || !ctx.selectedFile || !ctx.password)(\"ngClass\", i0.ɵɵpureFunction2(6, _c0, ctx.isLoading || !ctx.selectedFile || !ctx.password, !(ctx.isLoading || !ctx.selectedFile || !ctx.password)));\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Processing...\" : \"Protect PDF\", \" \");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.message);\n        }\n      },\n      dependencies: [FormsModule, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm, CommonModule, i3.NgClass, i3.NgIf]\n    });\n  }\n  return ProtectPdfPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}