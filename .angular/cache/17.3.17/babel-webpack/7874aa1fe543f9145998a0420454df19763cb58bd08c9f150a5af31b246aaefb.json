{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser'; // Import DomSanitizer\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"fileInput\"];\nfunction CompressImageComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.…µ…µgetCurrentView();\n    i0.…µ…µelementStart(0, \"div\", 6)(1, \"div\", 7)(2, \"label\");\n    i0.…µ…µtext(3, \"X\");\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(4, \"input\", 8);\n    i0.…µ…µtwoWayListener(\"ngModelChange\", function CompressImageComponent_div_18_Template_input_ngModelChange_4_listener($event) {\n      i0.…µ…µrestoreView(_r1);\n      const ctx_r1 = i0.…µ…µnextContext();\n      i0.…µ…µtwoWayBindingSet(ctx_r1.cropX, $event) || (ctx_r1.cropX = $event);\n      return i0.…µ…µresetView($event);\n    });\n    i0.…µ…µelementEnd()();\n    i0.…µ…µelementStart(5, \"div\", 7)(6, \"label\");\n    i0.…µ…µtext(7, \"Y\");\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(8, \"input\", 8);\n    i0.…µ…µtwoWayListener(\"ngModelChange\", function CompressImageComponent_div_18_Template_input_ngModelChange_8_listener($event) {\n      i0.…µ…µrestoreView(_r1);\n      const ctx_r1 = i0.…µ…µnextContext();\n      i0.…µ…µtwoWayBindingSet(ctx_r1.cropY, $event) || (ctx_r1.cropY = $event);\n      return i0.…µ…µresetView($event);\n    });\n    i0.…µ…µelementEnd()();\n    i0.…µ…µelementStart(9, \"div\", 7)(10, \"label\");\n    i0.…µ…µtext(11, \"Width\");\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(12, \"input\", 9);\n    i0.…µ…µtwoWayListener(\"ngModelChange\", function CompressImageComponent_div_18_Template_input_ngModelChange_12_listener($event) {\n      i0.…µ…µrestoreView(_r1);\n      const ctx_r1 = i0.…µ…µnextContext();\n      i0.…µ…µtwoWayBindingSet(ctx_r1.cropWidth, $event) || (ctx_r1.cropWidth = $event);\n      return i0.…µ…µresetView($event);\n    });\n    i0.…µ…µelementEnd()();\n    i0.…µ…µelementStart(13, \"div\", 7)(14, \"label\");\n    i0.…µ…µtext(15, \"Height\");\n    i0.…µ…µelementEnd();\n    i0.…µ…µelementStart(16, \"input\", 9);\n    i0.…µ…µtwoWayListener(\"ngModelChange\", function CompressImageComponent_div_18_Template_input_ngModelChange_16_listener($event) {\n      i0.…µ…µrestoreView(_r1);\n      const ctx_r1 = i0.…µ…µnextContext();\n      i0.…µ…µtwoWayBindingSet(ctx_r1.cropHeight, $event) || (ctx_r1.cropHeight = $event);\n      return i0.…µ…µresetView($event);\n    });\n    i0.…µ…µelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.…µ…µnextContext();\n    i0.…µ…µadvance(4);\n    i0.…µ…µtwoWayProperty(\"ngModel\", ctx_r1.cropX);\n    i0.…µ…µadvance(4);\n    i0.…µ…µtwoWayProperty(\"ngModel\", ctx_r1.cropY);\n    i0.…µ…µadvance(4);\n    i0.…µ…µtwoWayProperty(\"ngModel\", ctx_r1.cropWidth);\n    i0.…µ…µadvance(4);\n    i0.…µ…µtwoWayProperty(\"ngModel\", ctx_r1.cropHeight);\n  }\n}\nexport let CompressImageComponent = /*#__PURE__*/(() => {\n  class CompressImageComponent {\n    http;\n    sanitizer;\n    fileInput;\n    selectedFile = null;\n    previewUrl = ''; // Use SafeUrl\n    progress = 0;\n    compressedUrl = ''; // Use SafeUrl\n    originalSize = 0;\n    compressedSize = 0;\n    // Modes: compress, resize, convert, crop\n    mode = 'compress';\n    // Resize properties\n    resizeWidth = null;\n    resizeHeight = null;\n    // Convert properties\n    convertFormat = '';\n    // Crop fields (Corrected initialization, use null for truly empty)\n    cropX = null;\n    cropY = null;\n    cropWidth = null;\n    cropHeight = null;\n    downloadedFileName = '';\n    // Inject DomSanitizer\n    constructor(http, sanitizer) {\n      this.http = http;\n      this.sanitizer = sanitizer;\n    }\n    triggerFileInput() {\n      this.fileInput.nativeElement.click();\n    }\n    preventDefaults(event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    onFileSelected(event) {\n      const input = event.target;\n      const file = input.files?.[0];\n      if (file) this.setFile(file);\n    }\n    onFilesDropped(event) {\n      this.preventDefaults(event);\n      const file = event.dataTransfer?.files?.[0];\n      if (file) this.setFile(file);\n    }\n    setFile(file) {\n      this.selectedFile = file;\n      // Sanitize the URL for security\n      this.previewUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(file));\n      this.originalSize = file.size;\n      this.compressedUrl = '';\n      this.compressedSize = 0;\n      this.progress = 0;\n      this.downloadedFileName = ''; // Reset filename\n      // Also reset all mode-specific inputs when a new file is selected\n      this.resizeWidth = null;\n      this.resizeHeight = null;\n      this.convertFormat = '';\n      this.cropX = null;\n      this.cropY = null;\n      this.cropWidth = null;\n      this.cropHeight = null;\n    }\n    getButtonLabel() {\n      switch (this.mode) {\n        case 'resize':\n          return 'üìê Resize Image';\n        case 'convert':\n          return 'üîÑ Convert Image';\n        case 'crop':\n          return '‚úÇÔ∏è Crop Image';\n        // This is correct\n        default:\n          return '‚ö° Compress Image';\n      }\n    }\n    upload() {\n      if (!this.selectedFile) {\n        console.warn('No file selected.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('file', this.selectedFile);\n      let endpoint = '';\n      if (this.mode === 'resize') {\n        // Improved validation for resize\n        if (this.resizeWidth === null || this.resizeHeight === null || this.resizeWidth <= 0 || this.resizeHeight <= 0) {\n          console.error('Please enter valid positive width and height for resizing.');\n          return;\n        }\n        formData.append('width', this.resizeWidth.toString());\n        formData.append('height', this.resizeHeight.toString());\n        endpoint = 'http://127.0.0.1:8000/api/resize-image';\n      } else if (this.mode === 'convert') {\n        // Improved validation for convert\n        if (!this.convertFormat) {\n          console.error('Please select a target format for conversion.');\n          return;\n        }\n        formData.append('target_format', this.convertFormat);\n        endpoint = 'http://127.0.0.1:8000/api/convert-image';\n      } else if (this.mode === 'crop') {\n        // Improved validation for crop parameters\n        // Check if they are not null AND are valid numbers (especially width/height > 0)\n        if (this.cropX === null || this.cropY === null ||\n        // X and Y can be 0, so '!= null' is fine\n        this.cropWidth === null || this.cropHeight === null || this.cropWidth <= 0 || this.cropHeight <= 0 // Width and height must be positive\n        ) {\n          console.error('Please enter valid positive crop dimensions (width, height) and coordinates (x, y).');\n          return;\n        }\n        formData.append('x', this.cropX.toString());\n        formData.append('y', this.cropY.toString());\n        formData.append('width', this.cropWidth.toString());\n        formData.append('height', this.cropHeight.toString());\n        endpoint = 'http://127.0.0.1:8000/api/crop-image';\n      } else {\n        endpoint = 'http://127.0.0.1:8000/api/compress-image';\n      }\n      // Reset progress and result displays before new upload\n      this.progress = 0;\n      this.compressedUrl = '';\n      this.compressedSize = 0;\n      this.downloadedFileName = '';\n      this.http.post(endpoint, formData, {\n        reportProgress: true,\n        observe: 'events',\n        responseType: 'blob' // Expecting a blob (image data) back from FastAPI\n      }).subscribe(event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.progress = Math.round(event.loaded / event.total * 100);\n        }\n        if (event.type === HttpEventType.Response) {\n          const blob = new Blob([event.body], {\n            type: event.body?.type || 'image/jpeg'\n          });\n          this.compressedSize = blob.size;\n          // Sanitize the URL before assigning to compressedUrl\n          this.compressedUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(blob));\n          this.downloadedFileName = this.getDownloadName();\n          this.progress = 0; // Reset progress after successful completion\n          // Auto download\n          const a = document.createElement('a');\n          a.href = this.compressedUrl; // Cast to string because SafeUrl is not directly assignable to href\n          a.download = this.downloadedFileName;\n          document.body.appendChild(a); // Temporarily append to body to ensure click works in all browsers\n          a.click();\n          document.body.removeChild(a); // Clean up\n        }\n      }, error => {\n        console.error('Image processing failed:', error);\n        this.progress = 0; // Reset progress on error\n        // Optionally, show a user-friendly error message on the UI\n        this.resetTool(); // Reset the tool state on error\n      });\n    }\n    // Updated getDownloadName() method for better filename handling\n    getDownloadName() {\n      const name = this.selectedFile?.name || 'image';\n      const nameParts = name.split('.');\n      const baseName = nameParts[0];\n      // Get original extension, default to 'jpg' if no extension\n      const originalExt = nameParts.length > 1 ? nameParts.pop() : 'jpg';\n      let suffix = '';\n      let ext = originalExt; // Default to original extension\n      switch (this.mode) {\n        case 'compress':\n          suffix = 'compressed';\n          break;\n        case 'resize':\n          suffix = 'resized';\n          break;\n        case 'convert':\n          suffix = 'converted';\n          ext = this.convertFormat || originalExt; // Use convertFormat, or fallback to original\n          break;\n        case 'crop':\n          suffix = 'cropped';\n          // For crop, the backend might return PNG if the original format was unknown/complex.\n          // It's usually best to trust the backend's Content-Disposition header for the exact extension.\n          // However, for client-side download name, we can guess or use original.\n          // Let's stick with the original extension for cropped images, assuming the backend will try to maintain it.\n          break;\n        default:\n          suffix = 'processed';\n        // Fallback for any other unexpected mode\n      }\n      return `${baseName}_${suffix}.${ext}`;\n    }\n    /**\n     * Resets all component states and inputs. Call this when mode changes or a new operation starts.\n     */\n    resetTool() {\n      // Revoke previous object URLs to free up memory\n      if (this.previewUrl) {\n        URL.revokeObjectURL(this.previewUrl);\n      }\n      if (this.compressedUrl) {\n        URL.revokeObjectURL(this.compressedUrl);\n      }\n      this.selectedFile = null;\n      this.previewUrl = '';\n      this.progress = 0;\n      this.compressedUrl = '';\n      this.originalSize = 0;\n      this.compressedSize = 0;\n      this.downloadedFileName = '';\n      // Reset all mode-specific inputs\n      this.resizeWidth = null;\n      this.resizeHeight = null;\n      this.convertFormat = '';\n      this.cropX = null;\n      this.cropY = null;\n      this.cropWidth = null;\n      this.cropHeight = null;\n      // Clear the file input element's value to allow selecting the same file again\n      if (this.fileInput && this.fileInput.nativeElement) {\n        this.fileInput.nativeElement.value = '';\n      }\n    }\n    static …µfac = function CompressImageComponent_Factory(t) {\n      return new (t || CompressImageComponent)(i0.…µ…µdirectiveInject(i1.HttpClient), i0.…µ…µdirectiveInject(i2.DomSanitizer));\n    };\n    static …µcmp = /*@__PURE__*/i0.…µ…µdefineComponent({\n      type: CompressImageComponent,\n      selectors: [[\"app-compress-image\"]],\n      viewQuery: function CompressImageComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.…µ…µviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.…µ…µqueryRefresh(_t = i0.…µ…µloadQuery()) && (ctx.fileInput = _t.first);\n        }\n      },\n      decls: 19,\n      vars: 3,\n      consts: [[\"id\", \"modeSelect\", 1, \"form-select\", 3, \"ngModelChange\", \"ngModel\"], [\"value\", \"compress\"], [\"value\", \"resize\"], [\"value\", \"convert\"], [\"value\", \"crop\"], [\"class\", \"resize-inputs\", 4, \"ngIf\"], [1, \"resize-inputs\"], [1, \"input-group\"], [\"type\", \"number\", \"placeholder\", \"e.g. 100\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"number\", \"placeholder\", \"e.g. 300\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"]],\n      template: function CompressImageComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.…µ…µelementStart(0, \"select\", 0);\n          i0.…µ…µtwoWayListener(\"ngModelChange\", function CompressImageComponent_Template_select_ngModelChange_0_listener($event) {\n            i0.…µ…µtwoWayBindingSet(ctx.mode, $event) || (ctx.mode = $event);\n            return $event;\n          });\n          i0.…µ…µelementStart(1, \"option\", 1);\n          i0.…µ…µtext(2, \"\\u26A1 Compress\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(3, \"option\", 2);\n          i0.…µ…µtext(4, \"\\uD83D\\uDCD0 Resize\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(5, \"option\", 3);\n          i0.…µ…µtext(6, \"\\uD83D\\uDD04 Convert\");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µtext(7, \" With: \");\n          i0.…µ…µelementStart(8, \"select\", 0);\n          i0.…µ…µtwoWayListener(\"ngModelChange\", function CompressImageComponent_Template_select_ngModelChange_8_listener($event) {\n            i0.…µ…µtwoWayBindingSet(ctx.mode, $event) || (ctx.mode = $event);\n            return $event;\n          });\n          i0.…µ…µelementStart(9, \"option\", 1);\n          i0.…µ…µtext(10, \"\\u26A1 Compress\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(11, \"option\", 2);\n          i0.…µ…µtext(12, \"\\uD83D\\uDCD0 Resize\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(13, \"option\", 3);\n          i0.…µ…µtext(14, \"\\uD83D\\uDD04 Convert\");\n          i0.…µ…µelementEnd();\n          i0.…µ…µelementStart(15, \"option\", 4);\n          i0.…µ…µtext(16, \"\\u2702\\uFE0F Crop\");\n          i0.…µ…µelementEnd()();\n          i0.…µ…µtext(17, \" Then, below the Convert Format section, add: \");\n          i0.…µ…µtemplate(18, CompressImageComponent_div_18_Template, 17, 4, \"div\", 5);\n        }\n        if (rf & 2) {\n          i0.…µ…µtwoWayProperty(\"ngModel\", ctx.mode);\n          i0.…µ…µadvance(8);\n          i0.…µ…µtwoWayProperty(\"ngModel\", ctx.mode);\n          i0.…µ…µadvance(10);\n          i0.…µ…µproperty(\"ngIf\", ctx.mode === \"crop\");\n        }\n      },\n      dependencies: [i3.NgIf, i4.NgSelectOption, i4.…µNgSelectMultipleOption, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.NgModel],\n      styles: [\".tool-container[_ngcontent-%COMP%]{max-width:1100px;margin:0 auto;padding:30px;font-family:Poppins,sans-serif;color:#333}.main-header[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{font-size:2.5rem;font-weight:600;color:#444}.main-header[_ngcontent-%COMP%]   .tagline[_ngcontent-%COMP%]{font-size:1rem;color:#777}.workspace[_ngcontent-%COMP%]{display:flex;gap:30px;align-items:flex-start;margin-top:25px}.tool-card[_ngcontent-%COMP%]{flex:1 1 60%;background:#fff;padding:25px;border-radius:12px;box-shadow:0 5px 18px #0000000f}.card-preview[_ngcontent-%COMP%]{flex:1 1 35%;background:#f8f8f8;padding:20px;border-radius:12px;text-align:center;box-shadow:inset 0 0 8px #0000000d}.card-preview[_ngcontent-%COMP%]   .preview-img[_ngcontent-%COMP%]{max-width:100%;border-radius:10px;margin-bottom:10px}.upload-box[_ngcontent-%COMP%]{background:#f3f3f3;border:2px dashed #bbb;padding:30px;text-align:center;cursor:pointer;margin:20px 0;border-radius:10px}.upload-text[_ngcontent-%COMP%]{font-size:1rem;color:#555}.form-group[_ngcontent-%COMP%], .resize-inputs[_ngcontent-%COMP%]{margin-bottom:20px}.form-select[_ngcontent-%COMP%], .form-control[_ngcontent-%COMP%]{width:100%;padding:10px 12px;font-size:1rem;border:1px solid #ccc;border-radius:6px}.input-group[_ngcontent-%COMP%]{margin-bottom:10px}.action-btn[_ngcontent-%COMP%]{background-color:#6c63ff;color:#fff;border:none;padding:12px 25px;font-size:1rem;font-weight:500;border-radius:8px;cursor:pointer;transition:background .2s ease}.action-btn[_ngcontent-%COMP%]:hover{background-color:#574fe5}.progress[_ngcontent-%COMP%]{background:#eee;border-radius:6px;overflow:hidden;margin-top:20px}.bar[_ngcontent-%COMP%]{background:#28a745;height:8px;transition:width .3s ease}.result[_ngcontent-%COMP%]{margin-top:20px;text-align:center}.download-link[_ngcontent-%COMP%]{display:inline-block;margin-top:10px;background:#6c63ff;color:#fff;padding:10px 20px;border-radius:6px;text-decoration:none}\"]\n    });\n  }\n  return CompressImageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}