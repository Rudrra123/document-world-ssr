{"ast":null,"code":"// import { HttpClient } from '@angular/common/http';\n// import { Component } from '@angular/core';\n// import { FormsModule } from '@angular/forms'; \n// @Component({\n//   selector: 'app-protect-pdf-password',\n//   standalone: true,\n//   imports: [FormsModule], //\n//   templateUrl: './protect-pdf-password.component.html',\n//   styleUrl: './protect-pdf-password.component.css'\n// })\n// export class ProtectPdfPasswordComponent {\n//   selectedFile: File | null = null;\n//   password: string = '';\n//   isLoading: boolean = false;\n//   message: string = '';\n//   constructor(private http: HttpClient) {}\n//   onFileSelected(event: Event): void {\n//     const input = event.target as HTMLInputElement;\n//     if (input?.files?.length) {\n//       this.selectedFile = input.files[0];\n//     }\n//   }\n//   onSubmit(): void {\n//     if (!this.selectedFile || !this.password) {\n//       this.message = 'Please provide a file and password.';\n//       return;\n//     }\n//     const formData = new FormData();\n//     formData.append('file', this.selectedFile);\n//     formData.append('password', this.password);\n//     this.isLoading = true;\n//     this.message = '';\n//     this.http.post('http://localhost:8000/protect-pdf-password', formData, {\n//       responseType: 'blob',\n//       observe: 'response'\n//     }).subscribe({\n//       next: (response) => {\n//         const blob = new Blob([response.body!], { type: 'application/pdf' });\n//         const downloadUrl = window.URL.createObjectURL(blob);\n//         const a = document.createElement('a');\n//         a.href = downloadUrl;\n//         a.download = response.headers.get('Content-Disposition')?.split('filename=')[1] || 'protected.pdf';\n//         a.click();\n//         this.message = 'PDF protected and downloaded successfully!';\n//         this.isLoading = false;\n//       },\n//       error: (err) => {\n//         console.error(err);\n//         this.message = 'Failed to protect PDF. Please try again.';\n//         this.isLoading = false;\n//       }\n//     });\n//   }\n// }\n// src/app/tools/protect-pdf-password/protect-pdf-password.component.ts\nimport { HttpClient } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common'; // For *ngIf and ngClass\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProtectPdfPasswordComponent = /*#__PURE__*/(() => {\n  class ProtectPdfPasswordComponent {\n    http;\n    selectedFile = null;\n    password = '';\n    isLoading = false;\n    message = '';\n    // Inject HttpClient\n    constructor(http) {\n      this.http = http;\n    }\n    onFileSelected(event) {\n      const input = event.target;\n      if (input?.files?.length) {\n        const file = input.files[0];\n        if (file.type === 'application/pdf') {\n          this.selectedFile = file;\n          this.message = ''; // Clear any previous messages\n        } else {\n          this.selectedFile = null;\n          this.message = 'Please select a valid PDF file.';\n          // Clear the file input if an invalid file is selected\n          if (input) {\n            input.value = '';\n          }\n        }\n      }\n    }\n    onSubmit() {\n      if (!this.selectedFile) {\n        this.message = 'Please select a PDF file.';\n        return;\n      }\n      if (!this.password) {\n        this.message = 'Please enter a password.';\n        return;\n      }\n      const formData = new FormData();\n      formData.append('file', this.selectedFile);\n      formData.append('password', this.password);\n      this.isLoading = true;\n      this.message = 'Processing...';\n      // Make the HTTP POST request to your backend\n      this.http.post('http://localhost:8000/protect-pdf-password', formData, {\n        responseType: 'blob',\n        // Expect a binary response (the PDF file)\n        observe: 'response' // Get the full HTTP response, including headers\n      }).subscribe({\n        next: response => {\n          // Create a Blob from the response body\n          const blob = new Blob([response.body], {\n            type: 'application/pdf'\n          });\n          // Create a URL for the Blob\n          const downloadUrl = window.URL.createObjectURL(blob);\n          // Create a temporary anchor tag to trigger the download\n          const a = document.createElement('a');\n          a.href = downloadUrl;\n          // Extract filename from Content-Disposition header or use a default\n          a.download = response.headers.get('Content-Disposition')?.split('filename=')[1]?.replace(/\"/g, '') || 'protected.pdf';\n          document.body.appendChild(a); // Append to body to ensure it's clickable\n          a.click(); // Programmatically click the link to start download\n          document.body.removeChild(a); // Clean up the temporary link\n          this.message = 'PDF protected and downloaded successfully!';\n          this.isLoading = false;\n          this.selectedFile = null; // Clear selected file\n          this.password = ''; // Clear password\n          // Reset file input value\n          const fileInput = document.getElementById('file');\n          if (fileInput) {\n            fileInput.value = '';\n          }\n        },\n        error: err => {\n          console.error('Error protecting PDF:', err);\n          this.message = 'Failed to protect PDF. Please try again.';\n          this.isLoading = false;\n        }\n      });\n    }\n    static ɵfac = function ProtectPdfPasswordComponent_Factory(t) {\n      return new (t || ProtectPdfPasswordComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ProtectPdfPasswordComponent,\n      selectors: [[\"app-protect-pdf-password\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 0,\n      vars: 0,\n      template: function ProtectPdfPasswordComponent_Template(rf, ctx) {},\n      dependencies: [FormsModule, CommonModule]\n    });\n  }\n  return ProtectPdfPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}