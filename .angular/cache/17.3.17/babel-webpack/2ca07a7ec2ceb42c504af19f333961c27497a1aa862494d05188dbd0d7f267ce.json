{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { environment } from 'src/environments/environment';\nlet CompressImageComponent = class CompressImageComponent {\n  http;\n  sanitizer;\n  // Changed ViewChild target to match the HTML's #fileInputSingle\n  fileInput;\n  // Properties for file handling and status\n  selectedFile = null; // This is the main selected file\n  previewUrl = ''; // URL for the initial image preview\n  blobUrl = ''; // Holds the raw blob URL for the processed image download\n  compressedUrl = ''; // This will hold the URL for the processed image preview (if different from blobUrl)\n  downloadUrl = ''; // Added: This property will hold the URL for the successful download link,\n  // and its presence will control the visibility of the result area.\n  originalSize = 0;\n  compressedSize = 0;\n  progress = 0;\n  errorMessage = null;\n  // Property to control drag-over visual feedback\n  isDragging = false;\n  // Mode selection for image optimization\n  mode = 'compress';\n  // Mode-specific settings\n  resizeWidth = null;\n  resizeHeight = null;\n  convertFormat = '';\n  cropX = null;\n  cropY = null;\n  cropWidth = null;\n  cropHeight = null;\n  downloadedFileName = '';\n  constructor(http, sanitizer) {\n    this.http = http;\n    this.sanitizer = sanitizer;\n  }\n  /**\n   * Triggers the hidden file input element click.\n   * This method is called by the upload-zone in the HTML.\n   */\n  triggerFileInput() {\n    this.fileInput.nativeElement.click();\n  }\n  /**\n   * Prevents default browser behaviors for drag events.\n   * This method is used by dragover and dragleave events.\n   * @param event The DOM event.\n   */\n  preventDefaults(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  /**\n   * Handles the 'dragover' event for the single file upload area.\n   * Sets isDragging to true to apply visual feedback.\n   * @param event The DragEvent.\n   */\n  onDragOverSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = true;\n  }\n  /**\n   * Handles the 'dragleave' event for the single file upload area.\n   * Sets isDragging to false to remove visual feedback.\n   * @param event The DragEvent.\n   */\n  onDragLeaveSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = false;\n  }\n  /**\n   * Handles files dropped onto the single file drag-and-drop area.\n   * @param event The DragEvent.\n   */\n  onDropSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = false; // Reset drag state\n    const file = event.dataTransfer?.files?.[0];\n    if (file) {\n      if (file.type.startsWith('image/')) {\n        this.setFile(file);\n      } else {\n        this.errorMessage = 'Please drop an image file (JPG, PNG, WebP, GIF, BMP).';\n        this.resetSingleFile(); // Use resetSingleFile for consistency\n      }\n    }\n  }\n  /**\n   * Handles file selection from the single file input element.\n   * @param event The change event from the file input.\n   */\n  onFileSelectedSingle(event) {\n    const input = event.target;\n    const file = input.files?.[0];\n    if (file) this.setFile(file);\n  }\n  /**\n   * Sets the selected file and prepares for upload, resetting other states.\n   * This is the core logic for setting a file, used by both direct selection and drag/drop.\n   * @param file The File object to set.\n   */\n  setFile(file) {\n    this.revokeObjectUrls(); // Revoke previous object URLs to free up memory\n    this.selectedFile = file;\n    this.previewUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(file));\n    this.originalSize = file.size;\n    // Reset all processed/downloaded states and error messages\n    this.compressedUrl = '';\n    this.blobUrl = '';\n    this.downloadUrl = ''; // Clear downloadUrl on new file selection\n    this.compressedSize = 0;\n    this.progress = 0;\n    this.downloadedFileName = '';\n    this.errorMessage = null;\n    // Reset all mode-specific input fields\n    this.resizeWidth = null;\n    this.resizeHeight = null;\n    this.convertFormat = '';\n    this.cropX = null;\n    this.cropY = null;\n    this.cropWidth = null;\n    this.cropHeight = null;\n  }\n  /**\n   * Gets the appropriate label for the action button based on the current mode.\n   * @returns The button label string.\n   */\n  getButtonLabel() {\n    switch (this.mode) {\n      case 'resize':\n        return 'üìê Resize Image';\n      case 'convert':\n        return 'üîÑ Convert Image';\n      case 'crop':\n        return '‚úÇÔ∏è Crop Image';\n      default:\n        return '‚ö° Compress Image';\n    }\n  }\n  /**\n   * Gets the appropriate label for the result size display based on the current mode.\n   * @returns The result label string.\n   */\n  getResultLabel() {\n    switch (this.mode) {\n      case 'compress':\n        return 'Optimized Size';\n      case 'resize':\n        return 'Resized Size';\n      case 'convert':\n        return 'Converted Size';\n      case 'crop':\n        return 'Cropped Size';\n      default:\n        return 'Processed Size';\n    }\n  }\n  /**\n   * Initiates the upload and processing of the selected image based on the current mode.\n   * This method is called by the main action button (e.g., \"Convert to WORD\" or \"Compress Image\").\n   */\n  uploadSingleFile() {\n    if (!this.selectedFile) {\n      this.errorMessage = 'Please select an image first.';\n      return;\n    }\n    this.errorMessage = null; // Clear previous error messages\n    this.compressedUrl = '';\n    this.compressedSize = 0;\n    this.blobUrl = '';\n    this.downloadUrl = ''; // Clear downloadUrl before new upload\n    this.downloadedFileName = '';\n    this.progress = 0;\n    const formData = new FormData();\n    formData.append('file', this.selectedFile);\n    let endpoint = '';\n    if (this.mode === 'resize') {\n      if (this.resizeWidth === null || this.resizeHeight === null || this.resizeWidth <= 0 || this.resizeHeight <= 0) {\n        this.errorMessage = 'Resize Error: Please enter valid positive width and height.';\n        return;\n      }\n      formData.append('width', this.resizeWidth.toString());\n      formData.append('height', this.resizeHeight.toString());\n      endpoint = `${environment.apiUrl}/resize-image`;\n    } else if (this.mode === 'convert') {\n      if (!this.convertFormat) {\n        this.errorMessage = 'Convert Error: Please select a target format.';\n        return;\n      }\n      formData.append('target_format', this.convertFormat);\n      endpoint = `${environment.apiUrl}/convert-image`;\n    } else if (this.mode === 'crop') {\n      if (this.cropX === null || this.cropY === null || this.cropWidth === null || this.cropHeight === null || this.cropWidth <= 0 || this.cropHeight <= 0) {\n        this.errorMessage = 'Crop Error: Please enter valid positive crop dimensions (width, height) and coordinates (x, y).';\n        return;\n      }\n      formData.append('x', this.cropX.toString());\n      formData.append('y', this.cropY.toString());\n      formData.append('width', this.cropWidth.toString());\n      formData.append('height', this.cropHeight.toString());\n      endpoint = `${environment.apiUrl}/crop-image`;\n    } else {\n      endpoint = `${environment.apiUrl}/compress-image`;\n    }\n    this.http.post(endpoint, formData, {\n      reportProgress: true,\n      observe: 'events',\n      responseType: 'blob'\n    }).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress && event.total) {\n        this.progress = Math.round(event.loaded / event.total * 100);\n      }\n      if (event.type === HttpEventType.Response) {\n        const blob = new Blob([event.body], {\n          type: event.body?.type || 'image/jpeg'\n        });\n        this.compressedSize = blob.size;\n        this.revokeObjectUrls(true); // Revoke only compressedUrl/blobUrl\n        this.blobUrl = URL.createObjectURL(blob);\n        this.compressedUrl = this.sanitizer.bypassSecurityTrustUrl(this.blobUrl);\n        this.downloadUrl = this.blobUrl; // Set downloadUrl on success\n        // Pass the actual blob type to getDownloadName for accurate extension\n        this.downloadedFileName = this.getDownloadName(blob.type);\n        this.progress = 100;\n        // Auto download\n        const a = document.createElement('a');\n        a.href = this.blobUrl;\n        a.download = this.downloadedFileName;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n      }\n    }, error => {\n      console.error('Image processing failed:', error);\n      this.progress = 0;\n      this.errorMessage = `Processing failed: ${error.message || 'An unknown error occurred.'}`;\n    });\n  }\n  /**\n   * Generates a suitable download file name based on the mode and actual output MIME type.\n   * @param outputMimeType The actual MIME type of the processed image blob from the backend.\n   * @returns The download file name.\n   */\n  getDownloadName(outputMimeType) {\n    const originalName = this.selectedFile?.name || 'image';\n    const lastDotIndex = originalName.lastIndexOf('.');\n    let baseName = originalName.substring(0, lastDotIndex > -1 ? lastDotIndex : originalName.length);\n    let suffix = '';\n    let outputExtension = '';\n    // Determine suffix based on mode\n    switch (this.mode) {\n      case 'compress':\n        suffix = 'compressed';\n        break;\n      case 'resize':\n        suffix = 'resized';\n        break;\n      case 'convert':\n        suffix = 'converted';\n        break;\n      case 'crop':\n        suffix = 'cropped';\n        break;\n      default:\n        suffix = 'processed';\n    }\n    // Determine output extension based on MIME type first\n    if (outputMimeType.includes('jpeg') || outputMimeType.includes('jpg')) {\n      outputExtension = 'jpeg';\n    } else if (outputMimeType.includes('png')) {\n      outputExtension = 'png';\n    } else if (outputMimeType.includes('webp')) {\n      outputExtension = 'webp';\n    } else if (outputMimeType.includes('gif')) {\n      outputExtension = 'gif';\n    } else if (outputMimeType.includes('bmp')) {\n      outputExtension = 'bmp';\n    } else {\n      // Fallback: If MIME type is not specific, try to use the original extension\n      outputExtension = originalName.substring(lastDotIndex + 1).toLowerCase() || 'jpeg';\n    }\n    // Special handling for 'convert' mode: prioritize the user's selected format for the filename\n    // This ensures that if a user explicitly chose to convert to PNG, the downloaded file\n    // is named with a .png extension, even if the backend's MIME type might be generic or\n    // if there's a slight mismatch. This prioritizes user intent for the filename.\n    if (this.mode === 'convert' && this.convertFormat) {\n      outputExtension = this.convertFormat.toLowerCase();\n    }\n    return `${baseName}_${suffix}.${outputExtension}`;\n  }\n  /**\n   * Clears the current file selection and resets all related states.\n   * This method is called by the \"Clear\" button and \"Start New\" / \"Try Again\" buttons.\n   */\n  resetSingleFile() {\n    this.revokeObjectUrls();\n    this.selectedFile = null;\n    this.previewUrl = '';\n    this.blobUrl = '';\n    this.compressedUrl = '';\n    this.downloadUrl = ''; // Clear downloadUrl on reset\n    this.progress = 0;\n    this.compressedSize = 0;\n    this.originalSize = 0;\n    this.downloadedFileName = '';\n    this.errorMessage = null;\n    this.resizeWidth = null;\n    this.resizeHeight = null;\n    this.convertFormat = '';\n    this.cropX = null;\n    this.cropY = null;\n    this.cropWidth = null;\n    this.cropHeight = null;\n    if (this.fileInput && this.fileInput.nativeElement) {\n      this.fileInput.nativeElement.value = '';\n    }\n  }\n  /**\n   * Helper to revoke Object URLs to prevent memory leaks.\n   * @param onlyCompressed If true, only revokes compressedUrl/blobUrl. Otherwise, revokes all.\n   */\n  revokeObjectUrls(onlyCompressed = false) {\n    if (!onlyCompressed && this.previewUrl) {\n      const urlString = this.previewUrl.changingThisBreaksApplicationSecurity;\n      if (urlString && urlString.startsWith('blob:')) {\n        URL.revokeObjectURL(urlString);\n      }\n    }\n    if (this.blobUrl && this.blobUrl.startsWith('blob:')) {\n      URL.revokeObjectURL(this.blobUrl);\n    }\n  }\n  // Lifecycle hook to clean up object URLs when component is destroyed\n  ngOnDestroy() {\n    this.revokeObjectUrls();\n  }\n};\n__decorate([ViewChild('fileInputSingle'), __metadata(\"design:type\", ElementRef)], CompressImageComponent.prototype, \"fileInput\", void 0);\nCompressImageComponent = __decorate([Component({\n  selector: 'app-compress-image',\n  templateUrl: './compress-image.component.html',\n  styleUrls: ['./compress-image.component.css']\n}), __metadata(\"design:paramtypes\", [HttpClient, DomSanitizer])], CompressImageComponent);\nexport { CompressImageComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}