{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"fileInputSingle\"];\nconst _c1 = [\"fileInputMultiple\"];\nfunction PdfToolsComponent_main_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"main\", 4)(1, \"div\", 5);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_main_6_Template_div_click_1_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.setActiveTool(\"jpg-to-pdf\"));\n    });\n    i0.ɵɵelementStart(2, \"div\", 6);\n    i0.ɵɵelement(3, \"i\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"h3\", 8);\n    i0.ɵɵtext(5, \"JPG/PNG to PDF\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 9);\n    i0.ɵɵtext(7, \"Convert JPG, PNG, and other images to a PDF file.\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 5);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_main_6_Template_div_click_8_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.setActiveTool(\"pdf-to-word\"));\n    });\n    i0.ɵɵelementStart(9, \"div\", 10);\n    i0.ɵɵelement(10, \"i\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"h3\", 8);\n    i0.ɵɵtext(12, \"PDF to Word\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"p\", 9);\n    i0.ɵɵtext(14, \"Easily convert your PDF files into editable DOCX documents.\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"div\", 5);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_main_6_Template_div_click_15_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.setActiveTool(\"word-to-pdf\"));\n    });\n    i0.ɵɵelementStart(16, \"div\", 12);\n    i0.ɵɵelement(17, \"i\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"h3\", 8);\n    i0.ɵɵtext(19, \"Word to PDF\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"p\", 9);\n    i0.ɵɵtext(21, \"Make DOC and DOCX files easy to read by converting them to PDF.\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(22, \"div\", 5);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_main_6_Template_div_click_22_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.setActiveTool(\"merge-images-to-pdf\"));\n    });\n    i0.ɵɵelementStart(23, \"div\", 14);\n    i0.ɵɵelement(24, \"i\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"h3\", 8);\n    i0.ɵɵtext(26, \"Merge Images to PDF\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"p\", 9);\n    i0.ɵɵtext(28, \"Combine multiple images into a single, organized PDF.\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction PdfToolsComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 16)(1, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_div_7_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.setActiveTool(null));\n    });\n    i0.ɵɵelement(2, \"i\", 18);\n    i0.ɵɵtext(3, \" All Tools \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"section\", 19)(5, \"section\", 20)(6, \"section\", 21)(7, \"section\", 22);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵclassProp(\"active\", ctx_r1.activeTool === \"jpg-to-pdf\");\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"active\", ctx_r1.activeTool === \"pdf-to-word\");\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"active\", ctx_r1.activeTool === \"word-to-pdf\");\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"active\", ctx_r1.activeTool === \"merge-images-to-pdf\");\n  }\n}\nexport let PdfToolsComponent = /*#__PURE__*/(() => {\n  class PdfToolsComponent {\n    http;\n    route;\n    // --- Common Properties ---\n    // `activeTool` will control which section is displayed in the HTML.\n    // Initialize to the default view you want to show first.\n    activeTool = 'jpg-to-pdf'; // This replaces your old 'mode' for UI switching.\n    progress = 0;\n    downloadUrl = '';\n    errorMessage = '';\n    uploadSubscription = null;\n    // --- Properties for Single File Conversions (JPG/PNG to PDF, PDF to Word, Word to PDF) ---\n    selectedFileSingle = null;\n    isDragging = false; // For drag-over effect, used by both single and multiple\n    fileInputSingle;\n    // --- Properties for Merge Images to PDF ---\n    selectedFilesMultiple = [];\n    previewUrlMultiple = ''; // Preview for the first image of multiple files\n    fileInputMultiple;\n    // Usage Control for Merge Images to PDF (as provided in your code)\n    isPremiumUserMerge = false; // Can be true if user logs in as premium\n    freeUsesLimitMerge = 999999; // Set to a very high number for effectively unlimited daily merges\n    freeUsesRemainingMerge = this.freeUsesLimitMerge; // Will always be high\n    freeFileLimitMerge = 20; // Max files for free users per merge\n    constructor(http, route) {\n      this.http = http;\n      this.route = route;\n    }\n    ngOnInit() {\n      // Initialize usage limits for merge images tool.\n      // If you plan to load user status from an API, call it here.\n      this.checkUserStatusMerge();\n      // The 'mode' property from the URL is no longer directly used for UI switching\n      // but could be used to pre-select a tool if you wanted deep linking.\n      // For now, `activeTool` manages the visible section.\n    }\n    ngOnDestroy() {\n      if (this.uploadSubscription) {\n        this.uploadSubscription.unsubscribe();\n        this.uploadSubscription = null;\n      }\n    }\n    // --- UI Switching Method (Call from your navigation buttons in HTML) ---\n    setActiveTool(toolName) {\n      this.activeTool = toolName;\n      this.reset(); // Reset states when switching tools for a clean slate\n    }\n    // --- Helper for file input accept attribute ---\n    getFileAcceptTypes(mode) {\n      switch (mode) {\n        case 'jpg-to-pdf':\n          return 'image/jpeg,image/png,image/gif,image/bmp';\n        // Specific image MIME types\n        case 'pdf-to-word':\n          return 'application/pdf';\n        case 'word-to-pdf':\n          return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/msword';\n        // .docx and .doc\n        case 'merge-images-to-pdf':\n          return 'image/jpeg,image/png,image/gif,image/bmp';\n        // Specific image MIME types for merge\n        default:\n          return '*/*';\n        // Fallback\n      }\n    }\n    // --- Global Reset Logic ---\n    // This resets EVERYTHING, ideal when switching tools or starting fresh after success/error.\n    reset() {\n      if (this.uploadSubscription) {\n        this.uploadSubscription.unsubscribe();\n        this.uploadSubscription = null;\n      }\n      // Reset single file properties\n      this.selectedFileSingle = null;\n      if (this.fileInputSingle && this.fileInputSingle.nativeElement) {\n        this.fileInputSingle.nativeElement.value = ''; // Clear single file input\n      }\n      // Reset multiple files properties\n      this.selectedFilesMultiple = [];\n      this.previewUrlMultiple = '';\n      if (this.fileInputMultiple && this.fileInputMultiple.nativeElement) {\n        this.fileInputMultiple.nativeElement.value = ''; // Clear multiple file input\n      }\n      // Reset common properties\n      this.progress = 0;\n      this.downloadUrl = '';\n      this.errorMessage = '';\n      this.isDragging = false; // Always reset dragging state\n      this.freeUsesRemainingMerge = this.freeUsesLimitMerge; // Reset merge usage to high limit\n    }\n    // --- Reset specific to single file input, used when clearing only that input ---\n    resetSingleFile() {\n      this.selectedFileSingle = null;\n      this.progress = 0;\n      this.downloadUrl = '';\n      this.errorMessage = '';\n      this.isDragging = false;\n      if (this.fileInputSingle) {\n        this.fileInputSingle.nativeElement.value = '';\n      }\n    }\n    // --- Reset specific to multiple files input, used when clearing only that input ---\n    resetMultipleFiles() {\n      this.selectedFilesMultiple = [];\n      this.previewUrlMultiple = '';\n      this.progress = 0;\n      this.downloadUrl = '';\n      this.errorMessage = '';\n      this.isDragging = false;\n      if (this.fileInputMultiple) {\n        this.fileInputMultiple.nativeElement.value = '';\n      }\n    }\n    // --- Common State Reset for New Upload Initiation ---\n    // This is called before any new upload starts to clear previous results/errors.\n    resetCommonStatesForNewUpload() {\n      this.progress = 0;\n      this.downloadUrl = '';\n      this.errorMessage = '';\n      this.isDragging = false; // Ensure dragging state is reset\n      // Important: Do NOT clear the file inputs or selectedFile/Multiple here.\n      // They should remain selected until a new file is chosen or a manual reset.\n    }\n    // --- Single File Conversion Methods ---\n    onFileSelectedSingle(event) {\n      const input = event.target;\n      const file = input.files?.[0] || null;\n      if (file) {\n        const acceptedTypes = this.getFileAcceptTypes(this.activeTool); // Use activeTool here\n        const isFileTypeAccepted = this.checkFileType(file, acceptedTypes);\n        if (isFileTypeAccepted) {\n          this.selectedFileSingle = file;\n          this.resetCommonStatesForNewUpload(); // Reset states common to all uploads\n          this.selectedFilesMultiple = []; // Ensure multiple is cleared when a single file is selected\n          this.previewUrlMultiple = ''; // Ensure multiple preview is cleared\n        } else {\n          this.errorMessage = `Unsupported file type for this conversion. Please select a valid file (e.g., ${acceptedTypes}).`;\n          this.selectedFileSingle = null; // Clear invalid selection\n          if (this.fileInputSingle) {\n            this.fileInputSingle.nativeElement.value = ''; // Clear input visually\n          }\n        }\n      } else {\n        this.selectedFileSingle = null;\n        this.resetCommonStatesForNewUpload();\n      }\n    }\n    onDragOverSingle(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.isDragging = true;\n    }\n    onDragLeaveSingle(event) {\n      event.stopPropagation(); // Only stop propagation, don't preventDefault here\n      this.isDragging = false;\n    }\n    onDropSingle(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.isDragging = false; // Reset dragging state\n      const files = event.dataTransfer?.files;\n      if (files && files.length > 0) {\n        const file = files[0];\n        const acceptedTypes = this.getFileAcceptTypes(this.activeTool); // Use activeTool here\n        const isFileTypeAccepted = this.checkFileType(file, acceptedTypes);\n        if (isFileTypeAccepted) {\n          this.selectedFileSingle = file;\n          this.resetCommonStatesForNewUpload();\n          this.selectedFilesMultiple = []; // Ensure multiple is cleared\n          this.previewUrlMultiple = ''; // Ensure multiple preview is cleared\n        } else {\n          this.errorMessage = `Unsupported file type for this conversion. Please select a valid file (e.g., ${acceptedTypes}).`;\n          this.selectedFileSingle = null; // Clear invalid selection\n          if (this.fileInputSingle) {\n            this.fileInputSingle.nativeElement.value = ''; // Clear input visually\n          }\n        }\n      } else {\n        this.selectedFileSingle = null;\n        this.resetCommonStatesForNewUpload();\n      }\n    }\n    uploadSingleFile() {\n      if (!this.selectedFileSingle) {\n        this.errorMessage = 'Please select a file to convert.';\n        return;\n      }\n      this.resetCommonStatesForNewUpload(); // Reset before starting new upload\n      this.progress = 1; // Start progress bar immediately\n      const formData = new FormData();\n      formData.append('file', this.selectedFileSingle);\n      let apiUrl = '';\n      let mimeType = '';\n      let fileName = '';\n      switch (this.activeTool) {\n        // Use activeTool here\n        case 'jpg-to-pdf':\n          apiUrl = `${environment.apiUrl}/jpg-to-pdf`;\n          mimeType = 'application/pdf';\n          fileName = 'converted.pdf';\n          break;\n        case 'pdf-to-word':\n          apiUrl = `${environment.apiUrl}/pdf-to-word`;\n          mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n          fileName = 'converted.docx';\n          break;\n        case 'word-to-pdf':\n          apiUrl = `${environment.apiUrl}/word-to-pdf`;\n          mimeType = 'application/pdf';\n          fileName = 'converted.pdf';\n          break;\n        default:\n          this.errorMessage = 'Invalid conversion tool selected.';\n          this.reset();\n          return;\n      }\n      this.uploadSubscription = this.http.post(apiUrl, formData, {\n        responseType: 'blob',\n        reportProgress: true,\n        observe: 'events'\n      }).subscribe({\n        next: event => {\n          if (event.type === HttpEventType.UploadProgress && event.total) {\n            this.progress = Math.round(event.loaded / event.total * 100);\n          }\n          if (event.type === HttpEventType.Response) {\n            this.progress = 100; // Ensure 100% on completion\n            const blob = new Blob([event.body], {\n              type: mimeType\n            });\n            const url = URL.createObjectURL(blob);\n            this.downloadUrl = url; // Set download URL for success message\n            // Trigger download automatically\n            setTimeout(() => {\n              const anchor = document.createElement('a');\n              anchor.href = url;\n              anchor.download = fileName;\n              document.body.appendChild(anchor);\n              anchor.click();\n              document.body.removeChild(anchor);\n              URL.revokeObjectURL(url);\n              this.resetSingleFile(); // Reset specific to single file after download\n            }, 500); // Small delay to ensure UI updates\n          }\n        },\n        error: error => {\n          this.handleUploadError(error);\n          this.resetCommonStatesForNewUpload(); // Reset common states on error\n        },\n        complete: () => {\n          this.unsubscribeUpload();\n        }\n      });\n    }\n    // --- Merge Images to PDF Methods (Multiple Files) ---\n    onFilesSelectedMultiple(event) {\n      const input = event.target;\n      if (input.files) {\n        const filesArray = Array.from(input.files).filter(file => file.type.startsWith('image/'));\n        this.selectedFilesMultiple = filesArray;\n        this.resetCommonStatesForNewUpload(); // Reset common states\n        this.selectedFileSingle = null; // Ensure single file is cleared\n        if (this.selectedFilesMultiple.length > 0) {\n          const firstFile = this.selectedFilesMultiple[0];\n          const reader = new FileReader();\n          reader.onload = e => {\n            this.previewUrlMultiple = e.target.result;\n          };\n          reader.readAsDataURL(firstFile);\n        } else {\n          this.previewUrlMultiple = '';\n        }\n        this.checkMergeLimits(); // Check and update error message based on limits\n      }\n    }\n    // This handles dragover for multiple files. `preventDefaults` is called from HTML.\n    // We keep `isDragging` true during dragover.\n    onDragLeaveMultiple(event) {\n      event.stopPropagation();\n      this.isDragging = false;\n    }\n    onFilesDroppedMultiple(event) {\n      this.preventDefaults(event); // Already calls preventDefault & stopPropagation & sets isDragging=true\n      this.isDragging = false; // Reset dragging state\n      const files = event.dataTransfer?.files;\n      if (files && files.length > 0) {\n        const filesArray = Array.from(files).filter(file => file.type.startsWith('image/'));\n        this.selectedFilesMultiple = filesArray;\n        this.resetCommonStatesForNewUpload();\n        this.selectedFileSingle = null; // Ensure single file is cleared\n        if (this.selectedFilesMultiple.length > 0) {\n          const firstFile = this.selectedFilesMultiple[0];\n          const reader = new FileReader();\n          reader.onload = e => {\n            this.previewUrlMultiple = e.target.result;\n          };\n          reader.readAsDataURL(firstFile);\n        } else {\n          this.previewUrlMultiple = '';\n        }\n        this.checkMergeLimits(); // Check and update error message based on limits\n      }\n    }\n    // Combined preventDefaults for dragover/drop zones\n    preventDefaults(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      // Only set isDragging to true on dragover, not drop\n      if (event.type === 'dragover') {\n        this.isDragging = true;\n      }\n    }\n    checkUserStatusMerge() {\n      // Implement your actual user premium status check here\n      // For now, hardcoded to false as per your setup for \"effectively unlimited free merges\"\n      this.isPremiumUserMerge = false;\n    }\n    // A dedicated method to check and set merge related error messages\n    checkMergeLimits() {\n      this.errorMessage = ''; // Clear previous error\n      if (!this.isPremiumUserMerge) {\n        if (this.selectedFilesMultiple.length > this.freeFileLimitMerge) {\n          this.errorMessage = `Free users can merge up to ${this.freeFileLimitMerge} images at once.`;\n        }\n        // No check for freeUsesRemainingMerge here as it's effectively unlimited with 999999\n      }\n    }\n    // This method will decrement from a very large number, so it won't affect free users significantly\n    incrementDailyUsageMerge() {\n      if (!this.isPremiumUserMerge) {\n        this.freeUsesRemainingMerge--;\n        // This decrement is mostly for theoretical tracking if you ever revert limits\n      }\n    }\n    uploadMultipleFiles() {\n      if (!this.selectedFilesMultiple.length) {\n        this.errorMessage = 'Please select images to merge.';\n        return;\n      }\n      // Re-check limits right before upload to ensure no last-second changes\n      this.checkMergeLimits();\n      if (this.errorMessage) {\n        // If checkMergeLimits set an error, stop\n        return;\n      }\n      // Additional check for freeUsesRemainingMerge, although it's very high\n      if (!this.isPremiumUserMerge && this.freeUsesRemainingMerge <= 0) {\n        this.errorMessage = 'Daily free merge limit reached! Please upgrade to Premium for unlimited use.';\n        return;\n      }\n      this.resetCommonStatesForNewUpload(); // Reset before starting new upload\n      this.progress = 1; // Start progress bar immediately\n      const formData = new FormData();\n      this.selectedFilesMultiple.forEach(file => formData.append('files', file)); // 'files' is the backend expected field name\n      this.uploadSubscription = this.http.post(`${environment.apiUrl}/merge-images-to-pdf`, formData, {\n        responseType: 'blob',\n        reportProgress: true,\n        observe: 'events'\n      }).subscribe({\n        next: event => {\n          if (event.type === HttpEventType.UploadProgress && event.total) {\n            this.progress = Math.round(event.loaded / event.total * 100);\n          }\n          if (event.type === HttpEventType.Response) {\n            this.progress = 100; // Ensure 100% on completion\n            if (event.body) {\n              const blob = new Blob([event.body], {\n                type: 'application/pdf'\n              });\n              const url = URL.createObjectURL(blob);\n              this.downloadUrl = url; // Set download URL for success message\n              // Programmatically trigger download\n              setTimeout(() => {\n                const link = document.createElement('a');\n                link.href = url;\n                link.download = 'merged_images.pdf'; // Specific name for merged PDF\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n                URL.revokeObjectURL(url);\n                // Do NOT reset the component fully here. Let the user see the download link\n                // and manually click \"Start New Conversion\".\n                // The `downloadUrl` being set ensures the download section appears.\n              }, 500);\n              this.incrementDailyUsageMerge(); // Increment usage upon successful merge\n            } else {\n              this.errorMessage = 'PDF creation failed: Empty response from server.';\n              this.progress = 0; // Reset progress on empty response error\n            }\n          }\n        },\n        error: error => {\n          this.handleUploadError(error);\n          this.resetCommonStatesForNewUpload(); // Reset common states on error\n        },\n        complete: () => {\n          this.unsubscribeUpload();\n        }\n      });\n    }\n    // --- Utility methods ---\n    handleUploadError(error) {\n      console.error('Upload error:', error);\n      this.progress = 0; // Reset progress on error\n      this.downloadUrl = ''; // Clear any download URL on error\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error or network error\n        this.errorMessage = `An error occurred: ${error.error.message}`;\n      } else {\n        // Backend error\n        if (error.error instanceof Blob && error.error.type === 'application/json') {\n          // Try to parse the error message from a JSON blob\n          const reader = new FileReader();\n          reader.onload = () => {\n            try {\n              const errorBody = JSON.parse(reader.result);\n              this.errorMessage = errorBody.detail || errorBody.message || `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n            } catch (e) {\n              this.errorMessage = `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n            }\n          };\n          reader.readAsText(error.error);\n        } else {\n          // Handle non-JSON or other error formats\n          this.errorMessage = `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n        }\n        // Specific error status messages\n        if (error.status === 0) {\n          this.errorMessage = 'Could not connect to the server. Please ensure the backend is running and accessible.';\n        }\n        if (error.status === 403) {\n          this.errorMessage = this.errorMessage || 'You have reached your daily limit or exceeded file count for the free plan.';\n        }\n        // Add more specific status code handling here as needed (e.g., 400, 404, 500)\n      }\n    }\n    unsubscribeUpload() {\n      if (this.uploadSubscription) {\n        this.uploadSubscription.unsubscribe();\n        this.uploadSubscription = null;\n      }\n    }\n    // Helper for more robust file type checking by MIME or extension\n    checkFileType(file, acceptedTypes) {\n      const mimeTypes = acceptedTypes.split(',').map(type => type.trim().toLowerCase());\n      const fileNameLower = file.name.toLowerCase();\n      // Check direct MIME type match\n      if (mimeTypes.includes(file.type.toLowerCase())) {\n        return true;\n      }\n      // Check for broad image type if 'image/*' is accepted\n      if (mimeTypes.includes('image/*') && file.type.startsWith('image/')) {\n        return true;\n      }\n      // Check by common file extensions if MIME types don't fully cover\n      if (mimeTypes.includes('application/pdf') && fileNameLower.endsWith('.pdf')) return true;\n      if (mimeTypes.includes('application/vnd.openxmlformats-officedocument.wordprocessingml.document') && fileNameLower.endsWith('.docx')) return true;\n      if (mimeTypes.includes('application/msword') && fileNameLower.endsWith('.doc')) return true;\n      // Specific image extension checks if 'image/*' isn't used or for more rigor\n      if (mimeTypes.includes('image/jpeg') && (fileNameLower.endsWith('.jpeg') || fileNameLower.endsWith('.jpg'))) return true;\n      if (mimeTypes.includes('image/png') && fileNameLower.endsWith('.png')) return true;\n      if (mimeTypes.includes('image/gif') && fileNameLower.endsWith('.gif')) return true;\n      if (mimeTypes.includes('image/bmp') && fileNameLower.endsWith('.bmp')) return true;\n      // If '*/*' is accepted, then all files are technically accepted\n      if (mimeTypes.includes('*/*')) return true;\n      return false;\n    }\n    static ɵfac = function PdfToolsComponent_Factory(t) {\n      return new (t || PdfToolsComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PdfToolsComponent,\n      selectors: [[\"app-pdf-tools\"]],\n      viewQuery: function PdfToolsComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInputSingle = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInputMultiple = _t.first);\n        }\n      },\n      decls: 8,\n      vars: 2,\n      consts: [[1, \"docuflow-container\"], [1, \"main-header\"], [\"class\", \"tool-grid-container\", 4, \"ngIf\"], [\"class\", \"tool-workspace-wrapper\", 4, \"ngIf\"], [1, \"tool-grid-container\"], [1, \"tool-card\", 3, \"click\"], [1, \"tool-icon-wrapper\", \"bg-orange\"], [1, \"fas\", \"fa-image\"], [1, \"tool-title\"], [1, \"tool-description\"], [1, \"tool-icon-wrapper\", \"bg-blue\"], [1, \"fas\", \"fa-file-word\"], [1, \"tool-icon-wrapper\", \"bg-red\"], [1, \"fas\", \"fa-file-pdf\"], [1, \"tool-icon-wrapper\", \"bg-green\"], [1, \"fas\", \"fa-images\"], [1, \"tool-workspace-wrapper\"], [1, \"back-to-grid-btn\", 3, \"click\"], [1, \"fas\", \"fa-arrow-left\"], [\"id\", \"jpg-to-pdf-section\", 1, \"tool-section\"], [\"id\", \"pdf-to-word-section\", 1, \"tool-section\"], [\"id\", \"word-to-pdf-section\", 1, \"tool-section\"], [\"id\", \"merge-images-to-pdf-section\", 1, \"tool-section\"]],\n      template: function PdfToolsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"header\", 1)(2, \"h1\");\n          i0.ɵɵtext(3, \"\\uD83D\\uDE80 DocuFlow\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"p\");\n          i0.ɵɵtext(5, \"Every tool you need to work with your files, all in one place.\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(6, PdfToolsComponent_main_6_Template, 29, 0, \"main\", 2)(7, PdfToolsComponent_div_7_Template, 8, 8, \"div\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", !ctx.activeTool);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.activeTool);\n        }\n      },\n      dependencies: [i3.NgIf],\n      styles: [\"@import\\\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap\\\";body[_ngcontent-%COMP%]{font-family:Roboto,sans-serif;background-color:#f4f7f9;color:#333;margin:0;padding:2rem}.docuflow-container[_ngcontent-%COMP%]{max-width:1100px;margin:0 auto}.main-header[_ngcontent-%COMP%]{text-align:center;margin-bottom:3rem}.main-header[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{font-size:2.8rem;font-weight:700;color:#1e2a3b}.main-header[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:1.2rem;color:#6a737d}.tool-grid-container[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(auto-fill,minmax(260px,1fr));gap:1.5rem}.tool-card[_ngcontent-%COMP%]{background:#fff;border:1px solid #e0e6ed;border-radius:8px;padding:1.5rem;text-align:left;cursor:pointer;transition:transform .2s ease,box-shadow .2s ease;display:flex;flex-direction:column}.tool-card[_ngcontent-%COMP%]:hover{transform:translateY(-5px);box-shadow:0 10px 20px #00000012}.tool-icon-wrapper[_ngcontent-%COMP%]{width:60px;height:60px;border-radius:8px;display:flex;justify-content:center;align-items:center;margin-bottom:1rem}.tool-icon-wrapper[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{color:#fff;font-size:1.8rem}.tool-title[_ngcontent-%COMP%]{font-size:1.3rem;font-weight:700;color:#1e2a3b;margin:0 0 .5rem}.tool-description[_ngcontent-%COMP%]{font-size:1rem;color:#6a737d;line-height:1.5;margin:0;flex-grow:1}.bg-red[_ngcontent-%COMP%]{background-color:#e63946}.bg-blue[_ngcontent-%COMP%]{background-color:#457b9d}.bg-green[_ngcontent-%COMP%]{background-color:#52b788}.bg-orange[_ngcontent-%COMP%]{background-color:#f77f00}.tool-workspace-wrapper[_ngcontent-%COMP%]{background:#fff;padding:2rem;border-radius:8px;border:1px solid #e0e6ed}.back-to-grid-btn[_ngcontent-%COMP%]{background-color:#f4f7f9;color:#333;border:1px solid #d1d9e2;padding:.7rem 1.5rem;font-size:1rem;font-weight:500;border-radius:6px;cursor:pointer;margin-bottom:2rem;display:inline-flex;align-items:center;gap:.5rem;transition:background-color .2s ease}.back-to-grid-btn[_ngcontent-%COMP%]:hover{background-color:#e9eef3}.tool-section[_ngcontent-%COMP%]{display:none}.tool-section.active[_ngcontent-%COMP%]{display:block;animation:_ngcontent-%COMP%_fadeIn .5s ease}@keyframes _ngcontent-%COMP%_fadeIn{0%{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}\"]\n    });\n  }\n  return PdfToolsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}