{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { environment } from 'src/environments/environment';\nlet CompressImageComponent = class CompressImageComponent {\n  http;\n  sanitizer;\n  fileInput;\n  activeTool = null;\n  selectedFile = null;\n  previewUrl = '';\n  blobUrl = '';\n  downloadUrl = '';\n  originalSize = 0;\n  compressedSize = 0;\n  progress = 0;\n  errorMessage = null;\n  isDragging = false;\n  downloadedFileName = '';\n  constructor(http, sanitizer) {\n    this.http = http;\n    this.sanitizer = sanitizer;\n  }\n  ngOnInit() {\n    this.activeTool = null; // default\n  }\n  setActiveTool(tool) {\n    console.log('Tool changed to:', tool);\n    this.activeTool = tool;\n    this.resetSingleFile();\n  }\n  triggerFileInput() {\n    this.fileInput.nativeElement.click();\n  }\n  preventDefaults(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  onDragOverSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = true;\n  }\n  onDragLeaveSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = false;\n  }\n  onDropSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = false;\n    const file = event.dataTransfer?.files?.[0];\n    if (file?.type.startsWith('image/')) {\n      this.setFile(file);\n    } else {\n      this.errorMessage = 'Please drop a valid image file.';\n      this.resetSingleFile();\n    }\n  }\n  onFileSelectedSingle(event) {\n    const input = event.target;\n    const file = input.files?.[0];\n    if (file) this.setFile(file);\n  }\n  setFile(file) {\n    this.revokeObjectUrls();\n    this.selectedFile = file;\n    this.previewUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(file));\n    this.originalSize = file.size;\n    this.downloadUrl = '';\n    this.progress = 0;\n    this.compressedSize = 0;\n    this.errorMessage = null;\n  }\n  uploadSingleFile() {\n    if (!this.selectedFile) {\n      this.errorMessage = 'Please select an image.';\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', this.selectedFile);\n    this.http.post(`${environment.apiUrl}/compress-image`, formData, {\n      reportProgress: true,\n      observe: 'events',\n      responseType: 'blob'\n    }).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress && event.total) {\n        this.progress = Math.round(event.loaded / event.total * 100);\n      }\n      if (event.type === HttpEventType.Response) {\n        const blob = new Blob([event.body], {\n          type: 'image/jpeg'\n        });\n        this.compressedSize = blob.size;\n        this.blobUrl = URL.createObjectURL(blob);\n        this.downloadUrl = this.blobUrl;\n        this.downloadedFileName = 'compressed_' + this.selectedFile.name;\n        this.progress = 100;\n      }\n    }, err => {\n      this.errorMessage = 'Compression failed.';\n      this.progress = 0;\n    });\n  }\n  resetSingleFile() {\n    this.selectedFile = null;\n    this.previewUrl = '';\n    this.downloadUrl = '';\n    this.progress = 0;\n    this.compressedSize = 0;\n    this.originalSize = 0;\n    this.errorMessage = null;\n    if (this.fileInput?.nativeElement) {\n      this.fileInput.nativeElement.value = '';\n    }\n    this.revokeObjectUrls();\n  }\n  revokeObjectUrls() {\n    if (this.blobUrl?.startsWith('blob:')) {\n      URL.revokeObjectURL(this.blobUrl);\n    }\n    if (this.previewUrl && this.previewUrl.changingThisBreaksApplicationSecurity) {\n      URL.revokeObjectURL(this.previewUrl.changingThisBreaksApplicationSecurity);\n    }\n  }\n};\n__decorate([ViewChild('fileInputSingle'), __metadata(\"design:type\", ElementRef)], CompressImageComponent.prototype, \"fileInput\", void 0);\nCompressImageComponent = __decorate([Component({\n  selector: 'app-compress-image',\n  templateUrl: './compress-image.component.html',\n  styleUrls: ['./compress-image.component.css']\n}), __metadata(\"design:paramtypes\", [HttpClient, DomSanitizer])], CompressImageComponent);\nexport { CompressImageComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}