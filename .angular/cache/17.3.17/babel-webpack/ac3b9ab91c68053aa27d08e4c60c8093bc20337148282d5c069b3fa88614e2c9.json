{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"fileInputJpgToPdf\"];\nconst _c1 = [\"fileInputPdfToWord\"];\nconst _c2 = [\"fileInputWordToPdf\"];\nconst _c3 = [\"fileInputMergeImagesToPdf\"];\nconst _c4 = (a0, a1) => ({\n  \"animate__pulse\": a0,\n  \"animate__flash\": a1\n});\nfunction PdfToolsComponent_section_49_ng_container_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"i\", 38);\n    i0.ɵɵelementStart(2, \"span\", 39);\n    i0.ɵɵtext(3, \"Click to summon or Drag & Drop your Image (JPG, PNG)\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction PdfToolsComponent_section_49_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"span\", 40);\n    i0.ɵɵelement(2, \"i\", 41);\n    i0.ɵɵelementStart(3, \"span\", 42);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r1.selectedFileJpgToPdf.name);\n  }\n}\nfunction PdfToolsComponent_section_49_ng_container_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"i\", 43);\n    i0.ɵɵtext(2, \" Initiate Transformation \");\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction PdfToolsComponent_section_49_ng_container_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"i\", 44);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Weaving PDF... \", ctx_r1.progressJpgToPdf, \"% \");\n  }\n}\nfunction PdfToolsComponent_section_49_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 45);\n    i0.ɵɵelement(1, \"div\", 46);\n    i0.ɵɵelementStart(2, \"p\", 47);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"width\", ctx_r1.progressJpgToPdf, \"%\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Astral Progress: \", ctx_r1.progressJpgToPdf, \"%\");\n  }\n}\nfunction PdfToolsComponent_section_49_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 48)(1, \"p\", 49);\n    i0.ɵɵtext(2, \"\\u2705 Transformation complete! Your PDF is manifested.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"a\", 50);\n    i0.ɵɵtext(4, \"\\u2B07 Download PDF Orb\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_section_49_div_16_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      ctx_r1.reset(\"jpg-to-pdf\");\n      return i0.ɵɵresetView(ctx_r1.selectedTool = null);\n    });\n    i0.ɵɵtext(6, \"Start New Ritual\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"href\", ctx_r1.downloadUrlJpgToPdf, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction PdfToolsComponent_section_49_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 52)(1, \"p\", 53);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_section_49_div_17_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.reset(\"jpg-to-pdf\"));\n    });\n    i0.ɵɵtext(4, \"Retry Incantation\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\\u274C Error in the Aether: \", ctx_r1.errorMessageJpgToPdf, \"\");\n  }\n}\nfunction PdfToolsComponent_section_49_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\", 27)(1, \"div\", 28)(2, \"h2\");\n    i0.ɵɵtext(3, \"\\uD83D\\uDDBC\\uFE0F JPG/PNG to PDF Conversion\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\", 29);\n    i0.ɵɵtext(5, \"Upload your images and we'll weave them into a perfect PDF.\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"label\", 30);\n    i0.ɵɵlistener(\"dragover\", function PdfToolsComponent_section_49_Template_label_dragover_6_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onDragOverSingle($event, \"jpg-to-pdf\"));\n    })(\"dragleave\", function PdfToolsComponent_section_49_Template_label_dragleave_6_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onDragLeaveSingle($event, \"jpg-to-pdf\"));\n    })(\"drop\", function PdfToolsComponent_section_49_Template_label_drop_6_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onDropSingle($event, \"jpg-to-pdf\"));\n    });\n    i0.ɵɵelementStart(7, \"input\", 31, 0);\n    i0.ɵɵlistener(\"change\", function PdfToolsComponent_section_49_Template_input_change_7_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onFileSelectedSingle($event, \"jpg-to-pdf\"));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 32);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_section_49_Template_div_click_9_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const fileInputJpgToPdf_r3 = i0.ɵɵreference(8);\n      return i0.ɵɵresetView(fileInputJpgToPdf_r3.click());\n    });\n    i0.ɵɵtemplate(10, PdfToolsComponent_section_49_ng_container_10_Template, 4, 0, \"ng-container\", 33)(11, PdfToolsComponent_section_49_ng_container_11_Template, 5, 1, \"ng-container\", 33);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"button\", 34);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_section_49_Template_button_click_12_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.uploadSingleFile(\"jpg-to-pdf\"));\n    });\n    i0.ɵɵtemplate(13, PdfToolsComponent_section_49_ng_container_13_Template, 3, 0, \"ng-container\", 33)(14, PdfToolsComponent_section_49_ng_container_14_Template, 3, 1, \"ng-container\", 33);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(15, PdfToolsComponent_section_49_div_15_Template, 4, 3, \"div\", 35)(16, PdfToolsComponent_section_49_div_16_Template, 7, 1, \"div\", 36)(17, PdfToolsComponent_section_49_div_17_Template, 5, 1, \"div\", 37);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵclassProp(\"drag-over\", ctx_r1.isDraggingJpgToPdf);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.selectedFileJpgToPdf);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.selectedFileJpgToPdf);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(11, _c4, !ctx_r1.selectedFileJpgToPdf || ctx_r1.progressJpgToPdf === 0, ctx_r1.progressJpgToPdf > 0 && ctx_r1.progressJpgToPdf < 100))(\"disabled\", !ctx_r1.selectedFileJpgToPdf || ctx_r1.progressJpgToPdf > 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.progressJpgToPdf === 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.progressJpgToPdf > 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.progressJpgToPdf > 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.downloadUrlJpgToPdf);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.errorMessageJpgToPdf);\n  }\n}\nfunction PdfToolsComponent_section_50_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\", 27)(1, \"div\", 28)(2, \"h2\");\n    i0.ɵɵtext(3, \"\\uD83D\\uDCC4 PDF to Word Unveiling\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\", 29);\n    i0.ɵɵtext(5, \"Unlock the secrets within your PDFs, converting them to editable Word files.\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"label\", 54);\n    i0.ɵɵelement(7, \"input\", 55);\n    i0.ɵɵelementStart(8, \"div\", 56);\n    i0.ɵɵelement(9, \"i\", 57);\n    i0.ɵɵelementStart(10, \"span\");\n    i0.ɵɵtext(11, \"Click to unveil your PDF\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"button\", 58);\n    i0.ɵɵelement(13, \"i\", 59);\n    i0.ɵɵtext(14, \" Unveil Word Document\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_section_50_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r1 = i0.ɵɵnextContext();\n      ctx_r1.reset(\"pdf-to-word\");\n      return i0.ɵɵresetView(ctx_r1.selectedTool = null);\n    });\n    i0.ɵɵtext(16, \"Start New Revelation\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction PdfToolsComponent_section_51_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\", 27)(1, \"div\", 28)(2, \"h2\");\n    i0.ɵɵtext(3, \"\\uD83D\\uDCDD Word to PDF Crafting\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\", 29);\n    i0.ɵɵtext(5, \"Craft your Word documents into immutable PDF scrolls.\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"label\", 54);\n    i0.ɵɵelement(7, \"input\", 60);\n    i0.ɵɵelementStart(8, \"div\", 56);\n    i0.ɵɵelement(9, \"i\", 61);\n    i0.ɵɵelementStart(10, \"span\");\n    i0.ɵɵtext(11, \"Click to craft your Word file\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"button\", 58);\n    i0.ɵɵelement(13, \"i\", 62);\n    i0.ɵɵtext(14, \" Craft PDF Scroll\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_section_51_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r1 = i0.ɵɵnextContext();\n      ctx_r1.reset(\"word-to-pdf\");\n      return i0.ɵɵresetView(ctx_r1.selectedTool = null);\n    });\n    i0.ɵɵtext(16, \"Begin New Craft\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction PdfToolsComponent_section_52_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"section\", 27)(1, \"div\", 28)(2, \"h2\");\n    i0.ɵɵtext(3, \"\\uD83C\\uDFB4 Image Fusion to PDF\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\", 29);\n    i0.ɵɵtext(5, \"Fuse multiple images into a single, cohesive PDF artifact.\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"label\", 63);\n    i0.ɵɵelement(7, \"input\", 64);\n    i0.ɵɵelementStart(8, \"div\", 39);\n    i0.ɵɵelement(9, \"i\", 65);\n    i0.ɵɵelementStart(10, \"p\");\n    i0.ɵɵtext(11, \"Click to gather or drag & drop images to fuse\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"button\", 58);\n    i0.ɵɵelement(13, \"i\", 66);\n    i0.ɵɵtext(14, \" Fuse Images into PDF\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 51);\n    i0.ɵɵlistener(\"click\", function PdfToolsComponent_section_52_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r1 = i0.ɵɵnextContext();\n      ctx_r1.reset(\"merge-images-to-pdf\");\n      return i0.ɵɵresetView(ctx_r1.selectedTool = null);\n    });\n    i0.ɵɵtext(16, \"Start New Fusion\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport let PdfToolsComponent = /*#__PURE__*/(() => {\n  class PdfToolsComponent {\n    http;\n    route;\n    // --- New: State for active tool selection (for the \"Interactive Aurora\" design) ---\n    selectedTool = null; // e.g., 'jpg-to-pdf', 'pdf-to-word', 'merge-images-to-pdf'\n    // --- State for JPG/PNG to PDF ---\n    selectedFileJpgToPdf = null;\n    isDraggingJpgToPdf = false;\n    progressJpgToPdf = 0;\n    downloadUrlJpgToPdf = '';\n    errorMessageJpgToPdf = '';\n    uploadSubscriptionJpgToPdf = null;\n    fileInputJpgToPdf;\n    // --- State for PDF to Word ---\n    selectedFilePdfToWord = null;\n    isDraggingPdfToWord = false;\n    progressPdfToWord = 0;\n    downloadUrlPdfToWord = '';\n    errorMessagePdfToWord = '';\n    uploadSubscriptionPdfToWord = null;\n    fileInputPdfToWord;\n    // --- State for Word to PDF ---\n    selectedFileWordToPdf = null;\n    isDraggingWordToPdf = false;\n    progressWordToPdf = 0;\n    downloadUrlWordToPdf = '';\n    errorMessageWordToPdf = '';\n    uploadSubscriptionWordToPdf = null;\n    fileInputWordToPdf;\n    // --- State for Merge Images to PDF ---\n    selectedFilesMergeImagesToPdf = [];\n    previewUrlMergeImagesToPdf = '';\n    progressMergeImagesToPdf = 0;\n    downloadUrlMergeImagesToPdf = '';\n    errorMessageMergeImagesToPdf = '';\n    uploadSubscriptionMergeImagesToPdf = null;\n    fileInputMergeImagesToPdf;\n    // Usage Control for Merge Images to PDF\n    isPremiumUserMerge = false;\n    freeUsesLimitMerge = 999999;\n    freeUsesRemainingMerge = this.freeUsesLimitMerge;\n    freeFileLimitMerge = 20;\n    constructor(http, route) {\n      this.http = http;\n      this.route = route;\n    }\n    ngOnInit() {\n      this.checkUserStatusMerge();\n      this.freeUsesRemainingMerge = this.freeUsesLimitMerge;\n      // Optional: Check route for pre-selected tool (e.g., if navigated via direct link)\n      this.route.paramMap.subscribe(params => {\n        const toolParam = params.get('tool');\n        if (toolParam && ['jpg-to-pdf', 'pdf-to-word', 'word-to-pdf', 'merge-images-to-pdf'].includes(toolParam)) {\n          this.selectTool(toolParam);\n        }\n      });\n    }\n    ngOnDestroy() {\n      this.unsubscribeAllUploads(); // Use a single method to unsubscribe all\n    }\n    // --- New: Method to handle tool selection from the \"orbs\" ---\n    selectTool(toolId) {\n      if (this.selectedTool === toolId) {\n        // If clicking the currently active tool, collapse it\n        this.selectedTool = null;\n        this.reset(toolId); // Also reset its state when collapsing\n      } else {\n        // If selecting a new tool, reset all other tools' states first\n        // to ensure a clean slate and prevent accidental mixed states.\n        this.resetAllExcept(toolId);\n        this.selectedTool = toolId;\n      }\n    }\n    // --- Unified Reset Logic ---\n    reset(toolType) {\n      if (toolType) {\n        this.unsubscribeUpload(toolType);\n        switch (toolType) {\n          case 'jpg-to-pdf':\n            this.selectedFileJpgToPdf = null;\n            this.isDraggingJpgToPdf = false;\n            this.progressJpgToPdf = 0;\n            this.downloadUrlJpgToPdf = '';\n            this.errorMessageJpgToPdf = '';\n            if (this.fileInputJpgToPdf) this.fileInputJpgToPdf.nativeElement.value = '';\n            break;\n          case 'pdf-to-word':\n            this.selectedFilePdfToWord = null;\n            this.isDraggingPdfToWord = false;\n            this.progressPdfToWord = 0;\n            this.downloadUrlPdfToWord = '';\n            this.errorMessagePdfToWord = '';\n            if (this.fileInputPdfToWord) this.fileInputPdfToWord.nativeElement.value = '';\n            break;\n          case 'word-to-pdf':\n            this.selectedFileWordToPdf = null;\n            this.isDraggingWordToPdf = false;\n            this.progressWordToPdf = 0;\n            this.downloadUrlWordToPdf = '';\n            this.errorMessageWordToPdf = '';\n            if (this.fileInputWordToPdf) this.fileInputWordToPdf.nativeElement.value = '';\n            break;\n          case 'merge-images-to-pdf':\n            this.selectedFilesMergeImagesToPdf = [];\n            this.previewUrlMergeImagesToPdf = '';\n            this.progressMergeImagesToPdf = 0;\n            this.downloadUrlMergeImagesToPdf = '';\n            this.errorMessageMergeImagesToPdf = '';\n            this.freeUsesRemainingMerge = this.freeUsesLimitMerge; // Reset usage for merge\n            if (this.fileInputMergeImagesToPdf) this.fileInputMergeImagesToPdf.nativeElement.value = '';\n            break;\n        }\n      } else {\n        // Reset all if no specific toolType is provided\n        this.reset('jpg-to-pdf');\n        this.reset('pdf-to-word');\n        this.reset('word-to-pdf');\n        this.reset('merge-images-to-pdf');\n        this.selectedTool = null; // Also reset the selected tool itself\n      }\n    }\n    // Helper to reset all tools except the specified one\n    resetAllExcept(excludeToolType) {\n      const allToolTypes = ['jpg-to-pdf', 'pdf-to-word', 'word-to-pdf', 'merge-images-to-pdf'];\n      allToolTypes.forEach(toolType => {\n        if (toolType !== excludeToolType) {\n          this.reset(toolType);\n        }\n      });\n    }\n    // --- Single File Conversion Methods (Unified with toolType) ---\n    onFileSelectedSingle(event, toolType) {\n      const input = event.target;\n      const file = input.files?.[0] || null;\n      if (file) {\n        const acceptedTypes = this.getFileAcceptTypes(toolType);\n        const isFileTypeAccepted = this.checkFileType(file, acceptedTypes);\n        if (isFileTypeAccepted) {\n          this.resetStateForNewUpload(toolType); // Reset relevant states first\n          switch (toolType) {\n            case 'jpg-to-pdf':\n              this.selectedFileJpgToPdf = file;\n              break;\n            case 'pdf-to-word':\n              this.selectedFilePdfToWord = file;\n              break;\n            case 'word-to-pdf':\n              this.selectedFileWordToPdf = file;\n              break;\n          }\n        } else {\n          this.setErrorMessage(toolType, `Unsupported file type for this tool. Please select a valid file.`);\n          // Don't reset everything, just the error and file input\n          switch (toolType) {\n            case 'jpg-to-pdf':\n              this.selectedFileJpgToPdf = null;\n              if (this.fileInputJpgToPdf) this.fileInputJpgToPdf.nativeElement.value = '';\n              break;\n            case 'pdf-to-word':\n              this.selectedFilePdfToWord = null;\n              if (this.fileInputPdfToWord) this.fileInputPdfToWord.nativeElement.value = '';\n              break;\n            case 'word-to-pdf':\n              this.selectedFileWordToPdf = null;\n              if (this.fileInputWordToPdf) this.fileInputWordToPdf.nativeElement.value = '';\n              break;\n          }\n        }\n      } else {\n        this.reset(toolType); // Clear selection if no file picked\n      }\n    }\n    onDragOverSingle(event, toolType) {\n      event.preventDefault();\n      event.stopPropagation();\n      switch (toolType) {\n        case 'jpg-to-pdf':\n          this.isDraggingJpgToPdf = true;\n          break;\n        case 'pdf-to-word':\n          this.isDraggingPdfToWord = true;\n          break;\n        case 'word-to-pdf':\n          this.isDraggingWordToPdf = true;\n          break;\n      }\n    }\n    onDragLeaveSingle(event, toolType) {\n      event.stopPropagation();\n      switch (toolType) {\n        case 'jpg-to-pdf':\n          this.isDraggingJpgToPdf = false;\n          break;\n        case 'pdf-to-word':\n          this.isDraggingPdfToWord = false;\n          break;\n        case 'word-to-pdf':\n          this.isDraggingWordToPdf = false;\n          break;\n      }\n    }\n    onDropSingle(event, toolType) {\n      event.preventDefault();\n      event.stopPropagation();\n      switch (toolType) {\n        case 'jpg-to-pdf':\n          this.isDraggingJpgToPdf = false;\n          break;\n        case 'pdf-to-word':\n          this.isDraggingPdfToWord = false;\n          break;\n        case 'word-to-pdf':\n          this.isDraggingWordToPdf = false;\n          break;\n      }\n      const files = event.dataTransfer?.files;\n      if (files && files.length > 0) {\n        const file = files[0];\n        const acceptedTypes = this.getFileAcceptTypes(toolType);\n        const isFileTypeAccepted = this.checkFileType(file, acceptedTypes);\n        if (isFileTypeAccepted) {\n          this.resetStateForNewUpload(toolType);\n          switch (toolType) {\n            case 'jpg-to-pdf':\n              this.selectedFileJpgToPdf = file;\n              break;\n            case 'pdf-to-word':\n              this.selectedFilePdfToWord = file;\n              break;\n            case 'word-to-pdf':\n              this.selectedFileWordToPdf = file;\n              break;\n          }\n        } else {\n          this.setErrorMessage(toolType, `Unsupported file type for this tool. Please select a valid file.`);\n          // Don't reset everything, just the error and file input\n          switch (toolType) {\n            case 'jpg-to-pdf':\n              this.selectedFileJpgToPdf = null;\n              if (this.fileInputJpgToPdf) this.fileInputJpgToPdf.nativeElement.value = '';\n              break;\n            case 'pdf-to-word':\n              this.selectedFilePdfToWord = null;\n              if (this.fileInputPdfToWord) this.fileInputPdfToWord.nativeElement.value = '';\n              break;\n            case 'word-to-pdf':\n              this.selectedFileWordToPdf = null;\n              if (this.fileInputWordToPdf) this.fileInputWordToPdf.nativeElement.value = '';\n              break;\n          }\n        }\n      }\n    }\n    uploadSingleFile(toolType) {\n      let fileToUpload = null;\n      let apiUrl = '';\n      let mimeType = '';\n      let fileName = '';\n      // Determine which file and API to use based on toolType\n      switch (toolType) {\n        case 'jpg-to-pdf':\n          fileToUpload = this.selectedFileJpgToPdf;\n          apiUrl = 'http://127.0.0.1:8000/api/jpg-to-pdf';\n          mimeType = 'application/pdf';\n          fileName = 'converted_image.pdf';\n          break;\n        case 'pdf-to-word':\n          fileToUpload = this.selectedFilePdfToWord;\n          apiUrl = 'http://127.0.0.1:8000/api/pdf-to-word';\n          mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n          fileName = 'converted_pdf.docx';\n          break;\n        case 'word-to-pdf':\n          fileToUpload = this.selectedFileWordToPdf;\n          apiUrl = 'http://127.0.0.1:8000/api/word-to-pdf';\n          mimeType = 'application/pdf';\n          fileName = 'converted_word.pdf';\n          break;\n        default:\n          this.setErrorMessage(toolType, 'Invalid conversion tool selected.');\n          this.reset(toolType);\n          return;\n      }\n      if (!fileToUpload) {\n        this.setErrorMessage(toolType, 'Please select a file to convert.');\n        return;\n      }\n      this.resetStateForNewUpload(toolType); // Reset states before starting new upload\n      this.setProgress(toolType, 1); // Start progress bar immediately\n      const formData = new FormData();\n      formData.append('file', fileToUpload);\n      const subscription = this.http.post(apiUrl, formData, {\n        responseType: 'blob',\n        // Expecting a blob response for file download\n        reportProgress: true,\n        observe: 'events'\n      }).subscribe({\n        next: event => {\n          if (event.type === HttpEventType.UploadProgress && event.total) {\n            this.setProgress(toolType, Math.round(event.loaded / event.total * 100));\n          }\n          if (event.type === HttpEventType.Response) {\n            this.setProgress(toolType, 100); // Ensure 100% on completion\n            if (event.body) {\n              const blob = new Blob([event.body], {\n                type: mimeType\n              });\n              const url = URL.createObjectURL(blob);\n              this.setDownloadUrl(toolType, url);\n              // Programmatically trigger download (with a slight delay for UX)\n              setTimeout(() => {\n                const anchor = document.createElement('a');\n                anchor.href = url;\n                anchor.download = fileName;\n                document.body.appendChild(anchor);\n                anchor.click();\n                document.body.removeChild(anchor);\n                URL.revokeObjectURL(url); // Clean up the Blob URL\n                // Optional: After successful download and revocation, you might want to reset the specific tool's state.\n                // For single files, auto-reset is often user-friendly after direct download.\n                // this.reset(toolType); // Uncomment if you want immediate reset after download\n              }, 500); // Small delay to ensure browser handles download\n            } else {\n              this.setErrorMessage(toolType, 'Conversion failed: Empty response from server.');\n              this.setProgress(toolType, 0);\n            }\n          }\n        },\n        error: error => {\n          this.handleUploadError(error, toolType);\n          // Do not call reset(toolType) here if you want the error message to persist\n          // until the user manually resets or selects a new tool.\n        },\n        complete: () => {\n          this.unsubscribeUpload(toolType);\n        }\n      });\n      // Assign the subscription to the correct tool's property for unsubscription on destroy\n      switch (toolType) {\n        case 'jpg-to-pdf':\n          this.uploadSubscriptionJpgToPdf = subscription;\n          break;\n        case 'pdf-to-word':\n          this.uploadSubscriptionPdfToWord = subscription;\n          break;\n        case 'word-to-pdf':\n          this.uploadSubscriptionWordToPdf = subscription;\n          break;\n      }\n    }\n    // --- Merge Images to PDF Methods (Specific to this tool) ---\n    onFilesSelectedMultiple(event, toolType) {\n      if (toolType !== 'merge-images-to-pdf') return;\n      const input = event.target;\n      if (input.files) {\n        // Filter for actual image files\n        const newFiles = Array.from(input.files).filter(file => file.type.startsWith('image/'));\n        this.selectedFilesMergeImagesToPdf = newFiles; // Replace current selection with new files\n        this.resetStateForNewUpload(toolType); // Reset common states for this specific tool\n        this.previewUrlMergeImagesToPdf = ''; // Clear preview initially\n        if (this.selectedFilesMergeImagesToPdf.length > 0) {\n          this.previewFirstImage();\n        }\n        this.checkMergeLimits(); // Check limits after files are selected\n      }\n    }\n    onDragOverMultiple(event, toolType) {\n      if (toolType !== 'merge-images-to-pdf') return;\n      this.preventDefaults(event);\n      // Add visual feedback for drag over if needed\n    }\n    onDragLeaveMultiple(event, toolType) {\n      if (toolType !== 'merge-images-to-pdf') return;\n      this.preventDefaults(event);\n      // Remove visual feedback\n    }\n    onFilesDroppedMultiple(event, toolType) {\n      this.preventDefaults(event);\n      if (toolType !== 'merge-images-to-pdf') return;\n      const files = event.dataTransfer?.files;\n      if (files && files.length > 0) {\n        // Filter for actual image files from drag/drop\n        const newFiles = Array.from(files).filter(file => file.type.startsWith('image/'));\n        this.selectedFilesMergeImagesToPdf = newFiles; // Replace current selection with new files\n        this.resetStateForNewUpload(toolType); // Reset common states for this specific tool\n        this.previewUrlMergeImagesToPdf = ''; // Clear preview initially\n        if (this.selectedFilesMergeImagesToPdf.length > 0) {\n          this.previewFirstImage();\n        }\n        this.checkMergeLimits(); // Check limits after files are selected\n      }\n    }\n    preventDefaults(event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    checkUserStatusMerge() {\n      // In a real application, you'd fetch this from your backend or auth service.\n      // For demonstration, it's hardcoded.\n      this.isPremiumUserMerge = false; // Example: Set to true for testing premium features\n    }\n    incrementDailyUsageMerge() {\n      if (!this.isPremiumUserMerge) {\n        if (this.freeUsesRemainingMerge > 0) {\n          this.freeUsesRemainingMerge--;\n        }\n        // Here you might save this to localStorage for simple client-side persistence\n        // For robust tracking, this should be done on the backend.\n      }\n    }\n    checkMergeLimits() {\n      this.setErrorMessage('merge-images-to-pdf', ''); // Always clear previous errors first\n      if (!this.isPremiumUserMerge) {\n        if (this.selectedFilesMergeImagesToPdf.length > this.freeFileLimitMerge) {\n          this.setErrorMessage('merge-images-to-pdf', `Free users can merge up to ${this.freeFileLimitMerge} images at once.`);\n        } else if (this.freeUsesRemainingMerge <= 0) {\n          this.setErrorMessage('merge-images-to-pdf', 'Daily free merge limit reached! Please upgrade to Premium for unlimited use.');\n        }\n      }\n    }\n    uploadMultipleFiles() {\n      const toolType = 'merge-images-to-pdf';\n      if (!this.selectedFilesMergeImagesToPdf.length) {\n        this.setErrorMessage(toolType, 'Please select images to merge.');\n        return;\n      }\n      if (!this.isPremiumUserMerge) {\n        if (this.freeUsesRemainingMerge <= 0) {\n          this.setErrorMessage(toolType, 'Daily free merge limit reached! Please upgrade to Premium for unlimited use.');\n          return;\n        }\n        if (this.selectedFilesMergeImagesToPdf.length > this.freeFileLimitMerge) {\n          this.setErrorMessage(toolType, `Free users can merge up to ${this.freeFileLimitMerge} images at once. Consider upgrading.`);\n          return;\n        }\n      }\n      this.resetStateForNewUpload(toolType);\n      this.setProgress(toolType, 1);\n      const formData = new FormData();\n      this.selectedFilesMergeImagesToPdf.forEach(file => formData.append('files', file));\n      const subscription = this.http.post('http://127.0.0.1:8000/api/merge-images-to-pdf', formData, {\n        responseType: 'blob',\n        reportProgress: true,\n        observe: 'events'\n      }).subscribe({\n        next: event => {\n          if (event.type === HttpEventType.UploadProgress && event.total) {\n            this.setProgress(toolType, Math.round(event.loaded / event.total * 100));\n          }\n          if (event.type === HttpEventType.Response) {\n            this.setProgress(toolType, 100);\n            if (event.body) {\n              const blob = new Blob([event.body], {\n                type: 'application/pdf'\n              });\n              const url = URL.createObjectURL(blob);\n              this.setDownloadUrl(toolType, url);\n              setTimeout(() => {\n                const link = document.createElement('a');\n                link.href = url;\n                link.download = 'merged_images.pdf';\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n                URL.revokeObjectURL(url);\n                this.incrementDailyUsageMerge(); // Increment usage upon successful merge\n                // this.reset(toolType); // Uncomment if you want immediate reset after download\n              }, 500);\n            } else {\n              this.setErrorMessage(toolType, 'PDF creation failed: Empty response from server.');\n              this.setProgress(toolType, 0);\n            }\n          }\n        },\n        error: error => {\n          this.handleUploadError(error, toolType);\n        },\n        complete: () => {\n          this.unsubscribeUpload(toolType);\n        }\n      });\n      this.uploadSubscriptionMergeImagesToPdf = subscription;\n    }\n    previewFirstImage() {\n      if (this.selectedFilesMergeImagesToPdf.length > 0) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          this.previewUrlMergeImagesToPdf = e.target.result;\n        };\n        reader.readAsDataURL(this.selectedFilesMergeImagesToPdf[0]);\n      } else {\n        this.previewUrlMergeImagesToPdf = '';\n      }\n    }\n    // --- Helper methods to manage individual tool states ---\n    setProgress(toolType, value) {\n      switch (toolType) {\n        case 'jpg-to-pdf':\n          this.progressJpgToPdf = value;\n          break;\n        case 'pdf-to-word':\n          this.progressPdfToWord = value;\n          break;\n        case 'word-to-pdf':\n          this.progressWordToPdf = value;\n          break;\n        case 'merge-images-to-pdf':\n          this.progressMergeImagesToPdf = value;\n          break;\n      }\n    }\n    setDownloadUrl(toolType, url) {\n      switch (toolType) {\n        case 'jpg-to-pdf':\n          this.downloadUrlJpgToPdf = url;\n          break;\n        case 'pdf-to-word':\n          this.downloadUrlPdfToWord = url;\n          break;\n        case 'word-to-pdf':\n          this.downloadUrlWordToPdf = url;\n          break;\n        case 'merge-images-to-pdf':\n          this.downloadUrlMergeImagesToPdf = url;\n          break;\n      }\n    }\n    setErrorMessage(toolType, message) {\n      switch (toolType) {\n        case 'jpg-to-pdf':\n          this.errorMessageJpgToPdf = message;\n          break;\n        case 'pdf-to-word':\n          this.errorMessagePdfToWord = message;\n          break;\n        case 'word-to-pdf':\n          this.errorMessageWordToPdf = message;\n          break;\n        case 'merge-images-to-pdf':\n          this.errorMessageMergeImagesToPdf = message;\n          break;\n      }\n    }\n    resetStateForNewUpload(toolType) {\n      // This method is called when a user *starts* selecting files for a specific tool.\n      // It clears the previous state (progress, download URL, errors) for *that* tool.\n      this.setProgress(toolType, 0);\n      this.setDownloadUrl(toolType, '');\n      this.setErrorMessage(toolType, '');\n      // Explicitly clear file input elements for the selected tool (important for re-selecting same file)\n      switch (toolType) {\n        case 'jpg-to-pdf':\n          if (this.fileInputJpgToPdf) this.fileInputJpgToPdf.nativeElement.value = '';\n          break;\n        case 'pdf-to-word':\n          if (this.fileInputPdfToWord) this.fileInputPdfToWord.nativeElement.value = '';\n          break;\n        case 'word-to-pdf':\n          if (this.fileInputWordToPdf) this.fileInputWordToPdf.nativeElement.value = '';\n          break;\n        case 'merge-images-to-pdf':\n          if (this.fileInputMergeImagesToPdf) this.fileInputMergeImagesToPdf.nativeElement.value = '';\n          this.previewUrlMergeImagesToPdf = ''; // Also clear preview for merge tool\n          break;\n      }\n    }\n    handleUploadError(error, toolType) {\n      console.error(`Upload error for ${toolType}:`, error);\n      this.setProgress(toolType, 0); // Reset progress on error\n      let errorMessageText = '';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error (e.g., network error)\n        errorMessageText = `An unexpected error occurred: ${error.error.message}`;\n      } else {\n        // Backend error\n        if (error.error instanceof Blob && error.error.type === 'application/json') {\n          const reader = new FileReader();\n          reader.onload = () => {\n            try {\n              const errorBody = JSON.parse(reader.result);\n              // Prioritize a 'detail' field from FastAPI/Django Rest Framework errors\n              errorMessageText = errorBody.detail || errorBody.message || `Server error: ${error.status} ${error.statusText || 'Unknown'}.`;\n            } catch (e) {\n              errorMessageText = `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}. Invalid error format.`;\n            }\n          };\n          reader.readAsText(error.error);\n        } else if (typeof error.error === 'string') {\n          // Simple string error from backend\n          errorMessageText = `Server error: ${error.status} ${error.statusText || 'Unknown'}. ${error.error}`;\n        } else {\n          // Fallback for other error types or if error.error is not a Blob/string\n          errorMessageText = `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n        }\n        if (error.status === 0) {\n          errorMessageText = 'Could not connect to the server. Please ensure the backend is running and reachable.';\n        }\n        if (error.status === 403) {\n          errorMessageText = errorMessageText || 'Access denied. You might have reached your limit or lack permissions.';\n        }\n        if (error.status === 413) {\n          errorMessageText = 'File is too large. Please upload a smaller file.';\n        }\n        if (error.status === 422) {\n          errorMessageText = errorMessageText || 'Invalid input provided. Please check your file.';\n        }\n      }\n      this.setErrorMessage(toolType, errorMessageText);\n    }\n    unsubscribeUpload(toolType) {\n      switch (toolType) {\n        case 'jpg-to-pdf':\n          this.uploadSubscriptionJpgToPdf?.unsubscribe();\n          this.uploadSubscriptionJpgToPdf = null;\n          break;\n        case 'pdf-to-word':\n          this.uploadSubscriptionPdfToWord?.unsubscribe();\n          this.uploadSubscriptionPdfToWord = null;\n          break;\n        case 'word-to-pdf':\n          this.uploadSubscriptionWordToPdf?.unsubscribe();\n          this.uploadSubscriptionWordToPdf = null;\n          break;\n        case 'merge-images-to-pdf':\n          this.uploadSubscriptionMergeImagesToPdf?.unsubscribe();\n          this.uploadSubscriptionMergeImagesToPdf = null;\n          break;\n      }\n    }\n    unsubscribeAllUploads() {\n      this.unsubscribeUpload('jpg-to-pdf');\n      this.unsubscribeUpload('pdf-to-word');\n      this.unsubscribeUpload('word-to-pdf');\n      this.unsubscribeUpload('merge-images-to-pdf');\n    }\n    // Helper for more robust file type checking (can be expanded)\n    getFileAcceptTypes(toolType) {\n      switch (toolType) {\n        case 'jpg-to-pdf':\n          return 'image/jpeg, image/png';\n        case 'pdf-to-word':\n          return 'application/pdf';\n        case 'word-to-pdf':\n          return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/msword';\n        case 'merge-images-to-pdf':\n          return 'image/jpeg, image/png, image/gif, image/bmp, image/webp';\n        default:\n          return '*/*';\n      }\n    }\n    checkFileType(file, acceptedTypes) {\n      const acceptedTypesArray = acceptedTypes.split(',').map(type => type.trim().toLowerCase());\n      const fileType = file.type.toLowerCase();\n      const fileNameLower = file.name.toLowerCase();\n      // Check for direct MIME type match or wildcard (e.g., 'image/*')\n      if (acceptedTypesArray.some(acceptedType => {\n        if (acceptedType.endsWith('/*')) {\n          return fileType.startsWith(acceptedType.slice(0, -1));\n        }\n        return fileType === acceptedType;\n      })) {\n        return true;\n      }\n      // Fallback to extension check for common cases or when MIME types might be inconsistent\n      // This is especially useful for office documents where MIME types can be generic.\n      if (acceptedTypes.includes('application/pdf') && fileNameLower.endsWith('.pdf')) return true;\n      if (acceptedTypes.includes('application/vnd.openxmlformats-officedocument.wordprocessingml.document') && (fileNameLower.endsWith('.docx') || fileNameLower.endsWith('.doc'))) return true;\n      if (acceptedTypes.includes('image/') && (fileNameLower.endsWith('.jpg') || fileNameLower.endsWith('.jpeg') || fileNameLower.endsWith('.png') || fileNameLower.endsWith('.gif') || fileNameLower.endsWith('.bmp') || fileNameLower.endsWith('.webp'))) return true;\n      return false;\n    }\n    static ɵfac = function PdfToolsComponent_Factory(t) {\n      return new (t || PdfToolsComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PdfToolsComponent,\n      selectors: [[\"app-pdf-tools\"]],\n      viewQuery: function PdfToolsComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n          i0.ɵɵviewQuery(_c2, 5);\n          i0.ɵɵviewQuery(_c3, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInputJpgToPdf = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInputPdfToWord = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInputWordToPdf = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInputMergeImagesToPdf = _t.first);\n        }\n      },\n      decls: 53,\n      vars: 14,\n      consts: [[\"fileInputJpgToPdf\", \"\"], [1, \"tool-page-container\"], [1, \"page-header\", \"animate__animated\", \"animate__fadeInDown\"], [1, \"page-sub-heading\"], [1, \"aurora-canvas\"], [1, \"tool-orb-wrapper\", \"animate__animated\", \"animate__zoomIn\", \"delayed-1\", 3, \"click\"], [\"data-tool-id\", \"jpg-to-pdf\", 1, \"tool-orb\"], [1, \"fas\", \"fa-image\", \"orb-icon\"], [1, \"orb-name\"], [1, \"tool-description\"], [1, \"tool-orb-wrapper\", \"animate__animated\", \"animate__zoomIn\", \"delayed-2\", 3, \"click\"], [\"data-tool-id\", \"pdf-to-word\", 1, \"tool-orb\"], [1, \"fas\", \"fa-file-word\", \"orb-icon\"], [1, \"tool-orb-wrapper\", \"animate__animated\", \"animate__zoomIn\", \"delayed-3\", 3, \"click\"], [\"data-tool-id\", \"word-to-pdf\", 1, \"tool-orb\"], [1, \"fas\", \"fa-file-pdf\", \"orb-icon\"], [1, \"tool-orb-wrapper\", \"animate__animated\", \"animate__zoomIn\", \"delayed-4\", 3, \"click\"], [\"data-tool-id\", \"merge-images-to-pdf\", 1, \"tool-orb\"], [1, \"fas\", \"fa-images\", \"orb-icon\"], [1, \"tool-orb-wrapper\", \"animate__animated\", \"animate__zoomIn\", \"delayed-5\", \"ad-orb-wrapper\"], [1, \"tool-orb\", \"ad-orb\"], [1, \"fas\", \"fa-bullhorn\", \"orb-icon\"], [1, \"ad-orb-content\"], [1, \"ad-label\"], [1, \"placeholder-ad\"], [1, \"dynamic-content-area\"], [\"class\", \"conversion-section active-tool-content animate__animated animate__fadeInUp\", 4, \"ngIf\"], [1, \"conversion-section\", \"active-tool-content\", \"animate__animated\", \"animate__fadeInUp\"], [1, \"card-header\"], [1, \"section-description\"], [1, \"upload-box\", \"single-file-upload\", \"animate__animated\", \"animate__fadeInUp\", 3, \"dragover\", \"dragleave\", \"drop\"], [\"type\", \"file\", \"accept\", \"image/jpeg, image/png\", \"hidden\", \"\", 3, \"change\"], [1, \"upload-text\", 3, \"click\"], [4, \"ngIf\"], [1, \"convert-btn\", \"animate__animated\", 3, \"click\", \"ngClass\", \"disabled\"], [\"class\", \"progress-container animate__animated animate__fadeIn\", 4, \"ngIf\"], [\"class\", \"download-section animate__animated animate__zoomIn\", 4, \"ngIf\"], [\"class\", \"error-section animate__animated animate__shakeX\", 4, \"ngIf\"], [1, \"fas\", \"fa-cloud-upload-alt\", \"upload-icon\", \"animate__animated\", \"animate__bounceIn\"], [1, \"upload-prompt\"], [1, \"file-selected\", \"animate__animated\", \"animate__fadeIn\"], [1, \"fas\", \"fa-check-circle\", \"success-icon\"], [1, \"file-name\"], [1, \"fas\", \"fa-magic\", \"launch-icon\"], [1, \"fas\", \"fa-spinner\", \"fa-spin\"], [1, \"progress-container\", \"animate__animated\", \"animate__fadeIn\"], [1, \"progress-bar\"], [1, \"progress-text\"], [1, \"download-section\", \"animate__animated\", \"animate__zoomIn\"], [1, \"success-message\"], [\"download\", \"image_to_pdf.pdf\", 1, \"download-link\", \"animate__animated\", \"animate__heartBeat\", 3, \"href\"], [\"type\", \"button\", 1, \"reset-btn\", \"animate__animated\", \"animate__fadeIn\", 3, \"click\"], [1, \"error-section\", \"animate__animated\", \"animate__shakeX\"], [1, \"error-message\"], [1, \"upload-box\", \"single-file-upload\"], [\"type\", \"file\", \"accept\", \"application/pdf\", \"hidden\", \"\"], [1, \"upload-text\"], [1, \"fas\", \"fa-file-pdf\", \"upload-icon\"], [1, \"convert-btn\"], [1, \"fas\", \"fa-spell-check\", \"launch-icon\"], [\"type\", \"file\", \"accept\", \".doc,.docx\", \"hidden\", \"\"], [1, \"fas\", \"fa-file-word\", \"upload-icon\"], [1, \"fas\", \"fa-hat-wizard\", \"launch-icon\"], [1, \"upload-box\", \"merge-images-upload-area\"], [\"type\", \"file\", \"accept\", \"image/*\", \"multiple\", \"\", \"hidden\", \"\"], [1, \"fas\", \"fa-layer-group\", \"upload-icon\"], [1, \"fas\", \"fa-gem\", \"launch-icon\"]],\n      template: function PdfToolsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"header\", 2)(2, \"h1\");\n          i0.ɵɵtext(3, \"\\u2728 The PDF & Image Alchemy Lab \\u2728\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"p\", 3);\n          i0.ɵɵtext(5, \"Transforming documents with a touch of magic.\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(6, \"div\", 4)(7, \"div\", 5);\n          i0.ɵɵlistener(\"click\", function PdfToolsComponent_Template_div_click_7_listener() {\n            return ctx.selectTool(\"jpg-to-pdf\");\n          });\n          i0.ɵɵelementStart(8, \"div\", 6);\n          i0.ɵɵelement(9, \"i\", 7);\n          i0.ɵɵelementStart(10, \"span\", 8);\n          i0.ɵɵtext(11, \"JPG/PNG to PDF\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(12, \"div\", 9);\n          i0.ɵɵtext(13, \"Convert your images into a single, high-quality PDF document.\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(14, \"div\", 10);\n          i0.ɵɵlistener(\"click\", function PdfToolsComponent_Template_div_click_14_listener() {\n            return ctx.selectTool(\"pdf-to-word\");\n          });\n          i0.ɵɵelementStart(15, \"div\", 11);\n          i0.ɵɵelement(16, \"i\", 12);\n          i0.ɵɵelementStart(17, \"span\", 8);\n          i0.ɵɵtext(18, \"PDF to Word\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"div\", 9);\n          i0.ɵɵtext(20, \"Transform your PDF documents into editable Word files.\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(21, \"div\", 13);\n          i0.ɵɵlistener(\"click\", function PdfToolsComponent_Template_div_click_21_listener() {\n            return ctx.selectTool(\"word-to-pdf\");\n          });\n          i0.ɵɵelementStart(22, \"div\", 14);\n          i0.ɵɵelement(23, \"i\", 15);\n          i0.ɵɵelementStart(24, \"span\", 8);\n          i0.ɵɵtext(25, \"Word to PDF\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(26, \"div\", 9);\n          i0.ɵɵtext(27, \"Easily convert your Word documents into universally compatible PDF files.\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(28, \"div\", 16);\n          i0.ɵɵlistener(\"click\", function PdfToolsComponent_Template_div_click_28_listener() {\n            return ctx.selectTool(\"merge-images-to-pdf\");\n          });\n          i0.ɵɵelementStart(29, \"div\", 17);\n          i0.ɵɵelement(30, \"i\", 18);\n          i0.ɵɵelementStart(31, \"span\", 8);\n          i0.ɵɵtext(32, \"Merge Images to PDF\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(33, \"div\", 9);\n          i0.ɵɵtext(34, \"Combine multiple images into a single PDF document.\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(35, \"div\", 19)(36, \"div\", 20);\n          i0.ɵɵelement(37, \"i\", 21);\n          i0.ɵɵelementStart(38, \"span\", 8);\n          i0.ɵɵtext(39, \"Advertisements\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(40, \"div\", 22)(41, \"p\", 23);\n          i0.ɵɵtext(42, \"Support Our Tools\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(43, \"div\", 24)(44, \"p\");\n          i0.ɵɵtext(45, \"Your Dynamic Ad Here\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(46, \"small\");\n          i0.ɵɵtext(47, \"Ad content can be animated upon hover/click\");\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(48, \"div\", 25);\n          i0.ɵɵtemplate(49, PdfToolsComponent_section_49_Template, 18, 14, \"section\", 26)(50, PdfToolsComponent_section_50_Template, 17, 0, \"section\", 26)(51, PdfToolsComponent_section_51_Template, 17, 0, \"section\", 26)(52, PdfToolsComponent_section_52_Template, 17, 0, \"section\", 26);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵclassProp(\"active\", ctx.selectedTool === \"jpg-to-pdf\");\n          i0.ɵɵadvance(7);\n          i0.ɵɵclassProp(\"active\", ctx.selectedTool === \"pdf-to-word\");\n          i0.ɵɵadvance(7);\n          i0.ɵɵclassProp(\"active\", ctx.selectedTool === \"word-to-pdf\");\n          i0.ɵɵadvance(7);\n          i0.ɵɵclassProp(\"active\", ctx.selectedTool === \"merge-images-to-pdf\");\n          i0.ɵɵadvance(20);\n          i0.ɵɵclassProp(\"active\", ctx.selectedTool !== null);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedTool === \"jpg-to-pdf\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedTool === \"pdf-to-word\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedTool === \"word-to-pdf\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedTool === \"merge-images-to-pdf\");\n        }\n      },\n      dependencies: [i3.NgClass, i3.NgIf]\n    });\n  }\n  return PdfToolsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}