{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ViewChild, ElementRef } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nlet PdfToolsComponent = class PdfToolsComponent {\n  http;\n  route;\n  // Common properties for both functionalities\n  mode = 'jpg-to-pdf'; // Default mode\n  progress = 0;\n  downloadUrl = '';\n  errorMessage = '';\n  uploadSubscription = null;\n  // Properties for Single File Conversions (JPG/PNG to PDF, PDF to Word, Word to PDF)\n  selectedFileSingle = null;\n  isDragging = false; // For single file drag-over effect\n  fileInputSingle;\n  // Properties for Merge Images to PDF\n  selectedFilesMultiple = [];\n  previewUrlMultiple = ''; // Preview for the first image\n  // Usage Control for Merge Images to PDF (as provided in your code)\n  isPremiumUserMerge = false; // Can be true if user logs in as premium\n  freeUsesLimitMerge = 999999; // Set to a very high number for effectively unlimited daily merges\n  freeUsesRemainingMerge = this.freeUsesLimitMerge;\n  freeFileLimitMerge = 20; // Max files for free users per merge\n  fileInputMultiple;\n  constructor(http, route) {\n    this.http = http;\n    this.route = route;\n  }\n  ngOnInit() {\n    // Initialize usage limits for merge images tool\n    // We can still call checkUserStatus if you intend to use `isPremiumUserMerge` for other features\n    this.checkUserStatusMerge();\n    // No need to load daily usage from localStorage if there's effectively no daily limit\n    this.freeUsesRemainingMerge = this.freeUsesLimitMerge; // Ensure it's always set to the high limit on init\n  }\n  ngOnDestroy() {\n    if (this.uploadSubscription) {\n      this.uploadSubscription.unsubscribe();\n      this.uploadSubscription = null;\n    }\n  }\n  // --- Helper for file input accept attribute ---\n  getFileAcceptTypes(mode) {\n    switch (mode) {\n      case 'jpg-to-pdf':\n        return 'image/*';\n      // Accepts all image types\n      case 'pdf-to-word':\n        return '.pdf';\n      case 'word-to-pdf':\n        return '.docx';\n      // Accepts only .docx files\n      case 'merge-images-to-pdf':\n        return 'image/*';\n      // Accepts all image types for merge\n      default:\n        return '*/*';\n      // Fallback\n    }\n  }\n  // --- Common Reset Logic ---\n  reset() {\n    if (this.uploadSubscription) {\n      this.uploadSubscription.unsubscribe();\n      this.uploadSubscription = null;\n    }\n    // Reset single file properties\n    this.selectedFileSingle = null;\n    this.isDragging = false;\n    if (this.fileInputSingle) {\n      this.fileInputSingle.nativeElement.value = ''; // Clear single file input\n    }\n    // Reset multiple files properties\n    this.selectedFilesMultiple = [];\n    this.previewUrlMultiple = '';\n    if (this.fileInputMultiple) {\n      this.fileInputMultiple.nativeElement.value = ''; // Clear multiple file input\n    }\n    // Reset common properties\n    this.progress = 0;\n    this.downloadUrl = '';\n    this.errorMessage = '';\n    this.freeUsesRemainingMerge = this.freeUsesLimitMerge; // Reset merge usage to high limit\n  }\n  // --- Single File Conversion Methods ---\n  onFileSelectedSingle(event) {\n    const input = event.target;\n    this.selectedFileSingle = input.files?.[0] || null;\n    this.resetCommonStatesForNewUpload(); // Reset states common to all uploads\n    this.selectedFilesMultiple = []; // Ensure multiple is cleared\n    this.previewUrlMultiple = ''; // Ensure multiple preview is cleared\n  }\n  onDragOverSingle(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.isDragging = true;\n  }\n  onDragLeaveSingle(event) {\n    event.stopPropagation();\n    this.isDragging = false;\n  }\n  onDropSingle(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.isDragging = false;\n    const files = event.dataTransfer?.files;\n    if (files && files.length > 0) {\n      const file = files[0];\n      const acceptedTypes = this.getFileAcceptTypes(this.mode);\n      const isFileTypeAccepted = this.checkFileType(file, acceptedTypes);\n      if (isFileTypeAccepted) {\n        this.selectedFileSingle = file;\n        this.resetCommonStatesForNewUpload();\n        this.selectedFilesMultiple = []; // Ensure multiple is cleared\n        this.previewUrlMultiple = ''; // Ensure multiple preview is cleared\n      } else {\n        this.errorMessage = `Unsupported file type for ${this.mode} mode. Please select a valid file.`;\n        this.reset();\n      }\n    }\n  }\n  uploadSingleFile() {\n    if (!this.selectedFileSingle) {\n      this.errorMessage = 'Please select a file to convert.';\n      return;\n    }\n    this.resetCommonStatesForNewUpload(); // Reset before starting new upload\n    this.progress = 1; // Start progress bar immediately\n    const formData = new FormData();\n    formData.append('file', this.selectedFileSingle);\n    let apiUrl = '';\n    let mimeType = '';\n    let fileName = '';\n    switch (this.mode) {\n      case 'jpg-to-pdf':\n        apiUrl = 'http://127.0.0.1:8000/api/jpg-to-pdf';\n        mimeType = 'application/pdf';\n        fileName = 'converted.pdf';\n        break;\n      case 'pdf-to-word':\n        apiUrl = 'http://127.0.0.1:8000/api/pdf-to-word';\n        mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n        fileName = 'converted.docx';\n        break;\n      case 'word-to-pdf':\n        apiUrl = 'http://127.0.0.1:8000/api/word-to-pdf';\n        mimeType = 'application/pdf';\n        fileName = 'converted.pdf';\n        break;\n      default:\n        this.errorMessage = 'Invalid conversion mode selected.';\n        this.reset();\n        return;\n    }\n    this.uploadSubscription = this.http.post(apiUrl, formData, {\n      responseType: 'blob',\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe({\n      next: event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.progress = Math.round(event.loaded / event.total * 100);\n        }\n        if (event.type === HttpEventType.Response) {\n          this.progress = 100; // Ensure 100% on completion\n          const blob = new Blob([event.body], {\n            type: mimeType\n          });\n          const url = URL.createObjectURL(blob);\n          this.downloadUrl = url; // Set download URL for success message\n          // No need to set downloadTriggered for auto-download, but it can be used for UI visibility\n          setTimeout(() => {\n            const anchor = document.createElement('a');\n            anchor.href = url;\n            anchor.download = fileName;\n            document.body.appendChild(anchor);\n            anchor.click();\n            document.body.removeChild(anchor);\n            URL.revokeObjectURL(url);\n            this.reset(); // Auto-clear after download\n          }, 500);\n        }\n      },\n      error: error => {\n        this.handleUploadError(error);\n        this.reset();\n      },\n      complete: () => {\n        this.unsubscribeUpload();\n      }\n    });\n  }\n  // --- Merge Images to PDF Methods ---\n  onFilesSelectedMultiple(event) {\n    const input = event.target;\n    if (input.files) {\n      this.selectedFilesMultiple = Array.from(input.files).filter(file => file.type.startsWith('image/'));\n      this.resetCommonStatesForNewUpload(); // Reset common states\n      this.selectedFileSingle = null; // Ensure single file is cleared\n      if (this.selectedFilesMultiple.length > 0) {\n        const firstFile = this.selectedFilesMultiple[0];\n        const reader = new FileReader();\n        reader.onload = e => {\n          this.previewUrlMultiple = e.target.result;\n        };\n        reader.readAsDataURL(firstFile);\n      } else {\n        this.previewUrlMultiple = '';\n      }\n      // Check file count limit for free users\n      if (!this.isPremiumUserMerge && this.selectedFilesMultiple.length > this.freeFileLimitMerge) {\n        this.errorMessage = `Free users can merge up to ${this.freeFileLimitMerge} images at once.`;\n      } else {\n        this.errorMessage = '';\n      }\n    }\n  }\n  onFilesDroppedMultiple(event) {\n    this.preventDefaults(event);\n    const files = event.dataTransfer?.files;\n    if (files && files.length > 0) {\n      this.selectedFilesMultiple = Array.from(files).filter(file => file.type.startsWith('image/'));\n      this.resetCommonStatesForNewUpload();\n      this.selectedFileSingle = null; // Ensure single file is cleared\n      if (this.selectedFilesMultiple.length > 0) {\n        const firstFile = this.selectedFilesMultiple[0];\n        const reader = new FileReader();\n        reader.onload = e => {\n          this.previewUrlMultiple = e.target.result;\n        };\n        reader.readAsDataURL(firstFile);\n      } else {\n        this.previewUrlMultiple = '';\n      }\n      // Check file count limit for free users\n      if (!this.isPremiumUserMerge && this.selectedFilesMultiple.length > this.freeFileLimitMerge) {\n        this.errorMessage = `Free users can merge up to ${this.freeFileLimitMerge} images at once.`;\n      } else {\n        this.errorMessage = '';\n      }\n    }\n  }\n  preventDefaults(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  checkUserStatusMerge() {\n    // This is where you'd typically check user's premium status from an auth service\n    // For now, it's hardcoded to false as per your original request to essentially remove daily limits for free users.\n    this.isPremiumUserMerge = false;\n  }\n  incrementDailyUsageMerge() {\n    // This method will still decrement `freeUsesRemainingMerge` but from a very large number,\n    // so it will effectively never hit zero for free users.\n    if (!this.isPremiumUserMerge) {\n      this.freeUsesRemainingMerge--;\n    }\n  }\n  uploadMultipleFiles() {\n    if (!this.selectedFilesMultiple.length) {\n      this.errorMessage = 'Please select images to merge.';\n      return;\n    }\n    if (!this.isPremiumUserMerge && this.freeUsesRemainingMerge <= 0) {\n      this.errorMessage = 'Daily free merge limit reached! Please upgrade to Premium for unlimited use.';\n      return;\n    }\n    if (!this.isPremiumUserMerge && this.selectedFilesMultiple.length > this.freeFileLimitMerge) {\n      this.errorMessage = `Free users can merge up to ${this.freeFileLimitMerge} images at once.`;\n      return;\n    }\n    this.resetCommonStatesForNewUpload(); // Reset before starting new upload\n    this.progress = 1; // Start progress bar immediately\n    const formData = new FormData();\n    this.selectedFilesMultiple.forEach(file => formData.append('files', file)); // Note: 'files' is the backend expected field name\n    this.uploadSubscription = this.http.post('http://127.0.0.1:8000/api/merge-images-to-pdf', formData, {\n      responseType: 'blob',\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe({\n      next: event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.progress = Math.round(event.loaded / event.total * 100);\n        }\n        if (event.type === HttpEventType.Response) {\n          this.progress = 100; // Ensure 100% on completion\n          if (event.body) {\n            const blob = new Blob([event.body], {\n              type: 'application/pdf'\n            });\n            const url = URL.createObjectURL(blob);\n            this.downloadUrl = url; // Set download URL for success message\n            // Programmatically trigger download (optional, but good for multi-file tools)\n            const link = document.createElement('a');\n            link.href = url;\n            link.download = 'merged_images.pdf'; // Specific name for merged PDF\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            URL.revokeObjectURL(url);\n            this.incrementDailyUsageMerge(); // Increment usage upon successful merge\n            // DO NOT reset immediately here. Let the user see the download link and click \"Merge Another\".\n            // The download URL is set, which shows the download section.\n          } else {\n            this.errorMessage = 'PDF creation failed: Empty response from server.';\n            this.progress = 0;\n          }\n        }\n      },\n      error: error => {\n        this.handleUploadError(error);\n      },\n      complete: () => {\n        this.unsubscribeUpload();\n      }\n    });\n  }\n  // --- Utility methods ---\n  resetCommonStatesForNewUpload() {\n    this.progress = 0;\n    this.downloadUrl = '';\n    this.errorMessage = '';\n    // Ensure both file inputs are cleared visually if new files are selected in either mode\n    if (this.fileInputSingle && this.fileInputSingle.nativeElement.value) {\n      this.fileInputSingle.nativeElement.value = '';\n    }\n    if (this.fileInputMultiple && this.fileInputMultiple.nativeElement.value) {\n      this.fileInputMultiple.nativeElement.value = '';\n    }\n  }\n  handleUploadError(error) {\n    console.error('Upload error:', error);\n    this.progress = 0;\n    if (error.error instanceof ErrorEvent) {\n      this.errorMessage = `An error occurred: ${error.error.message}`;\n    } else {\n      if (error.error instanceof Blob && error.error.type === 'application/json') {\n        const reader = new FileReader();\n        reader.onload = () => {\n          try {\n            const errorBody = JSON.parse(reader.result);\n            this.errorMessage = errorBody.detail || `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n          } catch (e) {\n            this.errorMessage = `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n          }\n        };\n        reader.readAsText(error.error);\n      } else {\n        this.errorMessage = `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n      }\n      if (error.status === 0) {\n        this.errorMessage = 'Could not connect to the server. Please ensure the backend is running.';\n      }\n      if (error.status === 403) {\n        this.errorMessage = this.errorMessage || 'You have reached your daily limit or exceeded file count for the free plan.';\n      }\n    }\n  }\n  unsubscribeUpload() {\n    if (this.uploadSubscription) {\n      this.uploadSubscription.unsubscribe();\n      this.uploadSubscription = null;\n    }\n  }\n  // Helper for more robust file type checking (can be expanded)\n  checkFileType(file, acceptedTypes) {\n    if (acceptedTypes === '*/*') return true;\n    if (acceptedTypes.includes(file.type)) return true; // Direct MIME type match\n    // Check by extension for common types where MIME might be tricky\n    const fileNameLower = file.name.toLowerCase();\n    if (acceptedTypes === '.pdf' && fileNameLower.endsWith('.pdf')) return true;\n    if (acceptedTypes === '.docx' && fileNameLower.endsWith('.docx')) return true;\n    if (acceptedTypes === 'image/*' && (fileNameLower.endsWith('.jpg') || fileNameLower.endsWith('.jpeg') || fileNameLower.endsWith('.png') || fileNameLower.endsWith('.gif') || fileNameLower.endsWith('.bmp'))) return true;\n    return false;\n  }\n};\n__decorate([ViewChild('fileInputSingle'), __metadata(\"design:type\", ElementRef)], PdfToolsComponent.prototype, \"fileInputSingle\", void 0);\n__decorate([ViewChild('fileInputMultiple'), __metadata(\"design:type\", ElementRef)], PdfToolsComponent.prototype, \"fileInputMultiple\", void 0);\nPdfToolsComponent = __decorate([Component({\n  selector: 'app-pdf-tools',\n  templateUrl: './pdf-tools.component.html',\n  styleUrls: ['./pdf-tools.component.css']\n}), __metadata(\"design:paramtypes\", [HttpClient, ActivatedRoute])], PdfToolsComponent);\nexport { PdfToolsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}