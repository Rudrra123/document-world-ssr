{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { environment } from 'src/environments/environment';\nlet ImageToolsComponent = class ImageToolsComponent {\n  http;\n  sanitizer;\n  route;\n  router;\n  fileInput;\n  // ✨ NEW: Properties for Navbar Dropdowns and Mobile Menu\n  showMobileMenu = false;\n  showPdfTools = false;\n  showCompressTools = false;\n  hoverTimeout;\n  activeTool = null;\n  selectedFile = null;\n  previewUrl = '';\n  blobUrl = '';\n  downloadUrl = '';\n  downloadedFileName = '';\n  originalSize = 0;\n  compressedSize = 0;\n  progress = 0;\n  errorMessage = null;\n  isDragging = false;\n  // Resize\n  resizeWidth = null;\n  resizeHeight = null;\n  // Convert\n  targetFormat = 'jpeg';\n  // Crop\n  cropX = 0;\n  cropY = 0;\n  cropWidth = 0;\n  cropHeight = 0;\n  constructor(http, sanitizer, route, router) {\n    this.http = http;\n    this.sanitizer = sanitizer;\n    this.route = route;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      const toolParam = params.get('tool');\n      // Use the tool from the URL, or show the main grid if no tool is specified\n      this.activeTool = toolParam || null;\n    });\n  }\n  // ✨ NEW: Function to toggle the mobile menu\n  toggleMobileMenu() {\n    this.showMobileMenu = !this.showMobileMenu;\n  }\n  // ✨ NEW: Function to close the mobile menu when a link is clicked\n  closeMobileMenu() {\n    this.showMobileMenu = false;\n  }\n  // ✨ NEW: Functions to control dropdown visibility on hover (for desktop)\n  onDropdownHover(isHovering, type) {\n    clearTimeout(this.hoverTimeout);\n    if (isHovering) {\n      this.showPdfTools = type === 'pdf';\n      this.showCompressTools = type === 'compress';\n    } else {\n      this.hoverTimeout = setTimeout(() => {\n        this.showPdfTools = false;\n        this.showCompressTools = false;\n      }, 100); // Small delay to prevent closing when moving mouse between button and menu\n    }\n  }\n  // ✨ NEW: Function to toggle dropdowns on click (for mobile/touch)\n  toggleDropdown(type) {\n    if (type === 'pdf') {\n      this.showPdfTools = !this.showPdfTools;\n      this.showCompressTools = false; // Close other dropdown\n    } else if (type === 'compress') {\n      this.showCompressTools = !this.showCompressTools;\n      this.showPdfTools = false; // Close other dropdown\n    }\n  }\n  // ✨ NEW: Functions to hide dropdowns after clicking an item\n  hidePdfTools() {\n    this.showPdfTools = false;\n    this.showMobileMenu = false;\n  }\n  hideCompressTools() {\n    this.showCompressTools = false;\n    this.showMobileMenu = false;\n  }\n  setActiveTool(tool) {\n    this.activeTool = tool;\n    this.resetSingleFile();\n    if (tool) {\n      this.router.navigate(['/image-tools', tool]);\n    } else {\n      this.router.navigate(['/image-tools']); // clean URL\n    }\n  }\n  // ... (the rest of your existing functions: preventDefaults, onDragOverSingle, etc.)\n  preventDefaults(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  onDragOverSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = true;\n  }\n  onDragLeaveSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = false;\n  }\n  onDropSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = false;\n    const file = event.dataTransfer?.files?.[0];\n    if (file?.type.startsWith('image/')) {\n      this.setFile(file);\n    } else {\n      this.errorMessage = 'Please drop a valid image file.';\n      this.resetSingleFile();\n    }\n  }\n  onFileSelectedSingle(event) {\n    const input = event.target;\n    const file = input.files?.[0];\n    if (file) this.setFile(file);\n  }\n  setFile(file) {\n    this.revokeObjectUrls();\n    this.selectedFile = file;\n    this.previewUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(file));\n    this.originalSize = file.size;\n    this.downloadUrl = '';\n    this.compressedSize = 0;\n    this.progress = 0;\n    this.errorMessage = null;\n  }\n  uploadSingleFile() {\n    if (!this.selectedFile) {\n      this.errorMessage = 'Please select an image.';\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', this.selectedFile);\n    this.http.post(`${environment.apiUrl}/compress-image`, formData, {\n      reportProgress: true,\n      observe: 'events',\n      responseType: 'blob'\n    }).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress && event.total) {\n        this.progress = Math.round(event.loaded / event.total * 100);\n      }\n      if (event.type === HttpEventType.Response) {\n        const blob = new Blob([event.body], {\n          type: 'image/jpeg'\n        });\n        this.revokeObjectUrls();\n        this.blobUrl = URL.createObjectURL(blob);\n        this.downloadUrl = this.blobUrl;\n        this.compressedSize = blob.size;\n        this.downloadedFileName = 'compressed_' + this.selectedFile.name;\n        this.progress = 100;\n      }\n    }, error => {\n      console.error('Compression error:', error);\n      this.errorMessage = 'Compression failed.';\n      this.progress = 0;\n    });\n  }\n  uploadResizeFile() {\n    if (!this.selectedFile) {\n      this.errorMessage = 'Please select an image.';\n      return;\n    }\n    if (!this.resizeWidth || !this.resizeHeight) {\n      this.errorMessage = 'Please enter valid width and height.';\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', this.selectedFile);\n    formData.append('width', this.resizeWidth.toString());\n    formData.append('height', this.resizeHeight.toString());\n    this.http.post(`${environment.apiUrl}/resize-image`, formData, {\n      reportProgress: true,\n      observe: 'events',\n      responseType: 'blob'\n    }).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress && event.total) {\n        this.progress = Math.round(event.loaded / event.total * 100);\n      }\n      if (event.type === HttpEventType.Response) {\n        const blob = new Blob([event.body], {\n          type: event.body?.type || 'image/jpeg'\n        });\n        this.revokeObjectUrls();\n        this.blobUrl = URL.createObjectURL(blob);\n        this.downloadUrl = this.blobUrl;\n        this.compressedSize = blob.size;\n        this.downloadedFileName = 'resized_' + this.selectedFile.name;\n        this.progress = 100;\n      }\n    }, error => {\n      console.error('Resize error:', error);\n      this.errorMessage = 'Resize failed.';\n      this.progress = 0;\n    });\n  }\n  uploadConvertFile() {\n    if (!this.selectedFile || !this.targetFormat) {\n      this.errorMessage = 'Select an image and target format.';\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', this.selectedFile);\n    formData.append('target_format', this.targetFormat);\n    this.http.post(`${environment.apiUrl}/convert-image`, formData, {\n      reportProgress: true,\n      observe: 'events',\n      responseType: 'blob'\n    }).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress && event.total) {\n        this.progress = Math.round(event.loaded / event.total * 100);\n      }\n      if (event.type === HttpEventType.Response) {\n        const blob = new Blob([event.body], {\n          type: `image/${this.targetFormat}`\n        });\n        this.revokeObjectUrls();\n        this.blobUrl = URL.createObjectURL(blob);\n        this.downloadUrl = this.blobUrl;\n        this.compressedSize = blob.size;\n        this.downloadedFileName = `converted_${this.selectedFile.name.split('.')[0]}.${this.targetFormat}`;\n        this.progress = 100;\n      }\n    }, error => {\n      console.error('Conversion error:', error);\n      this.errorMessage = error?.error?.detail || 'Conversion failed.';\n      this.progress = 0;\n    });\n  }\n  uploadCropFile() {\n    if (!this.selectedFile || !this.cropWidth || !this.cropHeight) {\n      this.errorMessage = 'Please provide image and crop dimensions.';\n      return;\n    }\n    this.errorMessage = '';\n    this.progress = 1;\n    this.downloadUrl = '';\n    this.downloadedFileName = '';\n    this.blobUrl = '';\n    const formData = new FormData();\n    formData.append('file', this.selectedFile);\n    formData.append('x', String(this.cropX));\n    formData.append('y', String(this.cropY));\n    formData.append('width', String(this.cropWidth));\n    formData.append('height', String(this.cropHeight));\n    this.http.post(`${environment.apiUrl}/crop-image`, formData, {\n      reportProgress: true,\n      observe: 'events',\n      responseType: 'blob'\n    }).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress && event.total) {\n        this.progress = Math.round(event.loaded / event.total * 100);\n      }\n      if (event.type === HttpEventType.Response) {\n        const blob = new Blob([event.body], {\n          type: this.selectedFile.type\n        });\n        this.revokeObjectUrls();\n        this.blobUrl = URL.createObjectURL(blob);\n        this.downloadUrl = this.blobUrl;\n        this.downloadedFileName = `cropped_${this.selectedFile.name}`;\n        this.compressedSize = blob.size;\n        this.progress = 100;\n        // Small delay to allow user to see \"100%\" momentarily\n        setTimeout(() => {\n          this.progress = 0; // Hide progress block\n        }, 500); // Optional\n      }\n    }, error => {\n      console.error('Crop error:', error);\n      this.errorMessage = error?.error?.detail || 'Cropping failed.';\n      this.progress = 0;\n    });\n  }\n  resetSingleFile() {\n    this.selectedFile = null;\n    this.previewUrl = '';\n    this.downloadUrl = '';\n    this.blobUrl = '';\n    this.progress = 0;\n    this.compressedSize = 0;\n    this.originalSize = 0;\n    this.downloadedFileName = '';\n    this.errorMessage = null;\n    this.resizeWidth = null;\n    this.resizeHeight = null;\n    this.targetFormat = 'jpeg';\n    if (this.fileInput?.nativeElement) {\n      this.fileInput.nativeElement.value = '';\n    }\n    this.revokeObjectUrls();\n  }\n  revokeObjectUrls() {\n    if (this.blobUrl?.startsWith('blob:')) {\n      URL.revokeObjectURL(this.blobUrl);\n    }\n    if (this.previewUrl && this.previewUrl.changingThisBreaksApplicationSecurity) {\n      URL.revokeObjectURL(this.previewUrl.changingThisBreaksApplicationSecurity);\n    }\n  }\n};\n__decorate([ViewChild('fileInputSingle'), __metadata(\"design:type\", ElementRef)], ImageToolsComponent.prototype, \"fileInput\", void 0);\nImageToolsComponent = __decorate([Component({\n  selector: 'app-image-tools',\n  templateUrl: './image-tools.component.html',\n  styleUrls: ['./image-tools.component.css']\n}), __metadata(\"design:paramtypes\", [HttpClient, DomSanitizer, ActivatedRoute, Router])], ImageToolsComponent);\nexport { ImageToolsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}