{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\nlet EditWordComponent = class EditWordComponent {\n  http;\n  sanitizer;\n  selectedFile;\n  htmlContent = '';\n  downloadUrl = null;\n  constructor(http, sanitizer) {\n    this.http = http;\n    this.sanitizer = sanitizer;\n  }\n  onFileSelected(event) {\n    const input = event.target;\n    if (input.files?.length) {\n      this.selectedFile = input.files[0];\n    }\n  }\n  viewFile() {\n    const formData = new FormData();\n    formData.append('file', this.selectedFile);\n    this.http.post('/api/word-to-html', formData, {\n      responseType: 'text'\n    }).subscribe({\n      next: html => this.htmlContent = html,\n      error: err => alert(\"Failed to load Word file: \" + err.message)\n    });\n  }\n  saveFile() {\n    const blob = new Blob([this.htmlContent], {\n      type: 'text/html'\n    });\n    const htmlFile = new File([blob], 'edited.html');\n    const formData = new FormData();\n    formData.append('file', htmlFile);\n    this.http.post('/api/html-to-docx', formData, {\n      responseType: 'blob'\n    }).subscribe({\n      next: blob => {\n        this.downloadUrl = this.sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(blob));\n      },\n      error: err => alert(\"Failed to save Word file: \" + err.message)\n    });\n  }\n};\nEditWordComponent = __decorate([Component({\n  selector: 'app-edit-word',\n  templateUrl: './edit-word.component.html',\n  styleUrls: ['./edit-word.component.css']\n}), __metadata(\"design:paramtypes\", [HttpClient, DomSanitizer])], EditWordComponent);\nexport { EditWordComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}