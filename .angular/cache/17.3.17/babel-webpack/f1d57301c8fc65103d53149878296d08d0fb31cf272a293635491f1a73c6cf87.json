{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar _a;\nimport { Component, ViewChild, ElementRef } from '@angular/core';\nimport { HttpClient, HttpEventType } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { environment } from 'src/environments/environment';\nlet PdfToolsComponent = class PdfToolsComponent {\n  http;\n  router;\n  route;\n  // --- Common Properties ---\n  activeTool = null; // Changed initial state to null so grid is visible initially\n  progress = 0;\n  downloadUrl = ''; // This will hold the URL for the download link\n  downloadFileName = ''; // To store the specific filename for the download\n  errorMessage = '';\n  uploadSubscription = null;\n  // --- Properties for Single File Conversions (JPG/PNG to PDF, PDF to Word, Word to PDF) ---\n  selectedFileSingle = null;\n  isDragging = false; // For drag-over effect, used by both single and multiple\n  fileInputSingle;\n  // --- Properties for Merge Images to PDF ---\n  selectedFilesMultiple = [];\n  previewUrlMultiple = ''; // Preview for the first image of multiple files\n  fileInputMultiple;\n  // Usage Control for Merge Images to PDF (as provided in your code)\n  isPremiumUserMerge = false; // Can be true if user logs in as premium\n  freeUsesLimitMerge = 999999; // Set to a very high number for effectively unlimited daily merges\n  freeUsesRemainingMerge = this.freeUsesLimitMerge; // Will always be high\n  freeFileLimitMerge = 20; // Max files for free users per merge\n  originalSizeKB = 0;\n  compressedSizeKB = 0;\n  constructor(http, router, route) {\n    this.http = http;\n    this.router = router;\n    this.route = route;\n  }\n  ngOnInit() {\n    this.route.paramMap.subscribe(params => {\n      const toolParam = params.get('tool');\n      if (toolParam) {\n        this.setActiveTool(toolParam);\n        // Scroll into view if section ID exists\n        setTimeout(() => {\n          const section = document.getElementById(`${toolParam}-section`);\n          if (section) {\n            section.scrollIntoView({\n              behavior: 'smooth',\n              block: 'center'\n            });\n            section.classList.add('highlight-section');\n            setTimeout(() => section.classList.remove('highlight-section'), 3000);\n          }\n        }, 300);\n      } else {\n        this.setActiveTool(null); // show full tool grid\n      }\n    });\n    this.checkUserStatusMerge();\n  }\n  ngOnDestroy() {\n    if (this.uploadSubscription) {\n      this.uploadSubscription.unsubscribe();\n      this.uploadSubscription = null;\n    }\n    // Clean up Blob URL if any exists\n    if (this.downloadUrl) {\n      URL.revokeObjectURL(this.downloadUrl);\n    }\n  }\n  setActiveTool(toolName) {\n    this.activeTool = toolName;\n    this.reset();\n    if (toolName) {\n      // Navigate to root `/` and update query param to reflect active tool\n      this.router.navigate(['/'], {\n        queryParams: {\n          tool: toolName\n        }\n      });\n    } else {\n      // No tool selected, clear query param\n      this.router.navigate(['/']);\n    }\n  }\n  // --- Helper for file input accept attribute ---\n  getFileAcceptTypes(mode) {\n    switch (mode) {\n      case 'jpg-to-pdf':\n        return 'image/jpeg,image/png,image/gif,image/bmp';\n      // Specific image MIME types\n      case 'pdf-to-word':\n        return 'application/pdf';\n      case 'word-to-pdf':\n        return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/msword';\n      // .docx and .doc\n      case 'merge-images-to-pdf':\n        return 'image/jpeg,image/png,image/gif,image/bmp';\n      // Specific image MIME types for merge\n      default:\n        return '*/*';\n      // Fallback\n    }\n  }\n  // --- Global Reset Logic ---\n  // This resets EVERYTHING, ideal when switching tools or starting fresh after success/error.\n  reset() {\n    if (this.uploadSubscription) {\n      this.uploadSubscription.unsubscribe();\n      this.uploadSubscription = null;\n    }\n    // Clean up Blob URL before resetting\n    if (this.downloadUrl) {\n      URL.revokeObjectURL(this.downloadUrl);\n    }\n    // Reset single file properties\n    this.selectedFileSingle = null;\n    if (this.fileInputSingle && this.fileInputSingle.nativeElement) {\n      this.fileInputSingle.nativeElement.value = ''; // Clear single file input\n    }\n    // Reset multiple files properties\n    this.selectedFilesMultiple = [];\n    this.previewUrlMultiple = '';\n    if (this.fileInputMultiple && this.fileInputMultiple.nativeElement) {\n      this.fileInputMultiple.nativeElement.value = ''; // Clear multiple file input\n    }\n    // Reset common properties\n    this.progress = 0;\n    this.downloadUrl = '';\n    this.downloadFileName = '';\n    this.errorMessage = '';\n    this.isDragging = false; // Always reset dragging state\n    this.freeUsesRemainingMerge = this.freeUsesLimitMerge; // Reset merge usage to high limit\n  }\n  // --- Reset specific to single file input, used when clearing only that input ---\n  resetSingleFile() {\n    if (this.downloadUrl) {\n      URL.revokeObjectURL(this.downloadUrl); // Clean up Blob URL\n    }\n    this.selectedFileSingle = null;\n    this.progress = 0;\n    this.downloadUrl = '';\n    this.downloadFileName = '';\n    this.errorMessage = '';\n    this.isDragging = false;\n    if (this.fileInputSingle) {\n      this.fileInputSingle.nativeElement.value = '';\n    }\n  }\n  // --- Reset specific to multiple files input, used when clearing only that input ---\n  resetMultipleFiles() {\n    if (this.downloadUrl) {\n      URL.revokeObjectURL(this.downloadUrl); // Clean up Blob URL\n    }\n    this.selectedFilesMultiple = [];\n    this.previewUrlMultiple = '';\n    this.progress = 0;\n    this.downloadUrl = '';\n    this.downloadFileName = '';\n    this.errorMessage = '';\n    this.isDragging = false;\n    if (this.fileInputMultiple) {\n      this.fileInputMultiple.nativeElement.value = '';\n    }\n  }\n  // --- Common State Reset for New Upload Initiation ---\n  // This is called before any new upload starts to clear previous results/errors.\n  resetCommonStatesForNewUpload() {\n    this.progress = 0;\n    if (this.downloadUrl) {\n      URL.revokeObjectURL(this.downloadUrl); // Clean up old Blob URL before new upload\n    }\n    this.downloadUrl = '';\n    this.downloadFileName = '';\n    this.errorMessage = '';\n    this.isDragging = false; // Ensure dragging state is reset\n  }\n  // --- Single File Conversion Methods ---\n  onFileSelectedSingle(event) {\n    const input = event.target;\n    const file = input.files?.[0] || null;\n    if (file) {\n      const acceptedTypes = this.getFileAcceptTypes(this.activeTool || ''); // Use activeTool here, provide fallback\n      const isFileTypeAccepted = this.checkFileType(file, acceptedTypes);\n      if (isFileTypeAccepted) {\n        this.selectedFileSingle = file;\n        this.resetCommonStatesForNewUpload(); // Reset states common to all uploads\n        this.selectedFilesMultiple = []; // Ensure multiple is cleared when a single file is selected\n        this.previewUrlMultiple = ''; // Ensure multiple preview is cleared\n      } else {\n        this.errorMessage = `Unsupported file type for this conversion. Please select a valid file (e.g., ${acceptedTypes}).`;\n        this.selectedFileSingle = null; // Clear invalid selection\n        if (this.fileInputSingle) {\n          this.fileInputSingle.nativeElement.value = ''; // Clear input visually\n        }\n      }\n    } else {\n      this.selectedFileSingle = null;\n      this.resetCommonStatesForNewUpload();\n    }\n  }\n  onDragOverSingle(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.isDragging = true;\n  }\n  onDragLeaveSingle(event) {\n    event.stopPropagation(); // Only stop propagation, don't preventDefault here\n    this.isDragging = false;\n  }\n  onDropSingle(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.isDragging = false; // Reset dragging state\n    const files = event.dataTransfer?.files;\n    if (files && files.length > 0) {\n      const file = files[0];\n      const acceptedTypes = this.getFileAcceptTypes(this.activeTool || ''); // Use activeTool here, provide fallback\n      const isFileTypeAccepted = this.checkFileType(file, acceptedTypes);\n      if (isFileTypeAccepted) {\n        this.selectedFileSingle = file;\n        this.resetCommonStatesForNewUpload();\n        this.selectedFilesMultiple = []; // Ensure multiple is cleared\n        this.previewUrlMultiple = ''; // Ensure multiple preview is cleared\n      } else {\n        this.errorMessage = `Unsupported file type for this conversion. Please select a valid file (e.g., ${acceptedTypes}).`;\n        this.selectedFileSingle = null; // Clear invalid selection\n        if (this.fileInputSingle) {\n          this.fileInputSingle.nativeElement.value = ''; // Clear input visually\n        }\n      }\n    } else {\n      this.selectedFileSingle = null;\n      this.resetCommonStatesForNewUpload();\n    }\n  }\n  uploadSingleFile() {\n    if (!this.selectedFileSingle) {\n      this.errorMessage = 'Please select a file to convert.';\n      return;\n    }\n    this.resetCommonStatesForNewUpload(); // Reset before starting new upload\n    this.progress = 1; // Start progress bar immediately\n    const formData = new FormData();\n    formData.append('file', this.selectedFileSingle);\n    let apiUrl = '';\n    let mimeType = '';\n    let fileName = '';\n    switch (this.activeTool) {\n      // Use activeTool here\n      case 'jpg-to-pdf':\n        apiUrl = `${environment.apiUrl}/jpg-to-pdf`;\n        mimeType = 'application/pdf';\n        fileName = 'converted.pdf';\n        break;\n      case 'pdf-to-word':\n        apiUrl = `${environment.apiUrl}/pdf-to-word`;\n        mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n        fileName = 'converted.docx';\n        break;\n      case 'word-to-pdf':\n        apiUrl = `${environment.apiUrl}/word-to-pdf`;\n        mimeType = 'application/pdf';\n        fileName = 'converted.pdf';\n        break;\n      default:\n        this.errorMessage = 'Invalid conversion tool selected.';\n        this.reset();\n        return;\n    }\n    this.uploadSubscription = this.http.post(apiUrl, formData, {\n      responseType: 'blob',\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe({\n      next: event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.progress = Math.round(event.loaded / event.total * 100);\n        }\n        if (event.type === HttpEventType.Response) {\n          this.progress = 100; // Ensure 100% on completion\n          const blob = new Blob([event.body], {\n            type: mimeType\n          });\n          this.downloadUrl = URL.createObjectURL(blob); // Set download URL for success message\n          this.downloadFileName = fileName; // Store filename for the manual download button\n          // NO AUTOMATIC DOWNLOAD HERE\n        }\n      },\n      error: error => {\n        this.handleUploadError(error);\n        this.resetCommonStatesForNewUpload(); // Reset common states on error\n      },\n      complete: () => {\n        this.unsubscribeUpload();\n      }\n    });\n  }\n  // --- Merge Images to PDF Methods (Multiple Files) ---\n  onFilesSelectedMultiple(event) {\n    const input = event.target;\n    if (input.files) {\n      const filesArray = Array.from(input.files).filter(file => file.type.startsWith('image/'));\n      this.selectedFilesMultiple = filesArray;\n      this.resetCommonStatesForNewUpload(); // Reset common states\n      this.selectedFileSingle = null; // Ensure single file is cleared\n      if (this.selectedFilesMultiple.length > 0) {\n        // You could create a preview for the first image if needed\n        // For now, it's just a count display.\n      } else {\n        this.previewUrlMultiple = '';\n      }\n      this.checkMergeLimits(); // Check and update error message based on limits\n    }\n  }\n  // This handles dragover for multiple files. `preventDefaults` is called from HTML.\n  // We keep `isDragging` true during dragover.\n  onDragLeaveMultiple(event) {\n    event.stopPropagation();\n    this.isDragging = false;\n  }\n  onFilesDroppedMultiple(event) {\n    this.preventDefaults(event); // Already calls preventDefault & stopPropagation & sets isDragging=true\n    this.isDragging = false; // Reset dragging state\n    const files = event.dataTransfer?.files;\n    if (files && files.length > 0) {\n      const filesArray = Array.from(files).filter(file => file.type.startsWith('image/'));\n      this.selectedFilesMultiple = filesArray;\n      this.resetCommonStatesForNewUpload();\n      this.selectedFileSingle = null; // Ensure single file is cleared\n      if (this.selectedFilesMultiple.length > 0) {\n        // You could create a preview for the first image if needed\n      } else {\n        this.previewUrlMultiple = '';\n      }\n      this.checkMergeLimits(); // Check and update error message based on limits\n    }\n  }\n  // Combined preventDefaults for dragover/drop zones\n  preventDefaults(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    // Only set isDragging to true on dragover, not drop\n    if (event.type === 'dragover') {\n      this.isDragging = true;\n    }\n  }\n  checkUserStatusMerge() {\n    // Implement your actual user premium status check here\n    // For now, hardcoded to false as per your setup for \"effectively unlimited free merges\"\n    this.isPremiumUserMerge = false;\n  }\n  // A dedicated method to check and set merge related error messages\n  checkMergeLimits() {\n    this.errorMessage = ''; // Clear previous error\n    if (!this.isPremiumUserMerge) {\n      if (this.selectedFilesMultiple.length > this.freeFileLimitMerge) {\n        this.errorMessage = `Free users can merge up to ${this.freeFileLimitMerge} images at once.`;\n      }\n      // No check for freeUsesRemainingMerge here as it's effectively unlimited with 999999\n    }\n  }\n  // This method will decrement from a very large number, so it won't affect free users significantly\n  incrementDailyUsageMerge() {\n    if (!this.isPremiumUserMerge) {\n      this.freeUsesRemainingMerge--;\n      // This decrement is mostly for theoretical tracking if you ever revert limits\n    }\n  }\n  uploadMultipleFiles() {\n    if (!this.selectedFilesMultiple.length) {\n      this.errorMessage = 'Please select images to merge.';\n      return;\n    }\n    // Re-check limits right before upload to ensure no last-second changes\n    this.checkMergeLimits();\n    if (this.errorMessage) {\n      // If checkMergeLimits set an error, stop\n      return;\n    }\n    // Additional check for freeUsesRemainingMerge, although it's very high\n    if (!this.isPremiumUserMerge && this.freeUsesRemainingMerge <= 0) {\n      this.errorMessage = 'Daily free merge limit reached! Please upgrade to Premium for unlimited use.';\n      return;\n    }\n    this.resetCommonStatesForNewUpload(); // Reset before starting new upload\n    this.progress = 1; // Start progress bar immediately\n    const formData = new FormData();\n    this.selectedFilesMultiple.forEach(file => formData.append('files', file)); // 'files' is the backend expected field name\n    this.uploadSubscription = this.http.post(`${environment.apiUrl}/merge-images-to-pdf`, formData, {\n      responseType: 'blob',\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe({\n      next: event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.progress = Math.round(event.loaded / event.total * 100);\n        }\n        if (event.type === HttpEventType.Response) {\n          this.progress = 100; // Ensure 100% on completion\n          if (event.body) {\n            const blob = new Blob([event.body], {\n              type: 'application/pdf'\n            });\n            this.downloadUrl = URL.createObjectURL(blob); // Set download URL for success message\n            this.downloadFileName = 'merged_images.pdf'; // Specific name for merged PDF for manual download\n            // NO AUTOMATIC DOWNLOAD HERE\n            this.incrementDailyUsageMerge(); // Increment usage upon successful merge\n          } else {\n            this.errorMessage = 'PDF creation failed: Empty response from server.';\n            this.progress = 0; // Reset progress on empty response error\n          }\n        }\n      },\n      error: error => {\n        this.handleUploadError(error);\n        this.resetCommonStatesForNewUpload(); // Reset common states on error\n      },\n      complete: () => {\n        this.unsubscribeUpload();\n      }\n    });\n  }\n  compressPdfFile() {\n    if (!this.selectedFileSingle) {\n      this.errorMessage = 'Please select a PDF file to compress.';\n      return;\n    }\n    this.resetCommonStatesForNewUpload();\n    this.progress = 1;\n    const formData = new FormData();\n    formData.append('file', this.selectedFileSingle);\n    const originalSizeBytes = this.selectedFileSingle.size;\n    this.uploadSubscription = this.http.post(`${environment.apiUrl}/compress-pdf`, formData, {\n      responseType: 'blob',\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe({\n      next: event => {\n        if (event.type === HttpEventType.UploadProgress && event.total) {\n          this.progress = Math.round(event.loaded / event.total * 100);\n        }\n        if (event.type === HttpEventType.Response) {\n          const blob = new Blob([event.body], {\n            type: 'application/pdf'\n          });\n          this.downloadUrl = URL.createObjectURL(blob);\n          this.downloadFileName = 'compressed.pdf';\n          const compressedSizeBytes = blob.size;\n          this.originalSizeKB = +(originalSizeBytes / 1024).toFixed(1);\n          this.compressedSizeKB = +(compressedSizeBytes / 1024).toFixed(1);\n          this.progress = 0;\n        }\n      },\n      error: error => {\n        this.handleUploadError(error);\n        this.resetCommonStatesForNewUpload();\n      },\n      complete: () => this.unsubscribeUpload()\n    });\n  }\n  /**\n   * Triggers the download of the file (for both single and multiple conversions).\n   * This method is called when the \"Download PDF\" or \"Download Word\" button is clicked.\n   */\n  downloadPdf() {\n    if (this.downloadUrl && this.downloadFileName) {\n      const link = document.createElement('a');\n      link.href = this.downloadUrl;\n      link.download = this.downloadFileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      // It's a good practice to revoke the object URL after it's no longer needed,\n      // but if the user might click \"Download\" multiple times, you might delay this\n      // until `resetSingleFile()` or `resetMultipleFiles()` is called.\n      // For now, we'll keep it here as it's triggered by a button.\n      // URL.revokeObjectURL(this.downloadUrl); // Uncomment this if you only want a single download opportunity\n    }\n  }\n  // --- Utility methods ---\n  handleUploadError(error) {\n    console.error('Upload error:', error);\n    this.progress = 0; // Reset progress on error\n    if (this.downloadUrl) {\n      URL.revokeObjectURL(this.downloadUrl); // Clean up Blob URL on error\n    }\n    this.downloadUrl = ''; // Clear any download URL on error\n    this.downloadFileName = ''; // Clear filename on error\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error or network error\n      this.errorMessage = `An error occurred: ${error.error.message}`;\n    } else {\n      // Backend error\n      if (error.error instanceof Blob && error.error.type === 'application/json') {\n        // Try to parse the error message from a JSON blob\n        const reader = new FileReader();\n        reader.onload = () => {\n          try {\n            const errorBody = JSON.parse(reader.result);\n            this.errorMessage = errorBody.detail || errorBody.message || `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n          } catch (e) {\n            this.errorMessage = `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n          }\n        };\n        reader.readAsText(error.error);\n      } else {\n        // Handle non-JSON or other error formats\n        this.errorMessage = `Server responded with ${error.status}: ${error.statusText || 'Unknown error'}.`;\n      }\n      // Specific error status messages\n      if (error.status === 0) {\n        this.errorMessage = 'Could not connect to the server. Please ensure the backend is running and accessible.';\n      }\n      if (error.status === 403) {\n        this.errorMessage = this.errorMessage || 'You have reached your daily limit or exceeded file count for the free plan.';\n      }\n      // Add more specific status code handling here as needed (e.g., 400, 404, 500)\n    }\n  }\n  unsubscribeUpload() {\n    if (this.uploadSubscription) {\n      this.uploadSubscription.unsubscribe();\n      this.uploadSubscription = null;\n    }\n  }\n  // Helper for more robust file type checking by MIME or extension\n  checkFileType(file, acceptedTypes) {\n    const mimeTypes = acceptedTypes.split(',').map(type => type.trim().toLowerCase());\n    const fileNameLower = file.name.toLowerCase();\n    // Check direct MIME type match\n    if (mimeTypes.includes(file.type.toLowerCase())) {\n      return true;\n    }\n    // Check for broad image type if 'image/*' is accepted\n    if (mimeTypes.includes('image/*') && file.type.startsWith('image/')) {\n      return true;\n    }\n    // Check by common file extensions if MIME types don't fully cover\n    if (mimeTypes.includes('application/pdf') && fileNameLower.endsWith('.pdf')) return true;\n    if (mimeTypes.includes('application/vnd.openxmlformats-officedocument.wordprocessingml.document') && fileNameLower.endsWith('.docx')) return true;\n    if (mimeTypes.includes('application/msword') && fileNameLower.endsWith('.doc')) return true;\n    // Specific image extension checks if 'image/*' isn't used or for more rigor\n    if (mimeTypes.includes('image/jpeg') && (fileNameLower.endsWith('.jpeg') || fileNameLower.endsWith('.jpg'))) return true;\n    if (mimeTypes.includes('image/png') && fileNameLower.endsWith('.png')) return true;\n    if (mimeTypes.includes('image/gif') && fileNameLower.endsWith('.gif')) return true;\n    if (mimeTypes.includes('image/bmp') && fileNameLower.endsWith('.bmp')) return true;\n    // If '*/*' is accepted, then all files are technically accepted\n    if (mimeTypes.includes('*/*')) return true;\n    return false;\n  }\n};\n__decorate([ViewChild('fileInputSingle'), __metadata(\"design:type\", ElementRef)], PdfToolsComponent.prototype, \"fileInputSingle\", void 0);\n__decorate([ViewChild('fileInputMultiple'), __metadata(\"design:type\", ElementRef)], PdfToolsComponent.prototype, \"fileInputMultiple\", void 0);\nPdfToolsComponent = __decorate([Component({\n  selector: 'app-pdf-tools',\n  templateUrl: './pdf-tools.component.html',\n  styleUrls: ['./pdf-tools.component.css']\n}), __metadata(\"design:paramtypes\", [HttpClient, typeof (_a = typeof Router !== \"undefined\" && Router) === \"function\" ? _a : Object, ActivatedRoute])], PdfToolsComponent);\nexport { PdfToolsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}