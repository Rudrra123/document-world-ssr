{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nlet AppComponent = class AppComponent {\n  title = 'DocuFlow';\n  // State variables for general tool management\n  activeTool = null;\n  // State variables for single file uploads (JPG/PNG to PDF, PDF to Word, Word to PDF)\n  selectedFileSingle = null;\n  isDragging = false; // For drag-over effect\n  progress = 0;\n  downloadUrl = null;\n  errorMessage = null;\n  // State variables for multiple file uploads (Merge Images to PDF)\n  selectedFilesMultiple = [];\n  // References to file input elements for programmatic click\n  fileInputSingle;\n  fileInputMultiple;\n  setActiveTool(tool) {\n    this.activeTool = tool;\n    this.resetAllStates(); // Reset states when switching tools\n  }\n  resetAllStates() {\n    this.selectedFileSingle = null;\n    this.selectedFilesMultiple = [];\n    this.isDragging = false;\n    this.progress = 0;\n    this.downloadUrl = null;\n    this.errorMessage = null;\n    // Clear file input values to allow re-selection of the same file\n    if (this.fileInputSingle && this.fileInputSingle.nativeElement) {\n      this.fileInputSingle.nativeElement.value = '';\n    }\n    if (this.fileInputMultiple && this.fileInputMultiple.nativeElement) {\n      this.fileInputMultiple.nativeElement.value = '';\n    }\n  }\n  // --- Single File Operations ---\n  onFileSelectedSingle(event) {\n    const element = event.currentTarget;\n    const fileList = element.files;\n    if (fileList && fileList.length > 0) {\n      this.selectedFileSingle = fileList[0];\n      this.resetConversionState(); // Reset previous conversion results\n    }\n  }\n  onDragOverSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = true;\n  }\n  onDragLeaveSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = false;\n  }\n  onDropSingle(event) {\n    this.preventDefaults(event);\n    this.isDragging = false;\n    const files = event.dataTransfer?.files;\n    if (files && files.length > 0) {\n      this.selectedFileSingle = files[0];\n      this.resetConversionState();\n    }\n  }\n  resetSingleFile() {\n    this.selectedFileSingle = null;\n    this.resetConversionState();\n    if (this.fileInputSingle && this.fileInputSingle.nativeElement) {\n      this.fileInputSingle.nativeElement.value = '';\n    }\n  }\n  uploadSingleFile() {\n    if (!this.selectedFileSingle) {\n      this.errorMessage = 'Please select a file to convert.';\n      return;\n    }\n    this.progress = 0;\n    this.downloadUrl = null;\n    this.errorMessage = null;\n    // Simulate file upload and conversion progress\n    const interval = setInterval(() => {\n      this.progress += 10;\n      if (this.progress >= 100) {\n        clearInterval(interval);\n        this.progress = 100;\n        // Simulate success and provide a dummy download URL\n        setTimeout(() => {\n          if (this.activeTool === 'jpg-to-pdf') {\n            this.downloadUrl = 'assets/sample.pdf'; // Replace with actual PDF URL\n          } else if (this.activeTool === 'pdf-to-word') {\n            this.downloadUrl = 'assets/sample.docx'; // Replace with actual DOCX URL\n          } else if (this.activeTool === 'word-to-pdf') {\n            this.downloadUrl = 'assets/sample.pdf'; // Replace with actual PDF URL\n          }\n          // In a real application, you would get the actual download URL from your backend\n        }, 500); // Small delay to show 100% before download link appears\n      }\n    }, 200); // Update progress every 200ms\n  }\n  // --- Multiple File Operations (Merge Images to PDF) ---\n  onFilesSelectedMultiple(event) {\n    const element = event.currentTarget;\n    const fileList = element.files;\n    this.selectedFilesMultiple = []; // Clear previous selection\n    if (fileList) {\n      for (let i = 0; i < fileList.length; i++) {\n        this.selectedFilesMultiple.push(fileList[i]);\n      }\n      this.resetConversionState();\n    }\n  }\n  onFilesDroppedMultiple(event) {\n    this.preventDefaults(event);\n    this.isDragging = false;\n    const files = event.dataTransfer?.files;\n    this.selectedFilesMultiple = []; // Clear previous selection\n    if (files) {\n      for (let i = 0; i < files.length; i++) {\n        this.selectedFilesMultiple.push(files[i]);\n      }\n      this.resetConversionState();\n    }\n  }\n  resetMultipleFiles() {\n    this.selectedFilesMultiple = [];\n    this.resetConversionState();\n    if (this.fileInputMultiple && this.fileInputMultiple.nativeElement) {\n      this.fileInputMultiple.nativeElement.value = '';\n    }\n  }\n  uploadMultipleFiles() {\n    if (this.selectedFilesMultiple.length === 0) {\n      this.errorMessage = 'Please select images to merge.';\n      return;\n    }\n    this.progress = 0;\n    this.downloadUrl = null;\n    this.errorMessage = null;\n    // Simulate upload and merge progress\n    const interval = setInterval(() => {\n      this.progress += 10;\n      if (this.progress >= 100) {\n        clearInterval(interval);\n        this.progress = 100;\n        // Simulate success and provide a dummy download URL\n        setTimeout(() => {\n          this.downloadUrl = 'assets/merged_images.pdf'; // Replace with actual merged PDF URL\n        }, 500);\n      }\n    }, 200);\n  }\n  // --- Helper Functions ---\n  preventDefaults(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  getFileAcceptTypes(tool) {\n    switch (tool) {\n      case 'jpg-to-pdf':\n        return 'image/jpeg,image/png,image/gif,image/bmp';\n      case 'pdf-to-word':\n        return 'application/pdf';\n      case 'word-to-pdf':\n        return 'application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document';\n      case 'merge-images-to-pdf':\n        return 'image/*';\n      // Accept all image types for multi-upload\n      default:\n        return '*/*';\n    }\n  }\n  resetConversionState() {\n    this.progress = 0;\n    this.downloadUrl = null;\n    this.errorMessage = null;\n  }\n};\n__decorate([ViewChild('fileInputSingle'), __metadata(\"design:type\", ElementRef)], AppComponent.prototype, \"fileInputSingle\", void 0);\n__decorate([ViewChild('fileInputMultiple'), __metadata(\"design:type\", ElementRef)], AppComponent.prototype, \"fileInputMultiple\", void 0);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}